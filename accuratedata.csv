Name,Description,Likelihood Of Attack,Prerequisites,Skills Required,Consequences,Mitigations
Accessing Functionality Not Properly Constrained by ACLs,"In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",High,"The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.The various resources, or individual URLs, must be somehow discoverable by the attackerThe administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.","SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic."
Buffer Overflow via Environment Variables,"This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",High,The application uses environment variables.An environment variable exposed to the user is vulnerable to a buffer overflow.The vulnerable environment variable uses untrusted data.Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.,SKILL:An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Do not expose environment variable to the user.Do not use untrusted data in your environment variables.Use a language or compiler that performs automatic bounds checkingThere are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.
Overflow Buffers,"Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.",High,Targeted software performs buffer operations.Targeted software inadequately performs bounds-checking on buffer operations.Adversary has the capability to influence the input to buffer operations.,"SKILL:In most cases, overflowing a buffer does not require advanced skills beyond the ability to notice an overflow and stuff an input variable with content.:LEVEL:LowSKILL:In cases of directed overflows, where the motive is to divert the flow of the program or application as per the adversaries' bidding, high level skills are required. This may involve detailed knowledge of the target system architecture and kernel.:LEVEL:High",SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a language or compiler that performs automatic bounds checking.Use secure functions not vulnerable to buffer overflow.If you have to use dangerous functions, make sure that you do boundary checking.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution.Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software."
Server Side Include (SSI) Injection,"An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",High,A web server that supports server side includes and has them enabledUser controllable input that can carry include directives to the web server,"SKILL:The attacker needs to be aware of SSI technology, determine the nature of injection and be able to craft input that results in the SSI directives being executed.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need themAll user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directiveServer Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead"
Session Sidejacking,"Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.",High,"An attacker and the victim are both using the same WiFi network.The victim has an active session with a target system.The victim is not using a secure channel to communicate with the target system (e.g. SSL, VPN, etc.)The victim initiated communication with a target system that requires transfer of the session token or the target application uses AJAX and thereby periodically rings home asynchronously using the session token",SKILL:Easy to use tools exist to automate this attack.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks."
Clickjacking,"An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.",Medium,"The victim is communicating with the target application via a web based UI and not a thick clientThe victim's browser security policies allow at least one of the following JavaScript, Flash, iFrames, ActiveX, or CSS.The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser)The victim has an active session with the target system.The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system",SKILL:Crafting the proper malicious site and luring the victim to this site are not trivial tasks.:LEVEL:High,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.Turn off JavaScript, Flash and disable CSS.When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks."
Cross Zone Scripting,An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security.,Medium,The target must be using a zone-aware browser.,SKILL:Ability to craft malicious scripts or find them elsewhere and ability to identify functionality that is running web controls in the local zone and to find an injection vector into that functionality:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Disable script execution.Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zoneLimit the flow of untrusted data into the privileged areas of the system that run in the higher trust zoneLimit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimumEnsure proper HTML output encoding before writing user supplied data to the page
HTTP Request Splitting,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",Medium,"An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.HTTP headers capable of being user-manipulated.HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.
Cross Site Tracing,Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to a destination system's web server.,Medium,HTTP TRACE is enabled on the web serverThe destination system is susceptible to XSS or an adversary can leverage some other weakness to bypass the same origin policyScripting is enabled in the client's browserHTTP is used as the communication protocol between the server and the client,SKILL:Understanding of the HTTP protocol and an ability to craft a malicious script:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.Patch web browser against known security origin policy bypass exploits.
Command Line Execution through SQL Injection,"An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.",Low,The application does not properly validate data before storing in the databaseBackend application implicitly trusts the data stored in the databaseMalicious data is used on the backend as a command line argument,"SKILL:The attacker most likely has to be familiar with the internal functionality of the system to launch this attack. Without that knowledge, there are not many feedback mechanisms to give an attacker the indication of how to perform command injection or whether the attack is succeeding.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Disable MSSQL xp_cmdshell directive on the databaseProperly validate the data (syntactically and semantically) before writing it to the database.Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).
Object Relational Mapping Injection,"An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.",Low,"An application uses data access layer generated by an ORM tool or frameworkAn application uses user supplied data in queries executed against the databaseThe separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework",SKILL:Knowledge of general SQL injection techniques and subtleties of the ORM framework is needed:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the frameworkEnsure to keep up to date with security relevant updates to the persistence framework used within your application.
Cause Web Server Misclassification,"An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.",Medium,Web server software must rely on file name or file extension for processing.The attacker must be able to make HTTP requests to the web server.,"SKILL:To modify file name or file extension:LEVEL:LowSKILL:To use misclassification to force the Web server to disclose configuration information, source, or binary data:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Implementation: Server routines should be determined by content not determined by filename or file extension.
SQL Injection through SOAP Parameter Tampering,"An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.",High,SOAP messages are used as a communication mechanism in the systemSOAP parameters are not properly validated at the service providerThe service provider does not properly utilize parameter binding when building SQL queries,SKILL:If the attacker is able to gain good understanding of the system's database schema:LEVEL:MediumSKILL:If the attacker has to perform Blind SQL Injection:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Properly validate and sanitize/reject user input at the service provider.Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly."
JSON Hijacking (aka JavaScript Hijacking),An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.,High,JSON is used as a transport mechanism between the client and the serverThe target server cannot differentiate real requests from forged requestsThe JSON object returned from the server can be accessed by the attackers' malicious code via a script tag,"SKILL:Once this attack pattern is developed and understood, creating an exploit is not very complex.The attacker needs to have knowledge of the URLs that need to be accessed on the target system to request the JSON objects.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario."
Choosing Message Identifier,"This pattern of attack is defined by the selection of messages distributed via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.",High,"Information and client-sensitive (and client-specific) data must be present through a distribution channel available to all users.Distribution means must code (through channel, message identifiers, or convention) message destination in a manner visible within the distribution means itself (such as a control channel) or in the messages themselves.",SKILL:All the adversary needs to discover is the format of the messages on the channel/distribution means and the particular identifier used within the messages.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Associate some ACL (in the form of a token) with an authenticated user which they provide middleware. The middleware uses this token as part of its channel/message selection for that client, or part of a discerning authorization decision for privileged channels/messages. The purpose is to architect the system in a way that associates proper authentication/authorization with each channel/message.Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them."
Exploit Non-Production Interfaces,"An adversary exploits a sample, demonstration, test, or debug interface that is unintentionally enabled on a production system, with the goal of gleaning information or leveraging functionality that would otherwise be unavailable.",Low,The target must have configured non-production interfaces and failed to secure or remove them when brought into a production environment.,SKILL:Exploiting non-production interfaces requires significant skill and knowledge about the potential non-production interfaces left enabled in production.:LEVEL:High,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Access Control:SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Alter Execution Logic,Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.
Privilege Abuse,An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.,High,"The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources.",SKILL:Adversary can leverage privileged features they already have access to without additional effort or skill. Adversary is only required to have access to an account with improper priveleges.:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.
Path Traversal,"An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or ) and/or dots (.)) to reach desired directories or files.",High,The attacker must be able to control the path that is requested of the target.The target must fail to adequately sanitize incoming paths,SKILL:Simple command line attacks or to inject the malicious payload in a web page.:LEVEL:LowSKILL:Customizing attacks to bypass non trivial filters in the application.:LEVEL:Medium,"SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.","Design: Configure the access control correctly.Design: Enforce principle of least privilege.Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.Implementation: Perform input validation for all remote content, including remote and user-generated content.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.Implementation: Use indirect references rather than actual file names.Implementation: Use possible permissions on file access when developing and deploying web applications.Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach."
Directory Indexing,"An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",High,The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.The adversary must be able to control the path that is requested of the target.The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.The server version or patch level must not inherently prevent known directory listing attacks from working.,SKILL:To issue the request to URL without given a specific file name:LEVEL:LowSKILL:To bypass the access control of the directory of listings:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information Leakage,"1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message."
Subverting Environment Variable Values,The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.,High,An environment variable is accessible to the user.An environment variable used by the application can be tainted with user supplied data.Input data used in an environment variable is not validated properly.The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an adversary may attempt to manipulate that variable.,"SKILL:In a web based scenario, the client controls the data that it submitted to the server. So anybody can try to send malicious data and try to bypass the authentication mechanism.:LEVEL:LowSKILL:Some more advanced attacks may require knowledge about protocols and probing technique which help controlling a variable. The malicious user may try to understand the authentication mechanism in order to defeat it.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Accountability:TECHNICAL IMPACT:Hide Activities,Protect environment variables against unauthorized read and write access.Protect the configuration files which contain environment variables against illegitimate read and write access.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.
Symlink Attack,"An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.",Low,The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The adversary must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear.,SKILL:To create symlinks:LEVEL:LowSKILL:To identify the files and create the symlinks during the file operation time window:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information LeakageSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions."
Format String Injection,"An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",High,"The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.","SKILL:In order to discover format string vulnerabilities it takes only low skill, however, converting this discovery into a working exploit requires advanced knowledge on the part of the adversary.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism,Limit the usage of formatting string functions.Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.
LDAP Injection,"An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.",High,"The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.","SKILL:The attacker needs to have knowledge of LDAP, especially its query syntax.:LEVEL:Medium",SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.
Relative Path Traversal,"An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or ) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.",High,"The target application must accept a string as user input, fail to sanitize combinations of characters in the input that have a special meaning in the context of path navigation, and insert the user-supplied string into path navigation commands.",SKILL:To inject the malicious payload in a web page:LEVEL:LowSKILL:To bypass non trivial filters in the application:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcementImplementation: Perform input validation for all remote content, including remote and user-generated content.Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.Implementation: Prefer working without user input when using file system callsImplementation: Use indirect references rather than actual file names.Implementation: Use possible permissions on file access when developing and deploying web applications."
Client-side Injection-induced Buffer Overflow,"This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads.",Medium,The targeted client software communicates with an external server.The targeted client software has a buffer overflow vulnerability.,"SKILL:To achieve a denial of service, an attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap requires a more in-depth knowledge and higher skill level.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"The client software should not install untrusted code from a non-authenticated server.The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.Perform input validation for length of buffer inputs.Use a language or compiler that performs automatic bounds checking.Use an abstraction library to abstract away risky APIs. Not a complete solution.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Ensure all buffer uses are consistently bounds-checked.Use OS-level preventative functionality. Not a complete solution."
XML Ping of the Death,"An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",Low,The target must receive and process XML transactions.,SKILL:To send small XML messages:LEVEL:LowSKILL:To use distributed network to launch the attack:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:DoS: resource consumption (other),Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.Implementation: Provide for network flow control and traffic shaping to control access to the resources.
Command Delimiters,"An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",High,Software's input validation or filtering must not detect and block presence of additional malicious command.,"SKILL:The attacker has to identify injection vector, identify the specific commands, and optionally collect the output, i.e. from an interactive session.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Design: Perform allowlist validation against a positive specification for command length, type, and parameters.Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged accountImplementation: Perform input validation for all remote content.Implementation: Use type conversions such as JDBC prepared statements."
Redirect Access to Libraries,"An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",High,The target must utilize external libraries and must fail to verify the integrity of these libraries before using them.,SKILL:To modify the entries in the configuration file pointing to malicious libraries:LEVEL:LowSKILL:To force symlink and timing issues for redirecting access to libraries:LEVEL:MediumSKILL:To reverse engineering the libraries and inject malicious code into the libraries:LEVEL:High,SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Implementation: Restrict the permission to modify the entries in the configuration file.Implementation: Check the integrity of the dynamically linked libraries before use them.Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.
Dictionary-based Password Attack,"An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern. Dictionary Attacks differ from similar attacks such as Password Spraying (CAPEC-565) and Credential Stuffing (CAPEC-600), since they leverage unknown username/password combinations and don't care about inducing account lockouts.",Medium,The system uses one factor password based authentication.The system does not have a sound password policy that is being enforced.The system does not implement an effective password throttling mechanism.,SKILL:A variety of password cracking tools and dictionaries are available to launch this type of an attack.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Create a strong password policy and ensure that your system enforces this policy.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Leverage multi-factor authentication for all authentication services.
Spear Phishing,"An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.",High,None. Any user can be targeted by a Spear Phishing attack.,"SKILL:Spear phishing attacks require specific knowledge of the victims being targeted, such as which bank is being used by the victims, or websites they commonly log into (Google, Facebook, etc).:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information LeakageSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges:NOTE:Privilege EscalationSCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:Data Modification,"Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind."
Mobile Phishing,"An adversary targets mobile phone users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Mobile Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a text or SMS message, rather than email. The user is enticed to provide information or visit a compromised web site via this message. Apart from the manner in which the attack is initiated, the attack proceeds as a standard Phishing attack.",High,An adversary needs mobile phone numbers to initiate contact with the victim.An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.,"SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind."
Footprinting,An adversary engages in probing and exploration activities to identify constituents and properties of the target.,High,"An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack.","SKILL:The adversary knows how to send HTTP request, run the scan tool.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Keep patches up to date by installing weekly or daily if possible.Shut down unnecessary services/ports.Change default passwords by choosing strong passwords.Curtail unexpected input.Encrypt and password-protect sensitive data.Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents."
Using Malicious Files,"An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.",High,System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."
Web Application Fingerprinting,"An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",High,"Any web application can be fingerprinted. However, some configuration choices can limit the useful information an attacker may collect during a fingerprinting attack.","SKILL:Attacker knows how to send HTTP request, SQL query to a web application.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage,Implementation: Obfuscate server fields of HTTP response.Implementation: Hide inner ordering of HTTP response header.Implementation: Customizing HTTP error codes such as 404 or 500.Implementation: Hide URL file extension.Implementation: Hide HTTP response header software information filed.Implementation: Hide cookie's software information filed.Implementation: Appropriately deal with error messages.Implementation: Obfuscate database type in Database API's error message.
Cross-Site Flashing,"An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.",Medium,The targeted Flash application must reference external URLs and the locations thus referenced must be controllable through parameters. The Flash application must fail to sanitize such parameters against malicious manipulation. The victim must follow a crafted link created by the attacker.,"SKILL:knowledge of Flash internals, parameters and remote referencing.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Implementation: Only allow known URL to be included as remote flash movies in a flash applicationConfiguration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.
XSS Targeting Non-Script Elements,"This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",High,The target client software must allow the execution of scripts generated by remote hosts.,"SKILL:To achieve a redirection and use of less trusted source, an adversary can simply edit content such as XML payload or HTML files that are sent to client machine.:LEVEL:LowSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed."
Exploiting Incorrectly Configured Access Control Security Levels,"An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",High,"The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity..","SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,Design: Configure the access control correctly.
Flash Injection,"An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.",High,"The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link.","SKILL:The attacker needs to have knowledge of Flash, especially how to insert content the executes commands.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information LeakageSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Implementation: remove sensitive information such as user name and password in the SWF file.Implementation: use validation on both client and server side.Implementation: remove debug information.Implementation: use SSL when loading external dataImplementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.
Embedding Scripts within Scripts,An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts.,High,"Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts.","SKILL:To load malicious script into open, e.g. world writable directory:LEVEL:LowSKILL:Executing remote scripts on host and collecting output:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use browser technologies that do not allow client side scripting.Utilize strict type, character, and encoding enforcement.Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Ensure all content that is delivered to client is sanitized against an acceptable content specification.Perform input validation for all remote content.Perform output validation for all remote content.Disable scripting languages such as JavaScript in browserSession tokens for specific hostPatching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode"
PHP Remote File Inclusion,"In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized include or require call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.",High,"Target application server must allow remote files to be included in the require, include, etc. PHP directivesThe adversary must have the ability to make HTTP requests to the target web application.",SKILL:To inject the malicious payload in a web page:LEVEL:LowSKILL:To bypass filters in the application:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Implementation: Perform input validation for all remote content, including remote and user-generated contentImplementation: Only allow known files to be included (allowlist)Implementation: Make use of indirect references passed in URL parameters instead of file namesConfiguration: Ensure that remote scripts cannot be include in the include or require PHP directives"
Session Credential Falsification through Forging,"An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.",Medium,The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers.,SKILL:Forge the session credential and reply the request.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes."
Exponential Data Expansion,"An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",High,This type of attack requires that the target must receive input but either fail to provide an upper limit for entity expansion or provide a limit that is so large that it does not preclude significant resource consumption.,SKILL:Ability to craft nested data expansion messages.:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources."
XSS Using Alternate Syntax,"An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the script tag using the alternate forms of Script or ScRiPt may bypass filters where script is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",High,Target client software must allow scripting such as JavaScript.,SKILL:To inject the malicious payload in a web page:LEVEL:LowSKILL:To bypass non trivial filters in the application:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.Implementation: Perform input validation for all remote content, including remote and user-generated contentImplementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
Inducing Account Lockout,"An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",High,The system has a lockout mechanism.An attacker must be able to reproduce behavior that would result in an account being locked.,SKILL:No programming skills or computer knowledge is needed. An attacker can easily use this attack pattern following the Execution Flow above.:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.When implementing security features, consider how they can be misused and made to turn on themselves."
Encryption Brute Forcing,"An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.",Low,Ciphertext is known.Encryption algorithm and key size are known.,SKILL:Brute forcing encryption does not require much skill.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months."
Serialized Data External Linking,"An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.",High,The target must follow external data references without validating the validity of the reference target.,SKILL:To send serialized data messages with maliciously crafted schema.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Configure the serialized data processor to only retrieve external entities from trusted sources.
Removing Important Client Functionality,An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.,Medium,"The targeted server must assume the client performs important actions to protect the server or the server functionality. For example, the server may assume the client filters outbound traffic or that the client performs all price calculations correctly. Moreover, the server must fail to detect when these assumptions are violated by a client.",SKILL:To reverse engineer the client-side code to disable/remove the functionality on the client that the server relies on.:LEVEL:HighSKILL:The adversary installs a web tool that allows scripts or the DOM model of web-based applications to be modified before they are executed in a browser. GreaseMonkey and Firebug are two examples of such tools.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information LeakageSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.Design: Ship client-side application with integrity checks (code signing) when possible.Design: Use obfuscation and other techniques to prevent reverse engineering the client code."
Exploitation of Trusted Identifiers,"An adversary guesses, obtains, or rides a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.",High,Server software must rely on weak identifier proof and/or verification schemes.Identifiers must have long lifetimes and potential for reusability.Server software must allow concurrent sessions to exist.,"SKILL:To achieve a direct connection with the weak or non-existent server session access control, and pose as an authorized user:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.Implementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.Implementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted.Design: Use strong session identifiers that are protected in transit and at rest.Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.Implementation: Verify authenticity of all identifiers at runtime."
Functionality Misuse,"An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.",Medium,The adversary has the capability to interact with the application directly.The target system does not adequately implement safeguards to prevent misuse of authorized actions/processes.,"SKILL:General computer knowledge about how applications are launched, how they interact with input/output, and how they are configured.:LEVEL:Low","SCOPE:Confidentiality:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful attack of this kind can compromise the confidentiality of an authorized user's credentials.SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Depending on the adversary's intended technical impact, a successful attack of this kind can compromise any or all elements of the security triad.","Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.When implementing security features, consider how they can be misused and compromised."
Fuzzing for application mapping,"An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.",High,The target application must fail to sanitize incoming messages adequately before processing.,"SKILL:Although fuzzing parameters is not difficult, and often possible with automated fuzzing tools, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage,"Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.Implementation: Obfuscate server fields of HTTP response.Implementation: Hide inner ordering of HTTP response header.Implementation: Customizing HTTP error codes such as 404 or 500.Implementation: Hide HTTP response header software information filed.Implementation: Hide cookie's software information filed.Implementation: Obfuscate database type in Database API's error message."
Exploiting Incorrectly Configured SSL/TLS,An adversary takes advantage of incorrectly configured SSL/TLS communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.,Low,Access to the client/server stream.,"SKILL:The adversary needs real-time access to network traffic in such a manner that the adversary can grab needed information from the SSL stream, possibly influence the decided-upon encryption method and options, and perform automated analysis to decipher encrypted material recovered. Tools exist to automate part of the tasks, but to successfully use these tools in an attack scenario requires detailed understanding of the underlying principles.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.Configure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security."
XML Routing Detour Attacks,"An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",High,The targeted system must have multiple stages processing of XML content.,SKILL:To inject a bogus node in the XML routing table:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.Implementation: Use SSL for connections between all parties with mutual authentication.
Exploiting Trust in Client,"An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.",High,"Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side.",SKILL:The attacker must have fairly detailed knowledge of the syntax and semantics of client/server communications protocols and grammars:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.Design: Do not rely on client validation or encoding for security purposes.Design: Utilize digital signatures to increase authentication assurance.Design: Utilize two factor authentication to increase authentication assurance.Implementation: Perform input validation for all remote content.
iFrame Overlay,In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system.,Medium,The victim is communicating with the target application via a web based UI and not a thick client. The victim's browser security policies allow iFrames. The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser). The victim has an active session with the target system. The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system.,SKILL:Crafting the proper malicious site and luring the victim to this site is not a trivial task.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Configuration: Disable iFrames in the Web browser.Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames."
Fingerprinting,"An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",High,A means by which to interact with the target system directly.,"SKILL:Some fingerprinting activity requires very specific knowledge of how different operating systems respond to various TCP/IP requests. Application fingerprinting can be as easy as envoking the application with the correct command line argument, or mouse clicking in the appropriate place on the screen.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible."
File Content Injection,"An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.",High,The target software must consume files.The adversary must have access to modify files that the target software will consume.,"SKILL:How to poison a file with malicious payload that will exploit a vulnerability when the file is opened. The adversary must also know how to place the file onto a system where it will be opened by an unsuspecting party, or force the file to be opened.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Design: Enforce principle of least privilegeDesign: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.Implementation: Virus scanning on hostImplementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin."
Oversized Serialized Data Payloads,An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.,Medium,An application uses an parser for serialized data to perform transformation on user-controllable data.An application does not perform sufficient validation to ensure that user-controllable data is safe for a data parser.,SKILL:Denial of service:LEVEL:LowSKILL:Arbitrary code execution:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Resource ConsumptionSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Carefully validate and sanitize all user-controllable serialized data prior to passing it to the parser routine. Ensure that the resultant data is safe to pass to the parser.Perform validation on canonical data.Pick a robust implementation of the serialized data parser.Validate data against a valid schema or DTD prior to parsing.
Filter Failure through Buffer Overflow,"In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).",High,Ability to control the length of data passed to an active filter.,SKILL:An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.Pre-design: Use a language or compiler that performs automatic bounds checking.Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Operational: Use OS-level preventative functionality. Not a complete solution.Design: Use an abstraction library to abstract away risky APIs. Not a complete solution."
XSS Targeting URI Placeholders,"An attack of this type exploits the ability of most browsers to interpret data, javascript or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.",High,Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme.,SKILL:To inject the malicious payload in a web page:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcement.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.Implementation: Perform input validation for all remote content, including remote and user-generated contentImplementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
Forced Deadlock,"The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",Low,"The target host has a deadlock condition. There are four conditions for a deadlock to occur, known as the Coffman conditions. [REF-101]The target host exposes an API to the user.",SKILL:This type of attack may be sophisticated and require knowledge about the system's resources and APIs.:LEVEL:Medium,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful forced deadlock attack compromises the availability of the system by exhausting its available resources.,"Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).For competing actions, use well-known libraries which implement synchronization."
XML Injection,"An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.",High,XML queries used to process user input and retrieve information stored in XML documentsUser-controllable input not properly sanitized,SKILL:An attacker must have knowledge of XML syntax and constructs in order to successfully leverage XML Injection:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.
Leveraging Race Conditions,"The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by running the race, modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",High,A resource is accessed/modified concurrently by multiple processes such that a race condition exists.The adversary has the ability to modify the resource.,SKILL:Being able to run the race requires basic knowledge of concurrent processing including synchonization techniques.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Use safe libraries to access resources such as files.Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.Use synchronization to control the flow of execution.Use static analysis tools to find race conditions.Pay attention to concurrency problems related to the access of resources."
Leverage Alternate Encoding,An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.,High,"The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host.",SKILL:An adversary can inject different representation of a filtered character in a different encoding.:LEVEL:LowSKILL:An adversary may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input."
Leveraging Race Conditions via Symbolic Links,"This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",Medium,The attacker is able to create Symlink links on the target host.Tainted data from the attacker is used and copied to temporary files.The target host does insecure temporary file creation.,"SKILL:This attack is sophisticated because the attacker has to overcome a few challenges such as creating symlinks on the target host during a precise timing, inserting malicious data in the temporary file and have knowledge about the temporary files created (file name and function which creates them).:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.Follow the principle of least privilege when assigning access rights to files.Ensure good compartmentalization in the system to provide protected areas that can be trusted."
HTTP Response Smuggling,"An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server). See CanPrecede relationships for possible consequences.",Medium,"A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).Differences in the way the two HTTP agents parse and interpret HTTP responses and its headers.HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid charactersConfiguration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
DNS Rebinding,"An adversary serves content whose IP address is resolved by a DNS server that the adversary controls. After initial contact by a web browser (or similar client), the adversary changes the IP address to which its name resolves, to an address within the target organization that is not publicly accessible. This allows the web browser to examine this internal address on behalf of the adversary.",High,The target browser must access content server from the adversary controlled DNS name. Web advertisements are often used for this purpose. The target browser must honor the TTL value returned by the adversary and re-resolve the adversary's DNS name after initial contact.,SKILL:Setup DNS server and the adversary's web server. Write a malicious script to allow the victim to connect to the web server.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response. Unfortunately, this is incompatible with the design of some legitimate sites.Implementation: Reject HTTP request with a malicious Host header.Implementation: Employ DNS resolvers that prevent external names from resolving to internal addresses."
ICMP Echo Request Ping,"An adversary sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss.",Medium,The ability to send an ICMP type 8 query (Echo Request) to a remote target and receive an ICMP type 0 message (ICMP Echo Reply) in response. Any firewalls or access control lists between the sender and receiver must allow ICMP Type 8 and ICMP Type 0 messages in order for a ping operation to succeed.,SKILL:The adversary needs to know certain linux commands for this type of attack.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:A successful attack of this kind can identify open ports and available services on a system.,"Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers."
Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions,"This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",High,A resource is access/modified concurrently by multiple processes.The adversary is able to modify resource.A race condition exists while accessing a resource.,SKILL:This attack can get sophisticated since the attack has to occur within a short interval of time.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Alter Execution LogicSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Use safe libraries to access resources such as files.Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.Use synchronization to control the flow of execution.Use static analysis tools to find race conditions.Pay attention to concurrency problems related to the access of resources."
Using Leading 'Ghost' Character Sequences to Bypass Input Filters,"Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ghost characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",Medium,The targeted API must ignore the leading ghost characters that are used to get past the filters for the semantics to be the same.,"SKILL:The ability to make an API request, and knowledge of ghost characters that will not be filtered by any input validation. These ghost characters must be known to not affect the way in which the request will be interpreted.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Use an allowlist rather than a denylist input validation.Canonicalize all data prior to validation.Take an iterative approach to input validation (defense in depth).
Hijacking a Privileged Thread of Execution,"An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",Low,"The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal usersIn order to feasibly execute this class of attacks, the adversary must have the ability to hijack a privileged thread. This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or calling native OS calls that can suspend and alter process memory. This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.","SKILL:Hijacking a thread involves knowledge of how processes and threads function on the target platform, the design of the target application as well as the ability to identify the primitives to be used or manipulated to hijack the thread.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope."
Accessing/Intercepting/Modifying HTTP Cookies,"This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.",High,"Target server software must be a HTTP daemon that relies on cookies.The cookies must contain sensitive information.The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply.","SKILL:To overwrite session cookie data, and submit targeted attacks via HTTP:LEVEL:LowSKILL:Exploiting a remote buffer overflow generated by attack:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Use input validation for cookiesDesign: Generate and validate MAC for cookiesImplementation: Use SSL/TLS to protect cookie in transitImplementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software."
XSS Through HTTP Query Strings,An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser.,High,Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation.,SKILL:To place malicious payload on server via HTTP:LEVEL:LowSKILL:Exploiting any information gathered by HTTP Query on script host:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content, including remote and user-generated contentImplementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Session tokens for specific hostImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode"
HTTP Request Smuggling,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",Medium,"An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid charactersConfiguration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
HTTP Response Splitting,"An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site. See CanPrecede relationships for possible consequences.",Medium,"A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.HTTP headers capable of being user-manipulated.HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.
Leverage Executable Code in Non-Executable Files,An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.,High,The attacker must have the ability to modify non-executable files consumed by the target software.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute."
Using Unpublished Interfaces or Functionality,"An adversary searches for and invokes interfaces or functionality that the target system designers did not intend to be publicly available. If interfaces fail to authenticate requests, the attacker may be able to invoke functionality they are not authorized for.",Medium,"The architecture under attack must publish or otherwise make available services that clients can attach to, either in an unauthenticated fashion, or having obtained an authentication token elsewhere. The service need not be 'discoverable', but in the event it isn't it must have some way of being discovered by an attacker. This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service.","SKILL:A number of web service digging tools are available for free that help discover exposed web services and their interfaces. In the event that a web service is not listed, the attacker does not need to know much more in addition to the format of web service messages that they can sniff/monitor for.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like."
Leveraging/Manipulating Configuration File Search Paths,"This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",High,The attacker must be able to write to redirect search paths on the victim host.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the programImplementation: Host integrity monitoring"
Manipulating Opaque Client-based Data Tokens,"In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",High,"An attacker already has some access to the system or can steal the client based data tokens from another user who has access to the system.For an Attacker to viably execute this attack, some data (later interpreted by the application) must be held client-side in a way that can be manipulated without detection. This means that the data or tokens are not CRCd as part of their value or through a separate meta-data store elsewhere.",SKILL:If the client site token is obfuscated.:LEVEL:MediumSKILL:If the client site token is encrypted.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)Make sure that all session tokens use a good source of randomnessPerform validation on the server side to make sure that client side data tokens are consistent with what is expected."
Using Alternative IP Address Encodings,"This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",Medium,The target software must fail to anticipate all of the possible valid encodings of an IP/web address.The adversary must have the ability to communicate with the server.,SKILL:The adversary has only to try IP address format combinations.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Default deny access control policiesDesign: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)Implementation: Perform input validation for all remote content."
Manipulating Writeable Terminal Devices,This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.,High,User terminals must have a permissive access control such as world writeable that allows normal users to control data on other user's terminals.,"SKILL:Ability to discover permissions on terminal devices. Of course, brute force can also be used.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Design: Ensure that terminals are only writeable by named owner user and/or administratorDesign: Enforce principle of least privilege
Pretexting,"An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",Medium,The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the pretext that would influence the actions of the specific target.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Depending on the adversary's intentions and the specific nature their actions/requests, a successful pretexting attack can result in the compromise to the confidentiality of sensitive information in a variety of contexts.","An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks."
Using Meta-characters in E-mail Headers to Inject Malicious Payloads,"This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",High,"This attack targets most widely deployed feature rich email applications, including web based email programs.",SKILL:To distribute email:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Design: Perform validation on email header dataImplementation: Implement email filtering solutions on mail server or on MTA, relay server.Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names"
Influence Perception,The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.,High,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that influence the perception of the target can result in a wide variety of consequences and negatively affect potentially the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence Perception of Reciprocation,"An adversary uses a social engineering techniques to produce a sense of obligation in the target to perform a certain action or concede some sensitive or key piece of information. Obligation has to do with actions one feels they need to take due to some sort of social, legal, or moral requirement, duty, contract, or promise. There are various techniques for fostering a sense of obligation to reciprocate or concede during ordinary modes of communication. One method is to compliment the target, and follow up the compliment with a question. If performed correctly the target may volunteer a key piece of information, sometimes involuntarily.",Medium,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that influence the perception of the target can result in a wide variety of consequences and negatively affect potentially the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
MIME Conversion,An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.,High,"The target system uses a mail server.Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system.",SKILL:It may be trivial to cause a DoS via this attack pattern:LEVEL:LowSKILL:Causing arbitrary code to execute on the target system.:LEVEL:High,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Stay up to date with third party vendor patchesDisable the 7 to 8 bit conversion. This can be done by removing the F=9 flag from all Mailer specifications in the sendmail.cf file. For example, a sendmail.cf file with these changes applied should look similar to (depending on your system and configuration): Mlocal, P=/usr/libexec/mail.local, F=lsDFMAw5:/|@qrmn, S=10/30, R=20/40,T=DNS/RFC822/X-Unix,A=mail -d $u Mprog, P=/bin/sh, F=lsDFMoqeu, S=10/30, R=20/40,D=$z:/,T=X-Unix,A=sh -c $u This can be achieved for the Mlocal and Mprog Mailers by modifying the .mc file to include the following lines: define(`LOCAL_MAILER_FLAGS',ifdef(`LOCAL_MAILER_FLAGS',`translit(LOCAL_MAILER_FLAGS, `9')',`rmn')) define(`LOCAL_SHELL_FLAGS',ifdef(`LOCAL_SHELL_FLAGS',`translit(LOCAL_SHELL_FLAGS, `9')',`eu')) and then rebuilding the sendmail.cf file using m4(1). From Exploiting Software, please see reference below.Use the sendmail restricted shell program (smrsh)Use mail.local"
Influence Perception of Scarcity,"The adversary leverages a perception of scarcity to persuade the target to perform an action or divulge information that is advantageous to the adversary. By conveying a perception of scarcity, or a situation of limited supply, the adversary aims to create a sense of urgency in the context of a target's decision-making process.",High,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence Perception of Authority,"An adversary uses a social engineering technique to convey a sense of authority that motivates the target to reveal specific information or take specific action. There are various techniques for producing a sense of authority during ordinary modes of communication. One common method is impersonation. By impersonating someone with a position of power within an organization, an adversary may motivate the target individual to reveal some piece of sensitive information or perform an action that benefits the adversary.",High,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence Perception of Commitment and Consistency,"An adversary uses social engineering to convince the target to do minor tasks as opposed to larger actions. After complying with a request, individuals are more likely to agree to subsequent requests that are similar in type and required effort.",High,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.Individuals should avoid complying with suspicious requests."
Influence Perception of Liking,"The adversary influences the target's actions by building a relationship where the target has a liking to the adversary. People are more likely to be influenced by people of whom they are fond, so the adversary attempts to ingratiate themself with the target via actions, appearance, or a combination thereof.",Medium,The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the types of things that the target likes.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of liking can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence Perception of Consensus or Social Proof,"The adversary influences the target's actions by leveraging the inherent human nature to assume behavior of others is appropriate. In situations of uncertainty, people tend to behave in ways they see others behaving. The adversary convinces the target of adopting behavior or actions that is advantageous to the adversary.",Low,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of liking can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Target Influence via Framing,"An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word No and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.",Low,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Successful attacks that influence the target via framing into performing an action or sharing sensitive information can result in a variety of consequences that negatively affect the confidentiality of an application or system.,"An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication."
Influence via Incentives,"The adversary incites a behavior from the target by manipulating something of influence. This is commonly associated with financial, social, or ideological incentivization. Examples include monetary fraud, peer pressure, and preying on the target's morals or ethics. The most effective incentive against one target might not be as effective against another, therefore the adversary must gather information about the target's vulnerability to particular incentives.",Low,The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the incentives that would influence the actions of the specific target.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that successfully incentivize the target into performing an action beneficial to the adversary can result in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence via Psychological Principles,"The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.",Low,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that successfully influence the target into performing an action via psychological principles can result in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Exploiting Multiple Input Interpretation Layers,"An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a layer of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",Medium,User input is used to construct a command to be executed on the target system or as part of the file name.Multiple parser passes are performed on the data supplied by the user.,"SKILL:Knowledge of various escaping schemes, such as URL escape encoding and XML escape characters.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.
Overflow Binary Resource File,"An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",High,Target software processes binary resource files.Target software contains a buffer overflow vulnerability reachable through input from a user-controllable binary resource file.,"SKILL:To modify file, deceive client into downloading, locate and exploit remote stack or heap vulnerability:LEVEL:Medium",SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Perform appropriate bounds checking on all buffers.Design: Enforce principle of least privilegeDesign: Static code analysisImplementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processesImplementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host."
Buffer Overflow via Symbolic Links,"This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",High,The adversary can create symbolic link on the target host.The target host does not perform correct boundary checking while consuming data from a resources.,SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.Pay attention to the resource pointed to by your symlink links (See attack pattern named Forced Symlink race), they can be replaced by malicious resources.Always check the size of the input data before copying to a buffer.Use a language or compiler that performs automatic bounds checking.Use an abstraction library to abstract away risky APIs. Not a complete solution.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution."
Creating a Rogue Certification Authority Certificate,"An adversary exploits a weakness resulting from using a hashing algorithm with weak collision resistance to generate certificate signing requests (CSR) that contain collision blocks in their to be signed parts. The adversary submits one CSR to be signed by a trusted certificate authority then uses the signed blob to make a second certificate appear signed by said certificate authority. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority.",Medium,Certification Authority is using a hash function with insufficient collision resistance to generate the certificate hash to be signed,SKILL:Understanding of how to force a hash collision in X.509 certificates:LEVEL:HighSKILL:An attacker must be able to craft two X.509 certificates that produce the same hash value:LEVEL:HighSKILL:Knowledge needed to set up a certification authority:LEVEL:Medium,SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges,Certification Authorities need to stop using deprecated or cryptographically insecure hashing algorithms to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512.
Overflow Variables and Tags,"This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The adversary crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.",High,The target program consumes user-controllable data in the form of tags or variables.The target program does not perform sufficient boundary checking.,SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Use a language or compiler that performs automatic bounds checking.Use an abstraction library to abstract away risky APIs. Not a complete solution.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution.Do not trust input data from user. Validate all user input."
Buffer Overflow via Parameter Expansion,"In this attack, the target software is given input that the adversary knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.",Medium,"The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is).","SKILL:Finding this particular buffer overflow may not be trivial. Also, stack and especially heap based buffer overflows require a lot of knowledge if the intended goal is arbitrary code execution. Not only that the adversary needs to write the shell code to accomplish their goals, but the adversary also needs to find a way to get the program execution to jump to the planted shell code. There also needs to be sufficient room for the payload. So not every buffer overflow will be exploitable, even by a skilled adversary.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system
Passing Local Filenames to Functions That Expect a URL,"This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",High,"The victim's software must not differentiate between the location and type of reference passed the client software, e.g. browser",SKILL:Attacker identifies known local files to exploit:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.Design: Use browser technologies that do not allow client side scripting.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browser
Contradictory Destinations in Traffic Routing Schemes,"Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",Medium,"An adversary must be aware that their message will be routed using a CDN, and that both of the contradictory domains are served from that CDN.If the purpose of the Domain Fronting is to hide redirected C2 traffic, the C2 server must have been created in the CDN.",SKILL:The adversary must have some knowledge of how messages are routed.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data,"Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names."
Password Brute Forcing,"An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.",Medium,An adversary needs to know a username to target.The system uses password based authentication as the one factor authentication mechanism.An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical.,SKILL:A brute force attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
Blue Boxing,"This type of attack against older telephone switches and trunks has been around for decades. A tone is sent by an adversary to impersonate a supervisor signal which has the effect of rerouting or usurping command of the line. While the US infrastructure proper may not contain widespread vulnerabilities to this type of attack, many companies are connected globally through call centers and business process outsourcing. These international systems may be operated in countries which have not upgraded Telco infrastructure and so are vulnerable to Blue boxing. Blue boxing is a result of failure on the part of the system to enforce strong authorization for administrative functions. While the infrastructure is different than standard current applications like web applications, there are historical lessons to be learned to upgrade the access control for administrative functions. This attack pattern is included in CAPEC for historical purposes.",Medium,System must use weak authentication mechanisms for administrative functions.,"SKILL:Given a vulnerable phone system, the attackers' technical vector relies on attacks that are well documented in cracker 'zines and have been around for decades.:LEVEL:Low",SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Implementation: Upgrade phone lines. Note this may be prohibitively expensiveUse strong access control such as two factor access control for administrative access to the switch
Password Recovery Exploitation,An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure.,Medium,The system allows users to recover their passwords and gain access back into the system.Password recovery mechanism has been designed or implemented insecurely.Password recovery mechanism relies only on something the user knows and not something the user has.No third party intervention is required to use the password recovery mechanism.,SKILL:Brute force attack:LEVEL:LowSKILL:Social engineering and more sophisticated technical attacks.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.Ensure that your password recovery functionality is not vulnerable to an injection style attack.
Task Impersonation,"An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.",Medium,The adversary must already have access to the target system via some means.A legitimate task must exist that an adversary can impersonate to glean credentials.The user's privileges allow them to execute certain tasks with elevated privileges.,"SKILL:Once an adversary has gained access to the target system, impersonating a task is trivial.:LEVEL:Low",SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges,"The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help."
Shoulder Surfing,"In a shoulder surfing attack, an adversary observes an unaware individual's keystrokes, screen content, or conversations with the goal of obtaining sensitive information. One motive for this attack is to obtain sensitive information about the target for financial, personal, political, or other gains. From an insider threat perspective, an additional motive could be to obtain system/application credentials or cryptographic keys. Shoulder surfing attacks are accomplished by observing the content over the victim's shoulder, as implied by the name of this attack.",High,"The adversary typically requires physical proximity to the target's environment, in order to observe their screen or conversation. This may not be the case if the adversary is able to record the target and obtain sensitive information upon review of the recording.","SKILL:In most cases, an adversary can simply observe and retain the desired information.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:LIKELIHOOD:High,"Be mindful of your surroundings when discussing or viewing sensitive information in public areas.Pertaining to insider threats, ensure that sensitive information is not displayed to nor discussed around individuals without need-to-know access to said information."
Poison Web Service Registry,"SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.",High,The attacker must be able to write to resources or redirect access to the service registry.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: Enforce principle of least privilegeDesign: Harden registry server and file access permissionsImplementation: Implement communications to and from the registry using secure protocols
Embedding NULL Bytes,An adversary embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).,High,The program does not properly handle postfix NULL terminators,SKILL:Directory traversal:LEVEL:MediumSKILL:Execution of arbitrary code:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.
XML Flood,"An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.",Low,The target must receive and process XML transactions.An adverssary must possess the ability to generate a large amount of XML based messages to send to the target service.,SKILL:Denial of service:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption,Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.Implementation: Provide for network flow control and traffic shaping to control access to the resources.
Malware-Directed Internal Reconnaissance,"Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.",Medium,"The adversary must have internal, logical access to the target network and system.","SKILL:The adversary must be able to obtain or develop, as well as place malicious software inside the target network/system.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Keep patches up to date by installing weekly or daily if possible.Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.
"Postfix, Null Terminate, and Backslash","If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an adversary to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.",High,Null terminators are not properly handled by the filter.,"SKILL:An adversary needs to understand alternate encodings, what the filter looks for and the data format acceptable to the target API:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.
Query System for Information,"An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.",High,"This class of attacks does not strictly require authorized access to the application. As Attackers use this attack process to classify, map, and identify vulnerable aspects of an application, it simply requires hypotheses to be verified, interaction with the application, and time to conduct trial-and-error activities.","SKILL:Although fuzzing parameters is not difficult, and often possible with automated fuzzers, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Application designers can construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion."
Incomplete Data Deletion in a Multi-Tenant Environment,"An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",Low,The cloud provider must not assuredly delete part or all of the sensitive data for which they are responsible.The adversary must have the ability to interact with the system.,SKILL:The adversary requires the ability to traverse directory structure.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful attack that probes application memory will compromise the confidentiality of that data.,Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.Deletion of data should be completed promptly when requested.
Contaminate Resource,"An adversary contaminates organizational information systems (including devices and networks) by causing them to handle information of a classification/sensitivity for which they have not been authorized. When this happens, the contaminated information system, device, or network must be brought offline to investigate and mitigate the data spill, which denies availability of the system until the investigation is complete.",Low,The adversary needs to have real or fake classified/sensitive information to place on a system,SKILL:Knowledge of classification levels of systems:LEVEL:LowSKILL:The ability to obtain a classified document or information:LEVEL:HighSKILL:The ability to fake a classified document:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Victims of the attack can be exposed to classified materials,"Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.Have a planned and efficient response plan to limit the amount of time a system is offline while the contamination is investigated."
Rainbow Table Password Cracking,"An attacker gets access to the database table where hashes of passwords are stored. They then use a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.",Medium,"Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).The system uses one factor password based authentication.",SKILL:A variety of password cracking tools are available that can leverage a rainbow table. The more difficult part is to obtain the password hash(es) in the first place.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it."
Use of Known Domain Credentials,An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.,High,"The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.","SKILL:Once an adversary obtains a known credential, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.Create a strong password policy and ensure that your system enforces this policy.Ensure users are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse local administrator account credentials across systems.Deny remote use of local admin credentials to log into domain systems.Do not allow accounts to be a local administrator on more than one system.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Monitor system and domain logs for abnormal credential access."
Password Spraying,"In a Password Spraying attack, an adversary tries a small list (e.g. 3-5) of common or expected passwords, often matching the target's complexity policy, against a known list of user accounts to gain valid credentials. The adversary tries a particular password for each user account, before moving onto the next password in the list. This approach assists the adversary in remaining undetected by avoiding rapid or frequent account lockouts. The adversary may then reattempt the process with additional passwords, once enough time has passed to prevent inducing a lockout.",High,The system/application uses one factor password based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts on the target system/application.,SKILL:A Password Spraying attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Create a strong password policy and ensure that your system enforces this policy.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.
Utilizing REST's Trust in the System Resource to Obtain Sensitive Data,This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.,Medium,Opportunity to intercept must exist beyond the point where SSL is terminated.The adversary must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.,SKILL:To insert a network sniffer or other listener into the communication stream:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Implementation: Implement message level security such as HMAC in the HTTP communicationDesign: Utilize defense in depth, do not rely on a single security mechanism like SSLDesign: Enforce principle of least privilege"
Restful Privilege Elevation,"An adversary identifies a Rest HTTP (Get, Put, Delete) style permission method allowing them to perform various malicious actions upon server data due to lack of access control mechanisms implemented within the application service accepting HTTP messages.",High,The attacker needs to be able to identify HTTP Get URLs. The Get methods must be set to call applications that perform operations other than get such as update and delete.,SKILL:It is relatively straightforward to identify an HTTP Get method that changes state on the server side and executes against an over-privileged system interface:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Design: Enforce principle of least privilegeImplementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server sideImplementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose
System Footprinting,An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.,Low,The adversary must have logical access to the target network and system.,SKILL:The adversary needs to know basic linux commands.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Keep patches up to date by installing weekly or daily if possible.Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.
DOM-Based XSS,"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.",High,An application that leverages a client-side web browser with scripting enabled.An application that manipulates the DOM via client-side scripting.An application that failS to adequately sanitize or encode untrusted input.,SKILL:Requires the ability to write scripts of some complexity and to inject it through user controlled fields in the system.:LEVEL:Medium,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful DOM-based XSS attack can enable an adversary to exfiltrate sensitive information from the application.SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful DOM-based XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful DOM-based XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful DOM-based XSS attack can allow an adversary to tamper with application data.",Use browser technologies that do not allow client-side scripting.Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.Ensure that all user-supplied input is validated before use.
Session Credential Falsification through Prediction,This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.,High,"The target host uses session IDs to keep track of the users.Session IDs are used to control access to resources.The session IDs used by the target host are predictable. For example, the session IDs are generated using predictable information (e.g., time).",SKILL:There are tools to brute force session ID. Those tools require a low level of knowledge.:LEVEL:LowSKILL:Predicting Session ID may require more computation work which uses advanced analysis such as statistical analysis.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a strong source of randomness to generate a session ID.Use adequate length session IDsDo not use information available to the user in order to generate session ID (e.g., time).Ideas for creating random numbers are offered by Eastlake [RFC1750]Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format."
Reflected XSS,This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is reflected off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.,High,An application that leverages a client-side web browser with scripting enabled.An application that fail to adequately sanitize or encode untrusted input.,SKILL:Requires the ability to write malicious scripts and embed them into HTTP requests.:LEVEL:Medium,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful Reflected XSS attack can enable an adversary to exfiltrate sensitive information from the application.SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful Reflected XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful Reflected attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful Reflected attack can allow an adversary to tamper with application data.","Use browser technologies that do not allow client-side scripting.Utilize strict type, character, and encoding enforcement.Ensure that all user-supplied input is validated before use."
Stored XSS,An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently stored within the data storage of a vulnerable web application as valid input.,High,An application that leverages a client-side web browser with scripting enabled.An application that fails to adequately sanitize or encode untrusted input.An application that stores information provided by the user in data storage of some kind.,SKILL:Requires the ability to write scripts of varying complexity and to inject them through user controlled fields within the application.:LEVEL:Medium,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful Stored XSS attack can enable an adversary to exfiltrate sensitive information from the application.SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful Stored XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful Stored XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful Stored XSS attack can allow an adversary to tamper with application data.","Use browser technologies that do not allow client-side scripting.Utilize strict type, character, and encoding enforcement.Ensure that all user-supplied input is validated before being stored."
Session Hijacking,This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.,High,An application that leverages sessions to perform authentication.,SKILL:Exploiting a poorly protected identity token is a well understood attack with many helpful resources available.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful attack can enable an adversary to gain unauthorized access to an application.,"Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated."
Argument Injection,An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.,High,"Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client.","SKILL:The attacker has to identify injection vector, identify the operating system-specific commands, and optionally collect the output.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise."
Reusing Session IDs (aka Session Replay),This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.,High,The target host uses session IDs to keep track of the users.Session IDs are used to control access to resources.The session IDs used by the target host are not well protected from session theft.,"SKILL:If an attacker can steal a valid session ID, they can then try to be authenticated with that stolen session ID.:LEVEL:LowSKILL:More sophisticated attack can be used to hijack a valid session from a user and spoof a legitimate user by reusing their valid session ID.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Always invalidate a session ID after the user logout.Setup a session time out for the session IDs.Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate adversary in the middle attacks (CAPEC-94).Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.Encrypt the session data associated with the session ID.Use multifactor authentication."
Credential Stuffing,"An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.",High,"The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.",SKILL:A Credential Stuffing attack is very straightforward.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.Create a strong password policy and ensure that your system enforces this policy.Ensure users are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse local administrator account credentials across systems.Deny remote use of local admin credentials to log into domain systems.Do not allow accounts to be a local administrator on more than one system.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Monitor system and domain logs for abnormal credential access."
Wi-Fi Jamming,"In this attack scenario, the attacker actively transmits on the Wi-Fi channel to prevent users from transmitting or receiving data from the targeted Wi-Fi network. There are several known techniques to perform this attack – for example: the attacker may flood the Wi-Fi access point (e.g. the retransmission device) with deauthentication frames. Another method is to transmit high levels of noise on the RF band used by the Wi-Fi network.",Medium,Lack of anti-jam features in 802.11Lack of authentication on deauthentication/disassociation packets on 802.11-based networks,SKILL:This attack can be performed by low capability attackers with freely available tools. Commercial tools are also available that can target select networks or all WiFi networks within a range of several miles.:LEVEL:Low,"SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:A successful attack will deny the availability of the Wi-fi network to authorized users.SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:The attacker's goal is to prevent users from accessing the wireless network. Denying connectivity to the wireless network prevents the user from being able to transmit or receive any data, which also prevents VOIP calls, however this attack poses no threat to data confidentiality.","Countermeasures have been proposed for both disassociation flooding and RF jamming, however these countermeasures are not standardized and would need to be supported on both the retransmission device and the handset in order to be effective. Commercial products are not currently available that support jamming countermeasures for Wi-Fi."
Session Fixation,"The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.",Medium,Session identifiers that remain unchanged when the privilege levels change.Permissive session management mechanism that accepts random user-generated session identifiersPredictable session identifiers,SKILL:Only basic skills are required to determine and fixate session identifiers in a user's browser. Subsequent attacks may require greater skill levels depending on the attackers' motives.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult."
BitSquatting,"An adversary registers a domain name one bit different than a trusted domain. A BitSquatting attack leverages random errors in memory to direct Internet traffic to adversary-controlled destinations. BitSquatting requires no exploitation or complicated reverse engineering, and is operating system and architecture agnostic. Experimental observations show that BitSquatting popular websites could redirect non-trivial amounts of Internet traffic to a malicious entity.",Low,"An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.",SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low,"SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful BitSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.","Authenticate all servers and perform redundant checks when using DNS hostnames.When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults."
Hardware Fault Injection,"The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.",Low,Physical access to the systemThe adversary must be cognizant of where fault injection vulnerabilities exist in the system in order to leverage them for exploitation.,"SKILL:Adversaries require non-trivial technical skills to create and implement fault injection attacks. Although this style of attack has become easier (commercial equipment and training classes are available to perform these attacks), they usual require significant setup and experimentation time during which physical access to the device is required.:LEVEL:High","SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities:NOTE:An adversary capable of successfully collecting and analyzing sensitive, fault/side-channel information, has compromised the confidentiality of that application or information system data.SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:If an adversary is able to inject data via a fault or side channel vulnerability towards malicious ends, the integrity of the application or information system will be compromised.",Implement robust physical security countermeasures and monitoring.
Cross-Site Scripting (XSS),"An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.",High,"Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.","SKILL:To achieve a redirection and use of less trusted source, an attacker can simply place a script in bulletin board, blog, wiki, or other user-generated content site that are echoed back to other client machines.:LEVEL:LowSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Session tokens for specific hostImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
TypoSquatting,"An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.",Low,"An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.",SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low,"SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful TypoSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.",Authenticate all servers and perform redundant checks when using DNS hostnames.Purchase potential TypoSquatted domains and forward to legitimate domain.
SoundSquatting,"An adversary registers a domain name that sounds the same as a trusted domain, but has a different spelling. A SoundSquatting attack takes advantage of a user's confusion of the two words to direct Internet traffic to adversary-controlled destinations. SoundSquatting does not require an attack against the trusted domain or complicated reverse engineering.",Low,"An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.",SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low,"SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful SoundSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.",Authenticate all servers and perform redundant checks when using DNS hostnames.Purchase potential SoundSquatted domains and forward to legitimate domain.
Homograph Attack via Homoglyphs,"An adversary registers a domain name containing a homoglyph, leading the registered domain to appear the same as a trusted domain. A homograph attack leverages the fact that different characters among various character sets look the same to the user. Homograph attacks must generally be combined with other attacks, such as phishing attacks, in order to direct Internet traffic to the adversary-controlled destinations.",Low,"An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.",SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low,"SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful Homograph attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.",Authenticate all servers and perform redundant checks when using DNS hostnames.Utilize browsers that can warn users if URLs contain characters from different character sets.
Probe Audio and Video Peripherals,"The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system.",Low,Knowledge of the target device's or application’s vulnerabilities that can be capitalized on with malicious code. The adversary must be able to place the malicious code on the target device.,SKILL:To deploy a hidden process or malware on the system to automatically collect audio and video data.:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Prevent unknown code from executing on a system through the use of an allowlist policy.Patch installed applications as soon as new updates become available.
Collect Data from Clipboard,"The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",Low,"The adversary must have a means (i.e., a pre-installed tool or background process) by which to collect data from the clipboard and store it. That is, when the target copies data to the clipboard (e.g., to paste into another application), the adversary needs some means of capturing that data in a third location.",SKILL:To deploy a hidden process or malware on the system to automatically collect clipboard data.:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern."
Altered Component Firmware,"An adversary exploits systems features and/or improperly protected firmware of hardware components, such as Hard Disk Drives (HDD), with the goal of executing malicious code from within the component's Master Boot Record (MBR). Conducting this type of attack entails the adversary infecting the target with firmware altering malware, using known tools, and a payload. Once this malware is executed, the MBR is modified to include instructions to execute the payload at desired intervals and when the system is booted up. A successful attack will obtain persistence within the victim system even if the operating system is reinstalled and/or if the component is formatted or has its data erased.",Low,Advanced knowledge about the target component's firmwareAdvanced knowledge about Master Boot Records (MBR)Advanced knowledge about tools used to insert firmware altering malware.Advanced knowledge about component shipments to the target organization.,SKILL:Ability to access and reverse engineer hardware component firmware.:LEVEL:HighSKILL:Ability to intercept components in transit.:LEVEL:HighSKILL:Ability to create malicious payload to be executed from MBR.:LEVEL:MediumSKILL:Ability to leverage known malware tools to infect target system and insert firmware altering malware/payload:LEVEL:Low,SCOPE:Authentication:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data,Leverage hardware components known to not be susceptible to these types of attacks.Implement hardware RAID infrastructure.
Using Slashes and URL Encoding Combined to Bypass Validation Logic,"This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",High,The application accepts and decodes URL string request.The application performs insufficient filtering/canonicalization on the URLs.,SKILL:An attacker can try special characters in the URL and bypass the URL validation.:LEVEL:LowSKILL:The attacker may write a script to defeat the input filtering mechanism.:LEVEL:Medium,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.Refer to the RFCs to safely decode URL.Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)."
Inclusion of Code in Existing Process,"The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, function hooking, reflective code loading, and more.",Low,The targeted application fails to verify the integrity of the running process that allows an adversary to execute arbitrary code.,"SKILL:Knowledge of how to load malicious code into the memory space of a running process, as well as the ability to have the running process execute this code. For example, with DLL injection, the adversary must know how to load a DLL into the memory space of another running process, and cause this process to execute the code inside of the DLL.:LEVEL:High",SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Read Data,"Prevent unknown or malicious software from loading through using an allowlist policy.Properly restrict the location of the software being used.Leverage security kernel modules providing advanced access control and process restrictions like SELinux.Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.Monitor API calls like SetWindowsHookEx and SetWinEventHook which install hook procedures for Windows.Monitor processes and command-line arguments for unknown behavior related to code injection."
DLL Side-Loading,"An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",Low,The target must fail to verify the integrity of the DLL before using them.,SKILL:Trick the operating system in loading a malicious DLL instead of a legitimate DLL.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Bypass Protection Mechanism,Prevent unknown DLLs from loading through using an allowlist policy.Patch installed applications as soon as new updates become available.Properly restrict the location of the software being used.Use of sxstrace.exe on Windows as well as manual inspection of the manifests.Require code signing and avoid using relative paths for resources.
Identify Shared Files/Directories on System,"An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.",Medium,"The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).","SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line. The adversary, or their malware, can simply employ a set of commands that search for shared drives on the system (e.g., net view remote system or net share).:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is potentially able to identify the location of sensitive information or lateral pathways through the network.,"Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools."
Use of Captured Hashes (Pass The Hash),An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.,Medium,The system/application is connected to the Windows domain.The system/application leverages the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.The adversary possesses known Windows credential hash value pairs that exist on the target domain.,"SKILL:Once an adversary obtains a known Windows credential hash value pair, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.Monitor system and domain logs for abnormal credential access.Create a strong password policy and ensure that your system enforces this policy.Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.
Use of Captured Tickets (Pass The Ticket),"An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",Low,The adversary needs physical access to the victim system.The use of a third-party credential harvesting tool.,SKILL:Determine if Kerberos authentication is used on the server.:LEVEL:LowSKILL:The adversary uses a third-party tool to obtain the necessary tickets to execute the attack.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Gain Privileges,Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.Monitor system and domain logs for abnormal access.
Collect Data from Registries,"An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",Medium,"The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).The adversary must have capability to navigate the operating system to peruse the registry.","SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to read sensitive information about the system in the registry.,"Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern."
Collect Data from Screen Capture,"An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",Medium,"The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).","SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only to leverage the relevant command for screen capture.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to capture potentially sensitive information and processes as they appear on the screen.,"Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature."
Sniff Application Code,"An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",Low,"The attacker must have the ability to place themself in the communication path between the client and server.The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.The attacker must be able to employ a sniffer on the network without being detected.","SKILL:The attacker needs to setup a sniffer for a sufficient period of time so as to capture meaningful quantities of code. The presence of the sniffer should not be detected on the network. Also if the attacker plans to employ an adversary-in-the-middle attack (CAPEC-94), the client or server must not realize this. Finally, the attacker needs to regenerate source code from binary code if the need be.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Encrypt all communication between the client and server.Implementation: Use SSL, SSH, SCP.Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network."
Use of Known Kerberos Credentials,"An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.",Medium,"The system/application leverages Kerberos authentication.The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication for Kerberos service accounts.The system/application does not have a sound password policy that is being enforced for Kerberos service accounts.The system/application does not implement an effective password throttling mechanism for authenticating to Kerberos service accounts.The targeted network allows for network sniffing attacks to succeed.","SKILL:Once an adversary obtains a known Kerberos credential, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse Kerberos service account credentials across systems.Deny remote use of Kerberos service account credentials to log into domain systems.Do not allow Kerberos service accounts to be a local administrator on more than one system.Enable at least AES Kerberos encryption for tickets.Monitor system and domain logs for abnormal credential access."
Use of Known Operating System Credentials,"An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.",High,"The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.","SKILL:Once an adversary obtains a known credential, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the network.Create a strong password policy and ensure that your system enforces this policy.Ensure users are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse local administrator account credentials across systems.Deny remote use of local admin credentials to log into domain systems.Do not allow accounts to be a local administrator on more than one system.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Monitor system and domain logs for abnormal credential access."
Credential Prompt Impersonation,"An adversary, through a previously installed malicious application, impersonates a credential prompt in an attempt to steal a user's credentials.",Medium,The adversary must already have access to the target system via some means.A legitimate task must exist that an adversary can impersonate to glean credentials.,"SKILL:Once an adversary has gained access to the target system, impersonating a credential prompt is not difficult.:LEVEL:Low",SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges,"The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help."
Voice Phishing,"An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a cold call or by the victim if calling an illegitimate telephone number.",High,"An adversary needs phone numbers to initiate contact with the victim, in addition to a legitimate-looking telephone number to call the victim from.An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.If passively conducting this attack via a spoofed website, replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.","SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem."
SQL Injection,"This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.",High,"SQL queries used by the application to store, retrieve or modify data.User-controllable input that is not properly validated by the application as part of SQL queries.","SKILL:It is fairly simple for someone with basic SQL knowledge to perform SQL injection, in general. In certain instances, however, specific knowledge of the database employed may be required.:LEVEL:Low",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
Root/Jailbreak Detection Evasion via Hooking,"An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to hook code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.",Medium,The targeted application must be non-restricted to allow code hooking.,SKILL:Knowledge about Root/Jailbreak detection and evasion techniques.:LEVEL:HighSKILL:Knowledge about code hooking.:LEVEL:Medium,"SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through Root/Jailbreak Detection Evasion via Hooking, the adversary compromises the integrity of the application.SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:NOTE:An adversary may leverage Root/Jailbreak Detection Evasion via Hooking in order to obtain sensitive information.","Ensure mobile applications are signed appropriately to avoid code inclusion via hooking.Inspect the application's memory for suspicious artifacts, such as shared objects/JARs or dylibs, after other Root/Jailbreak detection methods.Inspect the application's stack trace for suspicious method calls.Allow legitimate native methods, and check for non-allowed native methods during Root/Jailbreak detection methods.For iOS applications, ensure application methods do not originate from outside of Apple's SDK."
Root/Jailbreak Detection Evasion via Debugging,"An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",Medium,A debugger must be able to be inserted into the targeted application.,SKILL:Knowledge about Root/Jailbreak detection and evasion techniques.:LEVEL:HighSKILL:Knowledge about runtime debugging.:LEVEL:Medium,"SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through Root/Jailbreak Detection Evasion via Debugging, the adversary compromises the integrity of the application.SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:NOTE:An adversary may leverage Root/Jailbreak Detection Evasion via Debugging in order to obtain sensitive information.",Instantiate checks within the application code that ensures debuggers are not attached.
Adversary in the Browser (AiTB),"An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints.",High,"The adversary must install or convince a user to install a Trojan.There are two components communicating with each other.An attacker is able to identify the nature and mechanism of communication between the two target components.Strong mutual authentication is not used between the two target components yielding opportunity for adversarial interposition.For browser pivoting, the SeDebugPrivilege and a high-integrity process must both exist to execute this attack.","SKILL:Tricking the victim into installing the Trojan is often the most difficult aspect of this attack. Afterwards, the remainder of this attack is fairly trivial.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Ensure software and applications are only downloaded from legitimate and reputable sources, in addition to conducting integrity checks on the downloaded component.Leverage anti-malware tools, which can detect Trojan Horse malware.Use strong, out-of-band mutual authentication to always fully authenticate both ends of any communications channel.Limit user permissions to prevent browser pivoting.Ensure browser sessions are regularly terminated and when their effective lifetime ends."
Exploitation of Transient Instruction Execution,"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.",Low,The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU.,"SKILL:Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations.:LEVEL:HighSKILL:Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,Implementation: DAWG (Dynamically Allocated Way Guard) - processor cache properly divided between different programs/processes that don't share resourcesImplementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tablesConfiguration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order executionConfiguration: Disable SharedArrayBuffer for Web BrowsersConfiguration: Disable Copy-on-Write between Cloud VMsConfiguration: Privilege Checks on Cache Flush InstructionsImplementation: Non-inclusive Cache Memories to prevent Flush+Reload Attacks
Server Side Request Forgery,"An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server’s internal network, or to external third parties. If successful, the adversary’s request will be made with the server’s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server’s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.",High,Server must be running a web application that processes HTTP requests.,"SKILL:The adversary will have to detect the vulnerability through an intermediary service or specify maliciously crafted URLs and analyze the server response.:LEVEL:MediumSKILL:The adversary will be required to access internal resources, extract information, or leverage the services running on the server to perform unauthorized actions such as traversing the local network or routing a reflected TCP DDoS through them.:LEVEL:High",SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption,"Handling incoming requests securely is the first line of action to mitigate this vulnerability. This can be done through URL validation.Further down the process flow, examining the response and verifying that it is as expected before sending would be another way to secure the server.Allowlist the DNS name or IP address of every service the web application is required to access is another effective security measure. This ensures the server cannot make external requests to arbitrary services.Requiring authentication for local services adds another layer of security between the adversary and internal services running on the server. By enforcing local authentication, an adversary will not gain access to all internal services only with access to the server.Enforce the usage of relevant URL schemas. By limiting requests be made only through HTTP or HTTPS, for example, attacks made through insecure schemas such as file://, ftp://, etc. can be prevented."
Exploitation of Thunderbolt Protection Flaws,"An adversary leverages a firmware weakness within the Thunderbolt protocol, on a computing device to manipulate Thunderbolt controller firmware in order to exploit vulnerabilities in the implementation of authorization and verification schemes within Thunderbolt protection mechanisms. Upon gaining physical access to a target device, the adversary conducts high-level firmware manipulation of the victim Thunderbolt controller SPI (Serial Peripheral Interface) flash, through the use of a SPI Programing device and an external Thunderbolt device, typically as the target device is booting up. If successful, this allows the adversary to modify memory, subvert authentication mechanisms, spoof identities and content, and extract data and memory from the target device. Currently 7 major vulnerabilities exist within Thunderbolt protocol with 9 attack vectors as noted in the Execution Flow.",Low,"The adversary needs at least a few minutes of physical access to a system with an open Thunderbolt port, version 3 or lower, and an external thunderbolt device controlled by the adversary with maliciously crafted software and firmware, via an SPI Programming device, to exploit weaknesses in security protections.","SKILL:Detailed knowledge on various system motherboards, PCI Express Domain, SPI, and Thunderbolt Protocol in order to interface with internal system components via external devices.:LEVEL:HighSKILL:Detailed knowledge on OS/Kernel memory address space, Direct Memory Access (DMA) mapping, Input-Output Memory Management Units (IOMMUs), and vendor memory protections for data leakage.:LEVEL:HighSKILL:Detailed knowledge on scripting and SPI programming in order to configure and modify Thunderbolt controller firmware and software configurations.:LEVEL:High",SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,Implementation: Kernel Direct Memory Access ProtectionConfiguration: Enable UEFI option USB Passthrough mode - Thunderbolt 3 system port operates as USB 3.1 Type C interfaceConfiguration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interfaceConfiguration: Enable UEFI option Mixed USB/DisplayPort mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface with support for DP modeConfiguration: Set Security Level to SL3 for Thunderbolt 2 system portConfiguration: Disable PCIe tunneling to set Security Level to SL3Configuration: Disable Boot Camp upon MacOS systems
BlueSmacking,An adversary uses Bluetooth flooding to transfer large packets to Bluetooth enabled devices over the L2CAP protocol with the goal of creating a DoS. This attack must be carried out within close proximity to a Bluetooth enabled device.,Medium,The system/application has Bluetooth enabled.,"SKILL:An adversary only needs a Linux machine along with a Bluetooth adapter, which is extremely common.:LEVEL:Low",SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption,"Disable Bluetooth when not being used.When using Bluetooth, set it to hidden or non-discoverable mode."
Bluetooth Impersonation AttackS (BIAS),An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.,Medium,Knowledge of a target device's list of trusted connections.,SKILL:Adversaries must be capable of using command line Linux tools.:LEVEL:LowSKILL:Adversaries must be in close proximity to Bluetooth devices.:LEVEL:Low,"SCOPE:Integrity:NOTE:An adversary will be impersonating another Bluetooth device, and may gain access to information pertaining to that user along with the ability to manipulate other information.SCOPE:Confidentiality:NOTE:An adversary will have unauthorized access to information.",Disable Bluetooth in public places.Verify incoming Bluetooth connections; do not automatically trust.Change default PIN passwords and always use one when connecting.
Key Negotiation of Bluetooth Attack (KNOB),"An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",Low,Person in the Middle network setup.,SKILL:Ability to modify packets.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.
Alteration of a Software Update,"An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",Medium,An adversary would need to have penetrated an organization’s software update infrastructure including gaining access to components supporting the configuration management of software versions and updates related to the software maintenance of customer systems.,"SKILL:Skills required include the ability to infiltrate the organization’s software update infrastructure either from the Internet or from within the organization, including subcontractors, and be able to change software being delivered to customer/user systems in an undetected manner.:LEVEL:High",SCOPE:Access Control:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.Require elevated privileges for distribution of software and software updates."
Software Development Tools Maliciously Altered,"An adversary with the ability to alter tools used in a development environment causes software to be developed with maliciously modified tools. Such tools include requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools. The adversary then carries out malicious acts once the software is deployed including malware infection of other systems to support further compromises.",Low,"An adversary would need to have access to a targeted developer’s development environment and in particular to tools used to design, create, test and manage software, where the adversary could ensure malicious code is included in software packages built through alteration or substitution of tools in the environment used in the development of software.","SKILL:Ability to leverage common delivery mechanisms (e.g., email attachments, removable media) to infiltrate a development environment to gain access to software development tools for the purpose of malware insertion into an existing tool or replacement of an existing tool with a maliciously altered copy.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Access Control:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Read Data,"Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.Avoid giving elevated privileges to developers."
Requirements for ASIC Functionality Maliciously Altered,"An adversary with access to functional requirements for an application specific integrated circuit (ASIC), a chip designed/customized for a singular particular use, maliciously alters requirements derived from originating capability needs. In the chip manufacturing process, requirements drive the chip design which, when the chip is fully manufactured, could result in an ASIC which may not meet the user’s needs, contain malicious functionality, or exhibit other anomalous behaviors thereby affecting the intended use of the ASIC.",Low,"An adversary would need to have access to a foundry’s or chip maker’s requirements management system that stores customer requirements for ASICs, requirements upon which the design of the ASIC is based.",SKILL:An adversary would need experience in designing chips based on functional requirements in order to manipulate requirements in such a way that deviations would not be detected in subsequent stages of ASIC manufacture and where intended malicious functionality would be available to the adversary once integrated into a system and fielded.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for hardware requirements and design.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Malicious Code Implanted During Chip Programming,"During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",Low,"An adversary would need to have access to a foundry’s or chip maker’s development/production environment where programs for specific chips are developed, managed and uploaded into targeted chips prior to distribution or sale.","SKILL:An adversary needs to be skilled in microprogramming, manipulation of configuration management systems, and in the operation of tools used for the uploading of programs into chips during manufacture. Uploading can be for individual chips or performed on a large scale basis.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Developer Signing Maliciously Altered Software,"Software produced by a reputable developer is clandestinely infected with malicious code and then digitally signed by the unsuspecting developer, where the software has been altered via a compromised software development or build process prior to being signed. The receiver or user of the software has no reason to believe that it is anything but legitimate and proceeds to deploy it to organizational systems. This attack differs from CAPEC-206, since the developer is inadvertently signing malicious code they believe to be legitimate and which they are unware of any malicious modifications.",Medium,"An adversary would need to have access to a targeted developer’s software development environment, including to their software build processes, where the adversary could ensure code maliciously tainted prior to a build process is included in software packages built.","SKILL:The adversary must have the skills to infiltrate a developer’s software development/build environment and to implant malicious code in developmental software code, a build server, or a software repository containing dependency code, which would be referenced to be included during the software build process.:LEVEL:High",SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Execute Unauthorized Commands,"Have a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools.Employ intrusion detection and malware detection capabilities on IDE systems where feasible."
Design for FPGA Maliciously Altered,"An adversary alters the functionality of a field-programmable gate array (FPGA) by causing an FPGA configuration memory chip reload in order to introduce a malicious function that could result in the FPGA performing or enabling malicious functions on a host system. Prior to the memory chip reload, the adversary alters the program for the FPGA by adding a function to impact system operation.",Low,An adversary would need to have access to FPGA programming/configuration-related systems in a chip maker’s development environment where FPGAs can be initially configured prior to delivery to a customer or have access to such systems in a customer facility where end-user FPGA configuration/reconfiguration can be performed.,"SKILL:An adversary would need to be skilled in FPGA programming in order to create/manipulate configurations in such a way that when loaded into an FPGA, the end user would be able to observe through testing all user-defined required functions but would be unaware of any additional functions the adversary may have introduced.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Retrieve Data from Decommissioned Devices,"An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",Medium,"An adversary needs to have access to electronic data processing equipment being recycled or disposed of (e.g., laptops, servers) at a collection location and the ability to take control of it for the purpose of exploiting its content.","SKILL:An adversary may need the ability to mount printed circuit boards and target individual chips for exploitation.:LEVEL:HighSKILL:An adversary needs the technical skills required to extract solid state drives, hard disk drives, and other storage media to host on a compatible system or harness to gain access to digital content.:LEVEL:Medium",SCOPE:Accountability:TECHNICAL IMPACT:Bypass Protection Mechanism,"Backup device data before erasure to retain intellectual property and inside knowledge.Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.Use a secure erase software.Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.Physically destroy memory and SIM cards for mobile devices not intended to be reused.Ensure that the user account has been terminated or switched to a new device before destroying."
NoSQL Injection,"An adversary targets software that constructs NoSQL statements based on user input or with parameters vulnerable to operator replacement in order to achieve a variety of technical impacts such as escalating privileges, bypassing authentication, and/or executing code.",High,"Awareness of the technology stack being leveraged by the target application.NoSQL queries used by the application to store, retrieve, or modify data.User-controllable input that is not properly validated by the application as part of NoSQL queries.Target potentially susceptible to operator replacement attacks.","SKILL:For keyword and JavaScript injection attacks, it is fairly simple for someone with basic NoSQL knowledge to perform NoSQL injection, once the target's technology stack has been determined.:LEVEL:LowSKILL:For operator replacement attacks, the adversary must also have knowledge of HTTP Parameter Pollution attacks and how to conduct them.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as relevant NoSQL and JavaScript content. NoSQL-specific keywords, such as $ne, $eq or $gt for MongoDB, must be filtered in addition to characters such as a single-quote(') or semicolons (;) based on the context in which they appear. Validation should also extend to expected types.If possible, leverage safe APIs (e.g., PyMongo and Flask-PyMongo for Python and MongoDB) for queries as opposed to building queries from strings.Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.Use of custom error pages - Adversaries can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.Exercise the principle of Least Privilege with regards to application accounts to minimize damage if a NoSQL injection attack is successful.If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as mongo-sanitize.If using PHP with MongoDB, ensure all special query operators (starting with $) use single quotes to prevent operator replacement attacks.Additional mitigations will depend on the NoSQL database, API, and programming language leveraged by the application."
Exploitation of Improperly Configured or Implemented Memory Protections,An adversary takes advantage of missing or incorrectly configured access control within memory to read/write data or inject malicious code into said memory.,Medium,Access to the hardware being leveraged.,SKILL:Ability to craft malicious code to inject into the memory region.:LEVEL:MediumSKILL:Intricate knowledge of memory structures.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Ensure that protected and unprotected memory ranges are isolated and do not overlap.If memory regions must overlap, leverage memory priority schemes if memory regions can overlap.Ensure that original and mirrored memory regions apply the same protections.Ensure immutable code or data is programmed into ROM or write-once memory."
Subvert Code-signing Facilities,Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.,Low,"A framework-based language that supports code signing (such as, and most commonly, Java or .NET)Deployed code that has been signed by its authoring vendor, or a partner.The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated.","SKILL:Subverting code signing is not a trivial activity. Most code signing and verification schemes are based on use of cryptography and the attacker needs to have an understanding of these cryptographic operations in good detail. Additionally the attacker also needs to be aware of the way memory is assigned and accessed by the container since, often, the only way to subvert code signing would be to patch the code in memory. Finally, a knowledge of the platform specific mechanisms of signing and verifying code is a must.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable."
Exploitation of Improperly Controlled Registers,An adversary exploits missing or incorrectly configured access control within registers to read/write data that is not meant to be obtained or modified by a user.,Medium,Awareness of the hardware being leveraged.Access to the hardware being leveraged.,SKILL:Intricate knowledge of registers.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.Ensure security lock bit protections are reviewed for design inconsistencies and common weaknesses.Test security lock programming flow in both pre-silicon and post-silicon environments.Leverage automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.Ensure that measurement data is stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent.
Exploitation of Improperly Controlled Hardware Security Identifiers,"An adversary takes advantage of missing or incorrectly configured security identifiers (e.g., tokens), which are used for access control within a System-on-Chip (SoC), to read/write data or execute a given action.",Medium,Awareness of the hardware being leveraged.Access to the hardware being leveraged.,SKILL:Ability to execute actions within the SoC.:LEVEL:MediumSKILL:Intricate knowledge of the identifiers being utilized.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Review generation of security identifiers for design inconsistencies and common weaknesses.Review security identifier decoders for design inconsistencies and common weaknesses.Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments."
Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities,"An adversary may exploit vulnerable code (i.e., firmware or ROM) that is unpatchable. Unpatchable devices exist due to manufacturers intentionally or inadvertently designing devices incapable of updating their software. Additionally, with updatable devices, the manufacturer may decide not to support the device and stop making updates to their software.",Medium,"Awareness of the hardware being leveraged.Access to the hardware being leveraged, either physically or remotely.",SKILL:Knowledge of various wireless protocols to enable remote access to vulnerable devices:LEVEL:MediumSKILL:Ability to identify physical entry points such as debug interfaces if the device is not being accessed remotely:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means
Target Programs with Elevated Privileges,This attack targets programs running with elevated privileges. The adversary tries to leverage a vulnerability in the running program and get arbitrary code to execute with elevated privileges.,High,"The targeted program runs with elevated OS privileges.The targeted program accepts input data from the user or from another program.The targeted program is giving away information about itself. Before performing such attack, an eventual attacker may need to gather information about the services running on the host target. The more the host target is verbose about the services that are running (version number of application, etc.) the more information can be gather by an attacker.This attack often requires communicating with the host target services directly. For instance Telnet may be enough to communicate with the host target.","SKILL:An attacker can use a tool to scan and automatically launch an attack against known issues. A tool can also repeat a sequence of instructions and try to brute force the service on the host target, an example of that would be the flooding technique.:LEVEL:LowSKILL:More advanced attack may require knowledge of the protocol spoken by the host service.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Apply the principle of least privilege.Validate all untrusted data.Apply the latest patches.Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them.Avoid revealing information about your system (e.g., version of the program) to anonymous users.Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs.If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage.Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.Monitor traffic and resource usage and pay attention if resource exhaustion occurs.Protect your log file from unauthorized modification and log forging."
Metadata Spoofing,"An adversary alters the metadata of a resource (e.g., file, directory, repository, etc.) to present a malicious resource as legitimate/credible.",Medium,Identification of a resource whose metadata is to be spoofed,SKILL:Ability to spoof a variety of metadata to convince victims the source is trusted:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,"Validate metadata of resources such as authors, timestamps, and statistics.Confirm the pedigree of open source packages and ensure the code being downloaded does not originate from another source.Even if the metadata is properly checked and a user believes it to be legitimate, there may still be a chance that they've been duped. Therefore, leverage automated testing techniques to determine where malicious areas of the code may exist."
Spoof Open-Source Software Metadata,"An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.",Medium,Identification of a popular open-source component whose metadata is to be spoofed.,SKILL:Ability to spoof a variety of software metadata to convince victims the source is trusted.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Within package managers, look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source software from reputable hosting sites or package managers.Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.After downloading open-source software, ensure integrity values have not changed.Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
Spoof Version Control System Commit Metadata,"An adversary spoofs metadata pertaining to a Version Control System (VCS) (e.g., Git) repository's commits to deceive users into believing that the maliciously provided software is frequently maintained and originates from a trusted source.",Medium,Identification of a popular open-source repository whose metadata is to be spoofed.,SKILL:Ability to spoof a variety of repository metadata to convince victims the source is trusted.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source software from reputable hosting sites or package managers.Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.After downloading open-source software, ensure integrity values have not changed.Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
StarJacking,An adversary spoofs software popularity metadata to deceive users into believing that a maliciously provided package is widely used and originates from a trusted source.,Medium,Identification of a popular open-source package whose popularity metadata is to be used for the malicious package.,SKILL:Ability to provide a package to a package manager and associate a popular package's source code repository URL.:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source packages, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source packages from reputable package managers.After downloading open-source packages, ensure integrity values have not changed.Before executing or incorporating the package, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
System Location Discovery,"An adversary collects information about the target system in an attempt to identify the system's geographical location. Information gathered could include keyboard layout, system language, and timezone. This information may benefit an adversary in confirming the desired target and/or tailoring further attacks.",High,The adversary must have some level of access to the system and have a basic understanding of the operating system in order to query the appropriate sources for relevant information.,SKILL:The adversary must know how to query various system sources of information respective of the system's operating system to obtain the relevant information.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation."
Repo Jacking,An adversary takes advantage of the redirect property of directly linked Version Control System (VCS) repositories to trick users into incorporating malicious code into their applications.,Medium,Identification of a popular repository that may be directly referenced in numerous software applicationsA repository owner/maintainer who has recently changed their username or deleted their account,SKILL:Ability to create an account on a VCS hosting site and recreate an existing directory structure.:LEVEL:LowSKILL:Ability to create malware that can exploit various software applications.:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Leverage dedicated package managers instead of directly linking to VCS repositories.Utilize version pinning and lock files to prevent use of maliciously modified repositories.Implement vendoring (i.e., including third-party dependencies locally) and leverage automated testing techniques (e.g., static analysis) to determine if the software behaves maliciously.Leverage automated tools, such as Checkmarx's ChainJacking tool, to determine susceptibility to Repo Jacking attacks."
Load Value Injection,"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",Low,The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU.The CPU incorrectly transiently forwards values from microarchitectural buffers after faulting or assisted loadsThe adversary needs the ability to induce page faults or microcode assists on the target system.Code gadgets exist that allow the adversary to hijack transient execution and encode secrets into the microarchitectural state.,"SKILL:Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations.:LEVEL:HighSKILL:Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage.:LEVEL:HighSKILL:The ability to provoke faulting or assisted loads in legitimate execution.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,"Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.Insert explicit “lfence” speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded."
DHCP Spoofing,"An adversary masquerades as a legitimate Dynamic Host Configuration Protocol (DHCP) server by spoofing DHCP traffic, with the goal of redirecting network traffic or denying service to DHCP.",Low,The adversary must have access to a machine within the target LAN which can send DHCP offers to the target.,SKILL:The adversary must identify potential targets for DHCP Spoofing and craft network configurations to obtain the desired results.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read DataSCOPE:Integrity:SCOPE:Access Control:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption,Design: MAC-Forced ForwardingImplementation: Port Security and DHCP snoopingImplementation: Network-based Intrusion Detection Systems
Install Malicious Extension,"An adversary directly installs or tricks a user into installing a malicious extension into existing trusted software, with the goal of achieving a variety of negative technical impacts.",Medium,"The adversary must craft malware based on the type of software and system(s) they intend to exploit.If the adversary intends to install the malicious extension themself, they must first compromise the target machine via some other means.",SKILL:Ability to create malicious extensions that can exploit specific software applications and systems.:LEVEL:MediumSKILL:Optional: Ability to exploit target system(s) via other means in order to gain entry.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read DataSCOPE:Integrity:SCOPE:Access Control:TECHNICAL IMPACT:Modify DataSCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Only install extensions/plugins from official/verifiable sources.Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.Implement an extension/plugin allow list, based on the given security policy.If applicable, confirm extensions/plugins are properly signed by the official developers.For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background."
Eavesdropping on a Monitor,"An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security tools",Medium,Victim should use an external monitor devicePhysical access to the target location and devices,"SKILL:Knowledge of how to use the SDR and related software: With this knowledge, the adversary will find the correct frequency where the signal is being leaked:LEVEL:MediumSKILL:Understanding of computing hardware, to identify the video cable and video ports:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).Implement: Use wireless technologies to connect to external display devices."
Blind SQL Injection,"Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",High,"SQL queries used by the application to store, retrieve or modify data.User-controllable input that is not properly validated by the application as part of SQL queries.","SKILL:Determining the database type and version, as well as the right number and type of parameters to the query being injected in the absence of error messages requires greater skill than reverse-engineering database error messages.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear."
Try Common or Default Usernames and Passwords,"An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. secret or password) that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.",Medium,The system uses one factor password based authentication.The adversary has the means to interact with the system.,"SKILL:An adversary just needs to gain access to common default usernames/passwords specific to the technologies used by the system. Additionally, a brute force attack leveraging common passwords can be easily realized if the user name is known.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Delete all default account credentials that may be put in by the product vendor.Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
Network Boundary Bridging,"An adversary which has gained elevated access to network boundary devices may use these devices to create a channel to bridge trusted and untrusted networks. Boundary devices do not necessarily have to be on the network’s edge, but rather must serve to segment portions of the target network the adversary wishes to cross into.",Medium,The adversary must have control of a network boundary device.,SKILL:The adversary must understand how to manage the target network device to create or edit policies which will bridge networks.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Hide Activities,"Design: Ensure network devices are storing credentials in encrypted storesDesign: Follow the principle of least privilege and restrict administrative duties to as few accounts as possible. Ensure these privileged accounts are secured with strong credentials which do not overlap with other network devices.Configuration: When possible, configure network boundary devices to use MFA.Configuration: Change the default configuration for network devices to harden their security profiles. Default configurations are often enabled with insecure features to allow ease of installation and management. However, these configurations can be easily discovered and exploited by adversaries.Implementation: Perform integrity checks on audit logs for network device management and review them to identify abnormalities in configurations.Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering."
Browser in the Middle (BiTM),"An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.",Medium,"The adversary must create a convincing web client to establish the connection. The victim then needs to be lured onto the adversary's webpage. In addition, the victim's machine must not use local authentication APIs, a hardware token, or a Trusted Platform Module (TPM) to authenticate.",SKILLLEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges:LIKELIHOOD:HighSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data:LIKELIHOOD:HighSCOPE:Integrity:TECHNICAL IMPACT:Modify Data:LIKELIHOOD:Medium,"Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel"
Exploiting Incorrect Chaining or Granularity of Hardware Debug Components,An adversary exploits incorrect chaining or granularity of hardware debug components in order to gain unauthorized access to debug functionality on a chip. This happens when authorization is not checked on a per function basis and is assumed for a chain or group of debug functionality.,Low,Hardware device has an exposed debug interface,SKILL:Ability to identify physical debug interfaces on a device:LEVEL:MediumSKILL:Ability to operate devices to scan and connect to an exposed debug interface:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Implement: Ensure that debug components are properly chained, and their granularity is maintained at different authorization levelsPerform Post-silicon validation tests at various authorization levels to ensure that debug components are only accessible to authorized users"
Using Unicode Encoding to Bypass Validation Logic,An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.,Medium,Filtering is performed on data that has not be properly canonicalized.,SKILL:An attacker needs to understand Unicode encodings and have an idea (or be able to find out) what system components may not be Unicode aware.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.Ensure that filtering or input validation is applied to canonical data.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.
URL Encoding,This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.,High,The application should accepts and decodes URL input.The application performs insufficient filtering/canonicalization on the URLs.,SKILL:An adversary can try special characters in the URL and bypass the URL validation.:LEVEL:LowSKILL:The adversary may write a script to defeat the input filtering mechanism.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Refer to the RFCs to safely decode URL.Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible."
User-Controlled Filename,"An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",High,The victim must trust the name and locale of user controlled filenames.,"SKILL:To achieve a redirection and use of less trusted source, an attacker can simply edit data that the host uses to build the filename:LEVEL:LowSKILL:Deploying a malicious look-a-like site (such as a site masquerading as a bank or online auction site) that the user enters their authentication data into.:LEVEL:MediumSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Availability:TECHNICAL IMPACT:Alter Execution LogicSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Design: Use browser technologies that do not allow client side scripting.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Scan dynamically generated content against validation specification
Manipulating State,"The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner. State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits. If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.",Medium,"User state is maintained at least in some way in user-controllable locations, such as cookies or URL parameters.There is a faulty finite state machine in the hardware logic that can be exploited.","SKILL:The adversary needs to have knowledge of state management as employed by the target application, and also the ability to manipulate the state in a meaningful way.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.All possible states must be handled by hardware finite state machines."
Manipulating Writeable Configuration Files,"Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.",High,Configuration files must be modifiable by the attacker,"SKILL:To identify vulnerable configuration files, and understand how to manipulate servers and erase forensic evidence:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Backup copies of all configuration filesImplementation: Integrity monitoring for configuration filesImplementation: Enforce audit logging on code and configuration promotion procedures.Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD"
Manipulating Web Input to File System Calls,"An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.",High,Program must allow for user controlled variables to be applied directly to the filesystem,SKILL:To identify file system entry point and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: Enforce principle of least privilege.Design: Ensure all input is validated, and does not contain file system commandsDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."
Manipulating User-Controlled Variables,"This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",High,A variable consumed by the application server is exposed to the client.A variable consumed by the application server can be overwritten by the user.The application server trusts user supplied data to compute business logic.The application server does not perform proper input validation.,SKILL:The malicious user can easily try some well-known global variables and find one which matches.:LEVEL:LowSKILL:The adversary can use automated tools to probe for variables that they can control.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.Use encapsulation when declaring your variables. This is to lower the exposure of your variables.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program."
Using Escaped Slashes in Alternate Encoding,"This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",High,"The application accepts the backlash character as escape character.The application server does incomplete input data decoding, filtering and validation.",SKILL:The adversary can naively try backslash character and discover that the target host uses it as escape character.:LEVEL:LowSKILL:The adversary may need deep understanding of the host target in order to exploit the vulnerability. The adversary may also use automated tools to probe for this vulnerability.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Verify that the user-supplied data does not use backslash character to escape malicious characters.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.Be aware of the threat of alternative method of data encoding.Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names."
Using Slashes in Alternate Encoding,"This attack targets the encoding of the Slash characters. An adversary would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the adversary many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.",High,The application server accepts paths to locate resources.The application server does insufficient input data validation on the resource path requested by the user.The access right to resources are not set properly.,SKILL:An adversary can try variation of the slashes characters.:LEVEL:LowSKILL:An adversary can use more sophisticated tool or script to scan a website and find a path filtering problem.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)Test your path decoding process against malicious input.In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.Assume all input is malicious. Create an allowlist that defines all valid input to the application based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system."
Buffer Overflow in an API Call,"This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",High,The target host exposes an API to the user.One or more API functions exposed by the target host has a buffer overflow vulnerability.,SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Use a language or compiler that performs automatic bounds checking.Use secure functions not vulnerable to buffer overflow.If you have to use dangerous functions, make sure that you do boundary checking.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution."
Using UTF-8 Encoding to Bypass Validation Logic,"This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the shortest possible encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",High,The application's UTF-8 decoder accepts and interprets illegal UTF-8 characters or non-shortest format of UTF-8 encoding.Input filtering and validating is not done properly leaving the door open to harmful characters for the target host.,SKILL:An attacker can inject different representation of a filtered character in UTF-8 format.:LEVEL:LowSKILL:An attacker may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: 1. Insert a replacement character (e.g. '?', ''). 2. Ignore the bytes. 3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). 4. Not notice and decode as if the bytes were some similar bit of UTF-8. 5. Stop decoding and report an error (possibly giving the caller the option to continue). It is possible for a decoder to behave in different ways for different types of invalid input. RFC 3629 only requires that UTF-8 decoders must not decode overlong sequences (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to ...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence. Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input."
Web Server Logs Tampering,"Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to Log Injection-Tampering-Forging except that in this case, the attack is targeting the logs of the web server and not the application.",Medium,Target server software must be a HTTP server that performs web logging.,SKILL:To input faked entries into Web logs:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: Use input validation before writing to web logDesign: Validate all log data before it is output
XPath Injection,"An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",High,XPath queries used to retrieve information stored in XML documentsUser-controllable input not properly sanitized before being used as part of XPath queries,SKILL:XPath Injection shares the same basic premises with SQL Injection. An attacker must have knowledge of XPath syntax and constructs in order to successfully leverage XPath Injection:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
XQuery Injection,"This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",High,The XQL must execute unvalidated data,SKILL:Basic understanding of XQuery:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Design: Perform input allowlist validation on all XML inputImplementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.
AJAX Footprinting,"This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",High,The user must allow JavaScript to execute in their browser,SKILL:To land and launch a script on victim's machine with appropriate footprinting logic for enumerating services and vulnerabilities in JavaScript:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Design: Use browser technologies that do not allow client side scripting.Implementation: Perform input validation for all remote content.
XSS Through HTTP Headers,"An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.",High,Target software must be a client that allows scripting communication from remote hosts.,"SKILL:To achieve a redirection and use of less trusted source, an adversary can simply edit HTTP Headers that are sent to client machine.:LEVEL:LowSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Session tokens for specific hostImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
Forceful Browsing,"An attacker employs forceful browsing (direct URL entry) to access portions of a website that are otherwise unreachable. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.",High,The forcibly browseable pages or accessible resources must be discoverable and improperly protected.,SKILL:Forcibly browseable pages can be discovered by using a number of automated tools. Doing the same manually is tedious but by no means difficult.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context."
OS Command Injection,"In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",High,User controllable input used as part of commands to the underlying operating system.,"SKILL:The attacker needs to have knowledge of not only the application to exploit but also the exact nature of commands that pertain to the target operating system. This may involve, though not always, knowledge of specific assembly commands for the platform.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commandsAll application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them."
Pharming,"A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",High,Vulnerable DNS software or improperly protected hosts file or router that can be poisonedA website that handles sensitive information but does not use a secure connection and a certificate that is valid is also prone to pharming,"SKILL:The attacker needs to be able to poison the resolver - DNS entries or local hosts file or router entry pointing to a trusted DNS server - in order to successfully carry out a pharming attack. Setting up a fake website, identical to the targeted one, does not require special skills.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"All sensitive information must be handled over a secure connection.Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority."
Buffer Overflow in Local Command-Line Utilities,This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.,High,The target host exposes a command-line utility to the user.The command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited.,SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.Use a language or compiler that performs automatic bounds checking.Use an abstraction library to abstract away risky APIs. Not a complete solution.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Operational: Use OS-level preventative functionality. Not a complete solution.Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.Do not unnecessarily expose services."
Reflection Attack in Authentication Protocol,"An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",High,"The attacker must have direct access to the target server in order to successfully mount a reflection attack. An intermediate entity, such as a router or proxy, that handles these exchanges on behalf of the attacker inhibits the attackers' ability to attack the authentication protocol.",SKILL:The attacker needs to have knowledge of observing the protocol exchange and managing the required connections in order to issue and respond to challenges:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any furtherThe use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol"
Forced Integer Overflow,"This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",High,"The attacker can manipulate the value of an integer variable utilized by the target host.The target host does not do proper range checking on the variable before utilizing it.When the integer variable is incremented or decremented to an out of range value, it gets a very different value (e.g. very small or negative number)",SKILL:An attacker can simply overflow an integer by inserting an out of range value.:LEVEL:LowSKILL:Exploiting a buffer overflow by injecting malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,Use a language or compiler that performs automatic bounds checking.Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.Use an abstraction library to abstract away risky APIs. Not a complete solution.Always do bound checking before consuming user input data.
Log Injection-Tampering-Forging,"This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing them to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.",High,The target host is logging the action and data of the user.The target host insufficiently protects access to the logs or logging mechanisms.,SKILL:This attack can be as simple as adding extra characters to the logged data (e.g. username). Adding entries is typically easier than removing entries.:LEVEL:LowSKILL:A more sophisticated attack can try to defeat the input validation mechanism.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Carefully control access to physical log files.Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.Use synchronization to control the flow of execution.Use static analysis tools to identify log forging vulnerabilities.Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells."
Adversary in the Middle (AiTM),"An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.",High,There are two components communicating with each other.An attacker is able to identify the nature and mechanism of communication between the two target components.An attacker can eavesdrop on the communication between the target components.Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption.,SKILL:This attack can get sophisticated since the attack may use cryptography.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Ensure Public Keys are signed by a Certificate AuthorityEncrypt communications using cryptography (e.g., SSL/TLS)Use Strong mutual authentication to always fully authenticate both ends of any communications channel.Exchange public keys using a secure channel"
WSDL Scanning,"This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.",High,A client program connecting to a web service can read the WSDL to determine what functions are available on the server.The target host exposes vulnerable functions within its WSDL interface.,"SKILL:This attack can be as simple as reading WSDL and starting sending invalid request.:LEVEL:LowSKILL:This attack can be used to perform more sophisticated attacks (SQL injection, etc.):LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,It is important to protect WSDL file or provide limited access to it.Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.Validate the received messages against the WSDL Schema. Incomplete solution.
Block Access to Libraries,"An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. It is possible that the application does not handle situations properly where access to these libraries has been blocked. Depending on the error handling within the application, blocked access to libraries may leave the system in an insecure state that could be leveraged by an attacker.",Medium,An application requires access to external libraries.An attacker has the privileges to block application access to external libraries.,"SKILL:Knowledge of how to block access to libraries, as well as knowledge of how to leverage the resulting state of the application based on the failed call.:LEVEL:Low",SCOPE:Availability:TECHNICAL IMPACT:Alter Execution LogicSCOPE:Confidentiality:TECHNICAL IMPACT:OtherSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Ensure that application handles situations where access to APIs in external libraries is not available securely. If the application cannot continue its execution safely it should fail in a consistent and secure fashion.
Cryptanalysis,"Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).",Low,The target software utilizes some sort of cryptographic algorithm.An underlying weaknesses exists either in the cryptographic algorithm used or in the way that it was applied to a particular chunk of plaintext.The encryption algorithm is known to the attacker.An attacker has access to the ciphertext.,SKILL:Cryptanalysis generally requires a very significant level of understanding of mathematics and computation.:LEVEL:High,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:In most cases, if cryptanalysis is successful at all, an adversary will not be able to decrypt the entire message, but instead will only be able to deduce some information about the plaintext. However, that may be sufficient for an adversary, depending on the context of the attack.",Use proven cryptographic algorithms with recommended key sizes.Ensure that the algorithms are used properly. That means: 1. Not rolling out your own crypto; Use proven algorithms and implementations. 2. Choosing initialization vectors with sufficiently random numbers 3. Generating key material using good sources of randomness and avoiding known weak keys 4. Using proven protocols and their implementations. 5. Picking the most appropriate cryptographic algorithm for your usage context and data
Phishing,Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.,High,An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.,"SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind."
Accessing Functionality Not Properly Constrained by ACLs,"In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",High,"The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.The various resources, or individual URLs, must be somehow discoverable by the attackerThe administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.","SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic."
Buffer Overflow via Environment Variables,"This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",High,The application uses environment variables.An environment variable exposed to the user is vulnerable to a buffer overflow.The vulnerable environment variable uses untrusted data.Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.,SKILL:An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Do not expose environment variable to the user.Do not use untrusted data in your environment variables.Use a language or compiler that performs automatic bounds checkingThere are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.
Overflow Buffers,"Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.",High,Targeted software performs buffer operations.Targeted software inadequately performs bounds-checking on buffer operations.Adversary has the capability to influence the input to buffer operations.,"SKILL:In most cases, overflowing a buffer does not require advanced skills beyond the ability to notice an overflow and stuff an input variable with content.:LEVEL:LowSKILL:In cases of directed overflows, where the motive is to divert the flow of the program or application as per the adversaries' bidding, high level skills are required. This may involve detailed knowledge of the target system architecture and kernel.:LEVEL:High",SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a language or compiler that performs automatic bounds checking.Use secure functions not vulnerable to buffer overflow.If you have to use dangerous functions, make sure that you do boundary checking.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution.Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software."
Server Side Include (SSI) Injection,"An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",High,A web server that supports server side includes and has them enabledUser controllable input that can carry include directives to the web server,"SKILL:The attacker needs to be aware of SSI technology, determine the nature of injection and be able to craft input that results in the SSI directives being executed.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need themAll user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directiveServer Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead"
Session Sidejacking,"Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.",High,"An attacker and the victim are both using the same WiFi network.The victim has an active session with a target system.The victim is not using a secure channel to communicate with the target system (e.g. SSL, VPN, etc.)The victim initiated communication with a target system that requires transfer of the session token or the target application uses AJAX and thereby periodically rings home asynchronously using the session token",SKILL:Easy to use tools exist to automate this attack.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks."
Clickjacking,"An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.",Medium,"The victim is communicating with the target application via a web based UI and not a thick clientThe victim's browser security policies allow at least one of the following JavaScript, Flash, iFrames, ActiveX, or CSS.The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser)The victim has an active session with the target system.The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system",SKILL:Crafting the proper malicious site and luring the victim to this site are not trivial tasks.:LEVEL:High,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.Turn off JavaScript, Flash and disable CSS.When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks."
Cross Zone Scripting,An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security.,Medium,The target must be using a zone-aware browser.,SKILL:Ability to craft malicious scripts or find them elsewhere and ability to identify functionality that is running web controls in the local zone and to find an injection vector into that functionality:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Disable script execution.Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zoneLimit the flow of untrusted data into the privileged areas of the system that run in the higher trust zoneLimit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimumEnsure proper HTML output encoding before writing user supplied data to the page
HTTP Request Splitting,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",Medium,"An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.HTTP headers capable of being user-manipulated.HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.
Cross Site Tracing,Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to a destination system's web server.,Medium,HTTP TRACE is enabled on the web serverThe destination system is susceptible to XSS or an adversary can leverage some other weakness to bypass the same origin policyScripting is enabled in the client's browserHTTP is used as the communication protocol between the server and the client,SKILL:Understanding of the HTTP protocol and an ability to craft a malicious script:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.Patch web browser against known security origin policy bypass exploits.
Command Line Execution through SQL Injection,"An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.",Low,The application does not properly validate data before storing in the databaseBackend application implicitly trusts the data stored in the databaseMalicious data is used on the backend as a command line argument,"SKILL:The attacker most likely has to be familiar with the internal functionality of the system to launch this attack. Without that knowledge, there are not many feedback mechanisms to give an attacker the indication of how to perform command injection or whether the attack is succeeding.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Disable MSSQL xp_cmdshell directive on the databaseProperly validate the data (syntactically and semantically) before writing it to the database.Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).
Object Relational Mapping Injection,"An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.",Low,"An application uses data access layer generated by an ORM tool or frameworkAn application uses user supplied data in queries executed against the databaseThe separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework",SKILL:Knowledge of general SQL injection techniques and subtleties of the ORM framework is needed:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the frameworkEnsure to keep up to date with security relevant updates to the persistence framework used within your application.
Cause Web Server Misclassification,"An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.",Medium,Web server software must rely on file name or file extension for processing.The attacker must be able to make HTTP requests to the web server.,"SKILL:To modify file name or file extension:LEVEL:LowSKILL:To use misclassification to force the Web server to disclose configuration information, source, or binary data:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Implementation: Server routines should be determined by content not determined by filename or file extension.
SQL Injection through SOAP Parameter Tampering,"An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.",High,SOAP messages are used as a communication mechanism in the systemSOAP parameters are not properly validated at the service providerThe service provider does not properly utilize parameter binding when building SQL queries,SKILL:If the attacker is able to gain good understanding of the system's database schema:LEVEL:MediumSKILL:If the attacker has to perform Blind SQL Injection:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Properly validate and sanitize/reject user input at the service provider.Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly."
JSON Hijacking (aka JavaScript Hijacking),An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.,High,JSON is used as a transport mechanism between the client and the serverThe target server cannot differentiate real requests from forged requestsThe JSON object returned from the server can be accessed by the attackers' malicious code via a script tag,"SKILL:Once this attack pattern is developed and understood, creating an exploit is not very complex.The attacker needs to have knowledge of the URLs that need to be accessed on the target system to request the JSON objects.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario."
Choosing Message Identifier,"This pattern of attack is defined by the selection of messages distributed via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.",High,"Information and client-sensitive (and client-specific) data must be present through a distribution channel available to all users.Distribution means must code (through channel, message identifiers, or convention) message destination in a manner visible within the distribution means itself (such as a control channel) or in the messages themselves.",SKILL:All the adversary needs to discover is the format of the messages on the channel/distribution means and the particular identifier used within the messages.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Associate some ACL (in the form of a token) with an authenticated user which they provide middleware. The middleware uses this token as part of its channel/message selection for that client, or part of a discerning authorization decision for privileged channels/messages. The purpose is to architect the system in a way that associates proper authentication/authorization with each channel/message.Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them."
Exploit Non-Production Interfaces,"An adversary exploits a sample, demonstration, test, or debug interface that is unintentionally enabled on a production system, with the goal of gleaning information or leveraging functionality that would otherwise be unavailable.",Low,The target must have configured non-production interfaces and failed to secure or remove them when brought into a production environment.,SKILL:Exploiting non-production interfaces requires significant skill and knowledge about the potential non-production interfaces left enabled in production.:LEVEL:High,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Access Control:SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Alter Execution Logic,Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.
Privilege Abuse,An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.,High,"The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources.",SKILL:Adversary can leverage privileged features they already have access to without additional effort or skill. Adversary is only required to have access to an account with improper priveleges.:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.
Path Traversal,"An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or ) and/or dots (.)) to reach desired directories or files.",High,The attacker must be able to control the path that is requested of the target.The target must fail to adequately sanitize incoming paths,SKILL:Simple command line attacks or to inject the malicious payload in a web page.:LEVEL:LowSKILL:Customizing attacks to bypass non trivial filters in the application.:LEVEL:Medium,"SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.","Design: Configure the access control correctly.Design: Enforce principle of least privilege.Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.Implementation: Perform input validation for all remote content, including remote and user-generated content.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.Implementation: Use indirect references rather than actual file names.Implementation: Use possible permissions on file access when developing and deploying web applications.Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach."
Directory Indexing,"An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",High,The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.The adversary must be able to control the path that is requested of the target.The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.The server version or patch level must not inherently prevent known directory listing attacks from working.,SKILL:To issue the request to URL without given a specific file name:LEVEL:LowSKILL:To bypass the access control of the directory of listings:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information Leakage,"1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message."
Subverting Environment Variable Values,The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.,High,An environment variable is accessible to the user.An environment variable used by the application can be tainted with user supplied data.Input data used in an environment variable is not validated properly.The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an adversary may attempt to manipulate that variable.,"SKILL:In a web based scenario, the client controls the data that it submitted to the server. So anybody can try to send malicious data and try to bypass the authentication mechanism.:LEVEL:LowSKILL:Some more advanced attacks may require knowledge about protocols and probing technique which help controlling a variable. The malicious user may try to understand the authentication mechanism in order to defeat it.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Accountability:TECHNICAL IMPACT:Hide Activities,Protect environment variables against unauthorized read and write access.Protect the configuration files which contain environment variables against illegitimate read and write access.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.
Symlink Attack,"An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.",Low,The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The adversary must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear.,SKILL:To create symlinks:LEVEL:LowSKILL:To identify the files and create the symlinks during the file operation time window:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information LeakageSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions."
Format String Injection,"An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",High,"The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.","SKILL:In order to discover format string vulnerabilities it takes only low skill, however, converting this discovery into a working exploit requires advanced knowledge on the part of the adversary.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism,Limit the usage of formatting string functions.Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.
LDAP Injection,"An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.",High,"The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.","SKILL:The attacker needs to have knowledge of LDAP, especially its query syntax.:LEVEL:Medium",SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.
Relative Path Traversal,"An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or ) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.",High,"The target application must accept a string as user input, fail to sanitize combinations of characters in the input that have a special meaning in the context of path navigation, and insert the user-supplied string into path navigation commands.",SKILL:To inject the malicious payload in a web page:LEVEL:LowSKILL:To bypass non trivial filters in the application:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcementImplementation: Perform input validation for all remote content, including remote and user-generated content.Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.Implementation: Prefer working without user input when using file system callsImplementation: Use indirect references rather than actual file names.Implementation: Use possible permissions on file access when developing and deploying web applications."
Client-side Injection-induced Buffer Overflow,"This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads.",Medium,The targeted client software communicates with an external server.The targeted client software has a buffer overflow vulnerability.,"SKILL:To achieve a denial of service, an attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap requires a more in-depth knowledge and higher skill level.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"The client software should not install untrusted code from a non-authenticated server.The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.Perform input validation for length of buffer inputs.Use a language or compiler that performs automatic bounds checking.Use an abstraction library to abstract away risky APIs. Not a complete solution.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Ensure all buffer uses are consistently bounds-checked.Use OS-level preventative functionality. Not a complete solution."
XML Ping of the Death,"An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",Low,The target must receive and process XML transactions.,SKILL:To send small XML messages:LEVEL:LowSKILL:To use distributed network to launch the attack:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:DoS: resource consumption (other),Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.Implementation: Provide for network flow control and traffic shaping to control access to the resources.
Command Delimiters,"An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",High,Software's input validation or filtering must not detect and block presence of additional malicious command.,"SKILL:The attacker has to identify injection vector, identify the specific commands, and optionally collect the output, i.e. from an interactive session.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Design: Perform allowlist validation against a positive specification for command length, type, and parameters.Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged accountImplementation: Perform input validation for all remote content.Implementation: Use type conversions such as JDBC prepared statements."
Redirect Access to Libraries,"An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",High,The target must utilize external libraries and must fail to verify the integrity of these libraries before using them.,SKILL:To modify the entries in the configuration file pointing to malicious libraries:LEVEL:LowSKILL:To force symlink and timing issues for redirecting access to libraries:LEVEL:MediumSKILL:To reverse engineering the libraries and inject malicious code into the libraries:LEVEL:High,SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Implementation: Restrict the permission to modify the entries in the configuration file.Implementation: Check the integrity of the dynamically linked libraries before use them.Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.
Dictionary-based Password Attack,"An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern. Dictionary Attacks differ from similar attacks such as Password Spraying (CAPEC-565) and Credential Stuffing (CAPEC-600), since they leverage unknown username/password combinations and don't care about inducing account lockouts.",Medium,The system uses one factor password based authentication.The system does not have a sound password policy that is being enforced.The system does not implement an effective password throttling mechanism.,SKILL:A variety of password cracking tools and dictionaries are available to launch this type of an attack.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Create a strong password policy and ensure that your system enforces this policy.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Leverage multi-factor authentication for all authentication services.
Spear Phishing,"An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.",High,None. Any user can be targeted by a Spear Phishing attack.,"SKILL:Spear phishing attacks require specific knowledge of the victims being targeted, such as which bank is being used by the victims, or websites they commonly log into (Google, Facebook, etc).:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information LeakageSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges:NOTE:Privilege EscalationSCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:Data Modification,"Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind."
Mobile Phishing,"An adversary targets mobile phone users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Mobile Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a text or SMS message, rather than email. The user is enticed to provide information or visit a compromised web site via this message. Apart from the manner in which the attack is initiated, the attack proceeds as a standard Phishing attack.",High,An adversary needs mobile phone numbers to initiate contact with the victim.An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.,"SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind."
Footprinting,An adversary engages in probing and exploration activities to identify constituents and properties of the target.,High,"An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack.","SKILL:The adversary knows how to send HTTP request, run the scan tool.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Keep patches up to date by installing weekly or daily if possible.Shut down unnecessary services/ports.Change default passwords by choosing strong passwords.Curtail unexpected input.Encrypt and password-protect sensitive data.Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents."
Using Malicious Files,"An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.",High,System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."
Web Application Fingerprinting,"An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",High,"Any web application can be fingerprinted. However, some configuration choices can limit the useful information an attacker may collect during a fingerprinting attack.","SKILL:Attacker knows how to send HTTP request, SQL query to a web application.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage,Implementation: Obfuscate server fields of HTTP response.Implementation: Hide inner ordering of HTTP response header.Implementation: Customizing HTTP error codes such as 404 or 500.Implementation: Hide URL file extension.Implementation: Hide HTTP response header software information filed.Implementation: Hide cookie's software information filed.Implementation: Appropriately deal with error messages.Implementation: Obfuscate database type in Database API's error message.
Cross-Site Flashing,"An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.",Medium,The targeted Flash application must reference external URLs and the locations thus referenced must be controllable through parameters. The Flash application must fail to sanitize such parameters against malicious manipulation. The victim must follow a crafted link created by the attacker.,"SKILL:knowledge of Flash internals, parameters and remote referencing.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Implementation: Only allow known URL to be included as remote flash movies in a flash applicationConfiguration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.
XSS Targeting Non-Script Elements,"This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",High,The target client software must allow the execution of scripts generated by remote hosts.,"SKILL:To achieve a redirection and use of less trusted source, an adversary can simply edit content such as XML payload or HTML files that are sent to client machine.:LEVEL:LowSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed."
Exploiting Incorrectly Configured Access Control Security Levels,"An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",High,"The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity..","SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,Design: Configure the access control correctly.
Flash Injection,"An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.",High,"The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link.","SKILL:The attacker needs to have knowledge of Flash, especially how to insert content the executes commands.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information LeakageSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Implementation: remove sensitive information such as user name and password in the SWF file.Implementation: use validation on both client and server side.Implementation: remove debug information.Implementation: use SSL when loading external dataImplementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.
Embedding Scripts within Scripts,An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts.,High,"Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts.","SKILL:To load malicious script into open, e.g. world writable directory:LEVEL:LowSKILL:Executing remote scripts on host and collecting output:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use browser technologies that do not allow client side scripting.Utilize strict type, character, and encoding enforcement.Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Ensure all content that is delivered to client is sanitized against an acceptable content specification.Perform input validation for all remote content.Perform output validation for all remote content.Disable scripting languages such as JavaScript in browserSession tokens for specific hostPatching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode"
PHP Remote File Inclusion,"In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized include or require call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.",High,"Target application server must allow remote files to be included in the require, include, etc. PHP directivesThe adversary must have the ability to make HTTP requests to the target web application.",SKILL:To inject the malicious payload in a web page:LEVEL:LowSKILL:To bypass filters in the application:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Implementation: Perform input validation for all remote content, including remote and user-generated contentImplementation: Only allow known files to be included (allowlist)Implementation: Make use of indirect references passed in URL parameters instead of file namesConfiguration: Ensure that remote scripts cannot be include in the include or require PHP directives"
Session Credential Falsification through Forging,"An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.",Medium,The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers.,SKILL:Forge the session credential and reply the request.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes."
Exponential Data Expansion,"An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",High,This type of attack requires that the target must receive input but either fail to provide an upper limit for entity expansion or provide a limit that is so large that it does not preclude significant resource consumption.,SKILL:Ability to craft nested data expansion messages.:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources."
XSS Using Alternate Syntax,"An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the script tag using the alternate forms of Script or ScRiPt may bypass filters where script is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",High,Target client software must allow scripting such as JavaScript.,SKILL:To inject the malicious payload in a web page:LEVEL:LowSKILL:To bypass non trivial filters in the application:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.Implementation: Perform input validation for all remote content, including remote and user-generated contentImplementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
Inducing Account Lockout,"An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",High,The system has a lockout mechanism.An attacker must be able to reproduce behavior that would result in an account being locked.,SKILL:No programming skills or computer knowledge is needed. An attacker can easily use this attack pattern following the Execution Flow above.:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.When implementing security features, consider how they can be misused and made to turn on themselves."
Encryption Brute Forcing,"An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.",Low,Ciphertext is known.Encryption algorithm and key size are known.,SKILL:Brute forcing encryption does not require much skill.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months."
Serialized Data External Linking,"An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.",High,The target must follow external data references without validating the validity of the reference target.,SKILL:To send serialized data messages with maliciously crafted schema.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Configure the serialized data processor to only retrieve external entities from trusted sources.
Removing Important Client Functionality,An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.,Medium,"The targeted server must assume the client performs important actions to protect the server or the server functionality. For example, the server may assume the client filters outbound traffic or that the client performs all price calculations correctly. Moreover, the server must fail to detect when these assumptions are violated by a client.",SKILL:To reverse engineer the client-side code to disable/remove the functionality on the client that the server relies on.:LEVEL:HighSKILL:The adversary installs a web tool that allows scripts or the DOM model of web-based applications to be modified before they are executed in a browser. GreaseMonkey and Firebug are two examples of such tools.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information LeakageSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.Design: Ship client-side application with integrity checks (code signing) when possible.Design: Use obfuscation and other techniques to prevent reverse engineering the client code."
Exploitation of Trusted Identifiers,"An adversary guesses, obtains, or rides a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.",High,Server software must rely on weak identifier proof and/or verification schemes.Identifiers must have long lifetimes and potential for reusability.Server software must allow concurrent sessions to exist.,"SKILL:To achieve a direct connection with the weak or non-existent server session access control, and pose as an authorized user:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.Implementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.Implementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted.Design: Use strong session identifiers that are protected in transit and at rest.Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.Implementation: Verify authenticity of all identifiers at runtime."
Functionality Misuse,"An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.",Medium,The adversary has the capability to interact with the application directly.The target system does not adequately implement safeguards to prevent misuse of authorized actions/processes.,"SKILL:General computer knowledge about how applications are launched, how they interact with input/output, and how they are configured.:LEVEL:Low","SCOPE:Confidentiality:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful attack of this kind can compromise the confidentiality of an authorized user's credentials.SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Depending on the adversary's intended technical impact, a successful attack of this kind can compromise any or all elements of the security triad.","Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.When implementing security features, consider how they can be misused and compromised."
Fuzzing for application mapping,"An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.",High,The target application must fail to sanitize incoming messages adequately before processing.,"SKILL:Although fuzzing parameters is not difficult, and often possible with automated fuzzing tools, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage,"Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.Implementation: Obfuscate server fields of HTTP response.Implementation: Hide inner ordering of HTTP response header.Implementation: Customizing HTTP error codes such as 404 or 500.Implementation: Hide HTTP response header software information filed.Implementation: Hide cookie's software information filed.Implementation: Obfuscate database type in Database API's error message."
Exploiting Incorrectly Configured SSL/TLS,An adversary takes advantage of incorrectly configured SSL/TLS communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.,Low,Access to the client/server stream.,"SKILL:The adversary needs real-time access to network traffic in such a manner that the adversary can grab needed information from the SSL stream, possibly influence the decided-upon encryption method and options, and perform automated analysis to decipher encrypted material recovered. Tools exist to automate part of the tasks, but to successfully use these tools in an attack scenario requires detailed understanding of the underlying principles.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.Configure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security."
XML Routing Detour Attacks,"An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",High,The targeted system must have multiple stages processing of XML content.,SKILL:To inject a bogus node in the XML routing table:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.Implementation: Use SSL for connections between all parties with mutual authentication.
Exploiting Trust in Client,"An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.",High,"Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side.",SKILL:The attacker must have fairly detailed knowledge of the syntax and semantics of client/server communications protocols and grammars:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.Design: Do not rely on client validation or encoding for security purposes.Design: Utilize digital signatures to increase authentication assurance.Design: Utilize two factor authentication to increase authentication assurance.Implementation: Perform input validation for all remote content.
iFrame Overlay,In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system.,Medium,The victim is communicating with the target application via a web based UI and not a thick client. The victim's browser security policies allow iFrames. The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser). The victim has an active session with the target system. The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system.,SKILL:Crafting the proper malicious site and luring the victim to this site is not a trivial task.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Configuration: Disable iFrames in the Web browser.Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames."
Fingerprinting,"An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",High,A means by which to interact with the target system directly.,"SKILL:Some fingerprinting activity requires very specific knowledge of how different operating systems respond to various TCP/IP requests. Application fingerprinting can be as easy as envoking the application with the correct command line argument, or mouse clicking in the appropriate place on the screen.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible."
File Content Injection,"An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.",High,The target software must consume files.The adversary must have access to modify files that the target software will consume.,"SKILL:How to poison a file with malicious payload that will exploit a vulnerability when the file is opened. The adversary must also know how to place the file onto a system where it will be opened by an unsuspecting party, or force the file to be opened.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Design: Enforce principle of least privilegeDesign: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.Implementation: Virus scanning on hostImplementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin."
Oversized Serialized Data Payloads,An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.,Medium,An application uses an parser for serialized data to perform transformation on user-controllable data.An application does not perform sufficient validation to ensure that user-controllable data is safe for a data parser.,SKILL:Denial of service:LEVEL:LowSKILL:Arbitrary code execution:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Resource ConsumptionSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Carefully validate and sanitize all user-controllable serialized data prior to passing it to the parser routine. Ensure that the resultant data is safe to pass to the parser.Perform validation on canonical data.Pick a robust implementation of the serialized data parser.Validate data against a valid schema or DTD prior to parsing.
Filter Failure through Buffer Overflow,"In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).",High,Ability to control the length of data passed to an active filter.,SKILL:An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.Pre-design: Use a language or compiler that performs automatic bounds checking.Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Operational: Use OS-level preventative functionality. Not a complete solution.Design: Use an abstraction library to abstract away risky APIs. Not a complete solution."
XSS Targeting URI Placeholders,"An attack of this type exploits the ability of most browsers to interpret data, javascript or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.",High,Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme.,SKILL:To inject the malicious payload in a web page:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcement.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.Implementation: Perform input validation for all remote content, including remote and user-generated contentImplementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
Forced Deadlock,"The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",Low,"The target host has a deadlock condition. There are four conditions for a deadlock to occur, known as the Coffman conditions. [REF-101]The target host exposes an API to the user.",SKILL:This type of attack may be sophisticated and require knowledge about the system's resources and APIs.:LEVEL:Medium,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful forced deadlock attack compromises the availability of the system by exhausting its available resources.,"Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).For competing actions, use well-known libraries which implement synchronization."
XML Injection,"An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.",High,XML queries used to process user input and retrieve information stored in XML documentsUser-controllable input not properly sanitized,SKILL:An attacker must have knowledge of XML syntax and constructs in order to successfully leverage XML Injection:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.
Leveraging Race Conditions,"The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by running the race, modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",High,A resource is accessed/modified concurrently by multiple processes such that a race condition exists.The adversary has the ability to modify the resource.,SKILL:Being able to run the race requires basic knowledge of concurrent processing including synchonization techniques.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Use safe libraries to access resources such as files.Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.Use synchronization to control the flow of execution.Use static analysis tools to find race conditions.Pay attention to concurrency problems related to the access of resources."
Leverage Alternate Encoding,An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.,High,"The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host.",SKILL:An adversary can inject different representation of a filtered character in a different encoding.:LEVEL:LowSKILL:An adversary may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input."
Leveraging Race Conditions via Symbolic Links,"This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",Medium,The attacker is able to create Symlink links on the target host.Tainted data from the attacker is used and copied to temporary files.The target host does insecure temporary file creation.,"SKILL:This attack is sophisticated because the attacker has to overcome a few challenges such as creating symlinks on the target host during a precise timing, inserting malicious data in the temporary file and have knowledge about the temporary files created (file name and function which creates them).:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.Follow the principle of least privilege when assigning access rights to files.Ensure good compartmentalization in the system to provide protected areas that can be trusted."
HTTP Response Smuggling,"An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server). See CanPrecede relationships for possible consequences.",Medium,"A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).Differences in the way the two HTTP agents parse and interpret HTTP responses and its headers.HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid charactersConfiguration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
DNS Rebinding,"An adversary serves content whose IP address is resolved by a DNS server that the adversary controls. After initial contact by a web browser (or similar client), the adversary changes the IP address to which its name resolves, to an address within the target organization that is not publicly accessible. This allows the web browser to examine this internal address on behalf of the adversary.",High,The target browser must access content server from the adversary controlled DNS name. Web advertisements are often used for this purpose. The target browser must honor the TTL value returned by the adversary and re-resolve the adversary's DNS name after initial contact.,SKILL:Setup DNS server and the adversary's web server. Write a malicious script to allow the victim to connect to the web server.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response. Unfortunately, this is incompatible with the design of some legitimate sites.Implementation: Reject HTTP request with a malicious Host header.Implementation: Employ DNS resolvers that prevent external names from resolving to internal addresses."
ICMP Echo Request Ping,"An adversary sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss.",Medium,The ability to send an ICMP type 8 query (Echo Request) to a remote target and receive an ICMP type 0 message (ICMP Echo Reply) in response. Any firewalls or access control lists between the sender and receiver must allow ICMP Type 8 and ICMP Type 0 messages in order for a ping operation to succeed.,SKILL:The adversary needs to know certain linux commands for this type of attack.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:A successful attack of this kind can identify open ports and available services on a system.,"Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers."
Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions,"This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",High,A resource is access/modified concurrently by multiple processes.The adversary is able to modify resource.A race condition exists while accessing a resource.,SKILL:This attack can get sophisticated since the attack has to occur within a short interval of time.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Alter Execution LogicSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Use safe libraries to access resources such as files.Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.Use synchronization to control the flow of execution.Use static analysis tools to find race conditions.Pay attention to concurrency problems related to the access of resources."
Using Leading 'Ghost' Character Sequences to Bypass Input Filters,"Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ghost characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",Medium,The targeted API must ignore the leading ghost characters that are used to get past the filters for the semantics to be the same.,"SKILL:The ability to make an API request, and knowledge of ghost characters that will not be filtered by any input validation. These ghost characters must be known to not affect the way in which the request will be interpreted.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Use an allowlist rather than a denylist input validation.Canonicalize all data prior to validation.Take an iterative approach to input validation (defense in depth).
Hijacking a Privileged Thread of Execution,"An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",Low,"The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal usersIn order to feasibly execute this class of attacks, the adversary must have the ability to hijack a privileged thread. This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or calling native OS calls that can suspend and alter process memory. This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.","SKILL:Hijacking a thread involves knowledge of how processes and threads function on the target platform, the design of the target application as well as the ability to identify the primitives to be used or manipulated to hijack the thread.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope."
Accessing/Intercepting/Modifying HTTP Cookies,"This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.",High,"Target server software must be a HTTP daemon that relies on cookies.The cookies must contain sensitive information.The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply.","SKILL:To overwrite session cookie data, and submit targeted attacks via HTTP:LEVEL:LowSKILL:Exploiting a remote buffer overflow generated by attack:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Use input validation for cookiesDesign: Generate and validate MAC for cookiesImplementation: Use SSL/TLS to protect cookie in transitImplementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software."
XSS Through HTTP Query Strings,An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser.,High,Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation.,SKILL:To place malicious payload on server via HTTP:LEVEL:LowSKILL:Exploiting any information gathered by HTTP Query on script host:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content, including remote and user-generated contentImplementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Session tokens for specific hostImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode"
HTTP Request Smuggling,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",Medium,"An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid charactersConfiguration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
HTTP Response Splitting,"An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site. See CanPrecede relationships for possible consequences.",Medium,"A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.HTTP headers capable of being user-manipulated.HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.
Leverage Executable Code in Non-Executable Files,An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.,High,The attacker must have the ability to modify non-executable files consumed by the target software.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute."
Using Unpublished Interfaces or Functionality,"An adversary searches for and invokes interfaces or functionality that the target system designers did not intend to be publicly available. If interfaces fail to authenticate requests, the attacker may be able to invoke functionality they are not authorized for.",Medium,"The architecture under attack must publish or otherwise make available services that clients can attach to, either in an unauthenticated fashion, or having obtained an authentication token elsewhere. The service need not be 'discoverable', but in the event it isn't it must have some way of being discovered by an attacker. This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service.","SKILL:A number of web service digging tools are available for free that help discover exposed web services and their interfaces. In the event that a web service is not listed, the attacker does not need to know much more in addition to the format of web service messages that they can sniff/monitor for.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like."
Leveraging/Manipulating Configuration File Search Paths,"This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",High,The attacker must be able to write to redirect search paths on the victim host.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the programImplementation: Host integrity monitoring"
Manipulating Opaque Client-based Data Tokens,"In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",High,"An attacker already has some access to the system or can steal the client based data tokens from another user who has access to the system.For an Attacker to viably execute this attack, some data (later interpreted by the application) must be held client-side in a way that can be manipulated without detection. This means that the data or tokens are not CRCd as part of their value or through a separate meta-data store elsewhere.",SKILL:If the client site token is obfuscated.:LEVEL:MediumSKILL:If the client site token is encrypted.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)Make sure that all session tokens use a good source of randomnessPerform validation on the server side to make sure that client side data tokens are consistent with what is expected."
Using Alternative IP Address Encodings,"This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",Medium,The target software must fail to anticipate all of the possible valid encodings of an IP/web address.The adversary must have the ability to communicate with the server.,SKILL:The adversary has only to try IP address format combinations.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Default deny access control policiesDesign: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)Implementation: Perform input validation for all remote content."
Manipulating Writeable Terminal Devices,This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.,High,User terminals must have a permissive access control such as world writeable that allows normal users to control data on other user's terminals.,"SKILL:Ability to discover permissions on terminal devices. Of course, brute force can also be used.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Design: Ensure that terminals are only writeable by named owner user and/or administratorDesign: Enforce principle of least privilege
Pretexting,"An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",Medium,The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the pretext that would influence the actions of the specific target.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Depending on the adversary's intentions and the specific nature their actions/requests, a successful pretexting attack can result in the compromise to the confidentiality of sensitive information in a variety of contexts.","An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks."
Using Meta-characters in E-mail Headers to Inject Malicious Payloads,"This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",High,"This attack targets most widely deployed feature rich email applications, including web based email programs.",SKILL:To distribute email:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Design: Perform validation on email header dataImplementation: Implement email filtering solutions on mail server or on MTA, relay server.Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names"
Influence Perception,The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.,High,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that influence the perception of the target can result in a wide variety of consequences and negatively affect potentially the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence Perception of Reciprocation,"An adversary uses a social engineering techniques to produce a sense of obligation in the target to perform a certain action or concede some sensitive or key piece of information. Obligation has to do with actions one feels they need to take due to some sort of social, legal, or moral requirement, duty, contract, or promise. There are various techniques for fostering a sense of obligation to reciprocate or concede during ordinary modes of communication. One method is to compliment the target, and follow up the compliment with a question. If performed correctly the target may volunteer a key piece of information, sometimes involuntarily.",Medium,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that influence the perception of the target can result in a wide variety of consequences and negatively affect potentially the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
MIME Conversion,An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.,High,"The target system uses a mail server.Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system.",SKILL:It may be trivial to cause a DoS via this attack pattern:LEVEL:LowSKILL:Causing arbitrary code to execute on the target system.:LEVEL:High,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Stay up to date with third party vendor patchesDisable the 7 to 8 bit conversion. This can be done by removing the F=9 flag from all Mailer specifications in the sendmail.cf file. For example, a sendmail.cf file with these changes applied should look similar to (depending on your system and configuration): Mlocal, P=/usr/libexec/mail.local, F=lsDFMAw5:/|@qrmn, S=10/30, R=20/40,T=DNS/RFC822/X-Unix,A=mail -d $u Mprog, P=/bin/sh, F=lsDFMoqeu, S=10/30, R=20/40,D=$z:/,T=X-Unix,A=sh -c $u This can be achieved for the Mlocal and Mprog Mailers by modifying the .mc file to include the following lines: define(`LOCAL_MAILER_FLAGS',ifdef(`LOCAL_MAILER_FLAGS',`translit(LOCAL_MAILER_FLAGS, `9')',`rmn')) define(`LOCAL_SHELL_FLAGS',ifdef(`LOCAL_SHELL_FLAGS',`translit(LOCAL_SHELL_FLAGS, `9')',`eu')) and then rebuilding the sendmail.cf file using m4(1). From Exploiting Software, please see reference below.Use the sendmail restricted shell program (smrsh)Use mail.local"
Influence Perception of Scarcity,"The adversary leverages a perception of scarcity to persuade the target to perform an action or divulge information that is advantageous to the adversary. By conveying a perception of scarcity, or a situation of limited supply, the adversary aims to create a sense of urgency in the context of a target's decision-making process.",High,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence Perception of Authority,"An adversary uses a social engineering technique to convey a sense of authority that motivates the target to reveal specific information or take specific action. There are various techniques for producing a sense of authority during ordinary modes of communication. One common method is impersonation. By impersonating someone with a position of power within an organization, an adversary may motivate the target individual to reveal some piece of sensitive information or perform an action that benefits the adversary.",High,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence Perception of Commitment and Consistency,"An adversary uses social engineering to convince the target to do minor tasks as opposed to larger actions. After complying with a request, individuals are more likely to agree to subsequent requests that are similar in type and required effort.",High,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.Individuals should avoid complying with suspicious requests."
Influence Perception of Liking,"The adversary influences the target's actions by building a relationship where the target has a liking to the adversary. People are more likely to be influenced by people of whom they are fond, so the adversary attempts to ingratiate themself with the target via actions, appearance, or a combination thereof.",Medium,The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the types of things that the target likes.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of liking can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence Perception of Consensus or Social Proof,"The adversary influences the target's actions by leveraging the inherent human nature to assume behavior of others is appropriate. In situations of uncertainty, people tend to behave in ways they see others behaving. The adversary convinces the target of adopting behavior or actions that is advantageous to the adversary.",Low,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of liking can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Target Influence via Framing,"An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word No and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.",Low,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Successful attacks that influence the target via framing into performing an action or sharing sensitive information can result in a variety of consequences that negatively affect the confidentiality of an application or system.,"An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication."
Influence via Incentives,"The adversary incites a behavior from the target by manipulating something of influence. This is commonly associated with financial, social, or ideological incentivization. Examples include monetary fraud, peer pressure, and preying on the target's morals or ethics. The most effective incentive against one target might not be as effective against another, therefore the adversary must gather information about the target's vulnerability to particular incentives.",Low,The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the incentives that would influence the actions of the specific target.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that successfully incentivize the target into performing an action beneficial to the adversary can result in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence via Psychological Principles,"The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.",Low,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that successfully influence the target into performing an action via psychological principles can result in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Exploiting Multiple Input Interpretation Layers,"An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a layer of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",Medium,User input is used to construct a command to be executed on the target system or as part of the file name.Multiple parser passes are performed on the data supplied by the user.,"SKILL:Knowledge of various escaping schemes, such as URL escape encoding and XML escape characters.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.
Overflow Binary Resource File,"An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",High,Target software processes binary resource files.Target software contains a buffer overflow vulnerability reachable through input from a user-controllable binary resource file.,"SKILL:To modify file, deceive client into downloading, locate and exploit remote stack or heap vulnerability:LEVEL:Medium",SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Perform appropriate bounds checking on all buffers.Design: Enforce principle of least privilegeDesign: Static code analysisImplementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processesImplementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host."
Buffer Overflow via Symbolic Links,"This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",High,The adversary can create symbolic link on the target host.The target host does not perform correct boundary checking while consuming data from a resources.,SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.Pay attention to the resource pointed to by your symlink links (See attack pattern named Forced Symlink race), they can be replaced by malicious resources.Always check the size of the input data before copying to a buffer.Use a language or compiler that performs automatic bounds checking.Use an abstraction library to abstract away risky APIs. Not a complete solution.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution."
Creating a Rogue Certification Authority Certificate,"An adversary exploits a weakness resulting from using a hashing algorithm with weak collision resistance to generate certificate signing requests (CSR) that contain collision blocks in their to be signed parts. The adversary submits one CSR to be signed by a trusted certificate authority then uses the signed blob to make a second certificate appear signed by said certificate authority. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority.",Medium,Certification Authority is using a hash function with insufficient collision resistance to generate the certificate hash to be signed,SKILL:Understanding of how to force a hash collision in X.509 certificates:LEVEL:HighSKILL:An attacker must be able to craft two X.509 certificates that produce the same hash value:LEVEL:HighSKILL:Knowledge needed to set up a certification authority:LEVEL:Medium,SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges,Certification Authorities need to stop using deprecated or cryptographically insecure hashing algorithms to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512.
Overflow Variables and Tags,"This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The adversary crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.",High,The target program consumes user-controllable data in the form of tags or variables.The target program does not perform sufficient boundary checking.,SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Use a language or compiler that performs automatic bounds checking.Use an abstraction library to abstract away risky APIs. Not a complete solution.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution.Do not trust input data from user. Validate all user input."
Buffer Overflow via Parameter Expansion,"In this attack, the target software is given input that the adversary knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.",Medium,"The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is).","SKILL:Finding this particular buffer overflow may not be trivial. Also, stack and especially heap based buffer overflows require a lot of knowledge if the intended goal is arbitrary code execution. Not only that the adversary needs to write the shell code to accomplish their goals, but the adversary also needs to find a way to get the program execution to jump to the planted shell code. There also needs to be sufficient room for the payload. So not every buffer overflow will be exploitable, even by a skilled adversary.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system
Passing Local Filenames to Functions That Expect a URL,"This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",High,"The victim's software must not differentiate between the location and type of reference passed the client software, e.g. browser",SKILL:Attacker identifies known local files to exploit:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.Design: Use browser technologies that do not allow client side scripting.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browser
Contradictory Destinations in Traffic Routing Schemes,"Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",Medium,"An adversary must be aware that their message will be routed using a CDN, and that both of the contradictory domains are served from that CDN.If the purpose of the Domain Fronting is to hide redirected C2 traffic, the C2 server must have been created in the CDN.",SKILL:The adversary must have some knowledge of how messages are routed.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data,"Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names."
Password Brute Forcing,"An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.",Medium,An adversary needs to know a username to target.The system uses password based authentication as the one factor authentication mechanism.An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical.,SKILL:A brute force attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
Blue Boxing,"This type of attack against older telephone switches and trunks has been around for decades. A tone is sent by an adversary to impersonate a supervisor signal which has the effect of rerouting or usurping command of the line. While the US infrastructure proper may not contain widespread vulnerabilities to this type of attack, many companies are connected globally through call centers and business process outsourcing. These international systems may be operated in countries which have not upgraded Telco infrastructure and so are vulnerable to Blue boxing. Blue boxing is a result of failure on the part of the system to enforce strong authorization for administrative functions. While the infrastructure is different than standard current applications like web applications, there are historical lessons to be learned to upgrade the access control for administrative functions. This attack pattern is included in CAPEC for historical purposes.",Medium,System must use weak authentication mechanisms for administrative functions.,"SKILL:Given a vulnerable phone system, the attackers' technical vector relies on attacks that are well documented in cracker 'zines and have been around for decades.:LEVEL:Low",SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Implementation: Upgrade phone lines. Note this may be prohibitively expensiveUse strong access control such as two factor access control for administrative access to the switch
Password Recovery Exploitation,An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure.,Medium,The system allows users to recover their passwords and gain access back into the system.Password recovery mechanism has been designed or implemented insecurely.Password recovery mechanism relies only on something the user knows and not something the user has.No third party intervention is required to use the password recovery mechanism.,SKILL:Brute force attack:LEVEL:LowSKILL:Social engineering and more sophisticated technical attacks.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.Ensure that your password recovery functionality is not vulnerable to an injection style attack.
Task Impersonation,"An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.",Medium,The adversary must already have access to the target system via some means.A legitimate task must exist that an adversary can impersonate to glean credentials.The user's privileges allow them to execute certain tasks with elevated privileges.,"SKILL:Once an adversary has gained access to the target system, impersonating a task is trivial.:LEVEL:Low",SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges,"The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help."
Shoulder Surfing,"In a shoulder surfing attack, an adversary observes an unaware individual's keystrokes, screen content, or conversations with the goal of obtaining sensitive information. One motive for this attack is to obtain sensitive information about the target for financial, personal, political, or other gains. From an insider threat perspective, an additional motive could be to obtain system/application credentials or cryptographic keys. Shoulder surfing attacks are accomplished by observing the content over the victim's shoulder, as implied by the name of this attack.",High,"The adversary typically requires physical proximity to the target's environment, in order to observe their screen or conversation. This may not be the case if the adversary is able to record the target and obtain sensitive information upon review of the recording.","SKILL:In most cases, an adversary can simply observe and retain the desired information.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:LIKELIHOOD:High,"Be mindful of your surroundings when discussing or viewing sensitive information in public areas.Pertaining to insider threats, ensure that sensitive information is not displayed to nor discussed around individuals without need-to-know access to said information."
Poison Web Service Registry,"SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.",High,The attacker must be able to write to resources or redirect access to the service registry.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: Enforce principle of least privilegeDesign: Harden registry server and file access permissionsImplementation: Implement communications to and from the registry using secure protocols
Embedding NULL Bytes,An adversary embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).,High,The program does not properly handle postfix NULL terminators,SKILL:Directory traversal:LEVEL:MediumSKILL:Execution of arbitrary code:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.
XML Flood,"An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.",Low,The target must receive and process XML transactions.An adverssary must possess the ability to generate a large amount of XML based messages to send to the target service.,SKILL:Denial of service:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption,Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.Implementation: Provide for network flow control and traffic shaping to control access to the resources.
Malware-Directed Internal Reconnaissance,"Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.",Medium,"The adversary must have internal, logical access to the target network and system.","SKILL:The adversary must be able to obtain or develop, as well as place malicious software inside the target network/system.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Keep patches up to date by installing weekly or daily if possible.Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.
"Postfix, Null Terminate, and Backslash","If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an adversary to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.",High,Null terminators are not properly handled by the filter.,"SKILL:An adversary needs to understand alternate encodings, what the filter looks for and the data format acceptable to the target API:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.
Query System for Information,"An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.",High,"This class of attacks does not strictly require authorized access to the application. As Attackers use this attack process to classify, map, and identify vulnerable aspects of an application, it simply requires hypotheses to be verified, interaction with the application, and time to conduct trial-and-error activities.","SKILL:Although fuzzing parameters is not difficult, and often possible with automated fuzzers, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Application designers can construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion."
Incomplete Data Deletion in a Multi-Tenant Environment,"An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",Low,The cloud provider must not assuredly delete part or all of the sensitive data for which they are responsible.The adversary must have the ability to interact with the system.,SKILL:The adversary requires the ability to traverse directory structure.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful attack that probes application memory will compromise the confidentiality of that data.,Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.Deletion of data should be completed promptly when requested.
Contaminate Resource,"An adversary contaminates organizational information systems (including devices and networks) by causing them to handle information of a classification/sensitivity for which they have not been authorized. When this happens, the contaminated information system, device, or network must be brought offline to investigate and mitigate the data spill, which denies availability of the system until the investigation is complete.",Low,The adversary needs to have real or fake classified/sensitive information to place on a system,SKILL:Knowledge of classification levels of systems:LEVEL:LowSKILL:The ability to obtain a classified document or information:LEVEL:HighSKILL:The ability to fake a classified document:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Victims of the attack can be exposed to classified materials,"Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.Have a planned and efficient response plan to limit the amount of time a system is offline while the contamination is investigated."
Rainbow Table Password Cracking,"An attacker gets access to the database table where hashes of passwords are stored. They then use a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.",Medium,"Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).The system uses one factor password based authentication.",SKILL:A variety of password cracking tools are available that can leverage a rainbow table. The more difficult part is to obtain the password hash(es) in the first place.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it."
Use of Known Domain Credentials,An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.,High,"The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.","SKILL:Once an adversary obtains a known credential, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.Create a strong password policy and ensure that your system enforces this policy.Ensure users are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse local administrator account credentials across systems.Deny remote use of local admin credentials to log into domain systems.Do not allow accounts to be a local administrator on more than one system.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Monitor system and domain logs for abnormal credential access."
Password Spraying,"In a Password Spraying attack, an adversary tries a small list (e.g. 3-5) of common or expected passwords, often matching the target's complexity policy, against a known list of user accounts to gain valid credentials. The adversary tries a particular password for each user account, before moving onto the next password in the list. This approach assists the adversary in remaining undetected by avoiding rapid or frequent account lockouts. The adversary may then reattempt the process with additional passwords, once enough time has passed to prevent inducing a lockout.",High,The system/application uses one factor password based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts on the target system/application.,SKILL:A Password Spraying attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Create a strong password policy and ensure that your system enforces this policy.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.
Utilizing REST's Trust in the System Resource to Obtain Sensitive Data,This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.,Medium,Opportunity to intercept must exist beyond the point where SSL is terminated.The adversary must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.,SKILL:To insert a network sniffer or other listener into the communication stream:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Implementation: Implement message level security such as HMAC in the HTTP communicationDesign: Utilize defense in depth, do not rely on a single security mechanism like SSLDesign: Enforce principle of least privilege"
Restful Privilege Elevation,"An adversary identifies a Rest HTTP (Get, Put, Delete) style permission method allowing them to perform various malicious actions upon server data due to lack of access control mechanisms implemented within the application service accepting HTTP messages.",High,The attacker needs to be able to identify HTTP Get URLs. The Get methods must be set to call applications that perform operations other than get such as update and delete.,SKILL:It is relatively straightforward to identify an HTTP Get method that changes state on the server side and executes against an over-privileged system interface:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Design: Enforce principle of least privilegeImplementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server sideImplementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose
System Footprinting,An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.,Low,The adversary must have logical access to the target network and system.,SKILL:The adversary needs to know basic linux commands.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Keep patches up to date by installing weekly or daily if possible.Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.
DOM-Based XSS,"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.",High,An application that leverages a client-side web browser with scripting enabled.An application that manipulates the DOM via client-side scripting.An application that failS to adequately sanitize or encode untrusted input.,SKILL:Requires the ability to write scripts of some complexity and to inject it through user controlled fields in the system.:LEVEL:Medium,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful DOM-based XSS attack can enable an adversary to exfiltrate sensitive information from the application.SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful DOM-based XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful DOM-based XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful DOM-based XSS attack can allow an adversary to tamper with application data.",Use browser technologies that do not allow client-side scripting.Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.Ensure that all user-supplied input is validated before use.
Session Credential Falsification through Prediction,This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.,High,"The target host uses session IDs to keep track of the users.Session IDs are used to control access to resources.The session IDs used by the target host are predictable. For example, the session IDs are generated using predictable information (e.g., time).",SKILL:There are tools to brute force session ID. Those tools require a low level of knowledge.:LEVEL:LowSKILL:Predicting Session ID may require more computation work which uses advanced analysis such as statistical analysis.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a strong source of randomness to generate a session ID.Use adequate length session IDsDo not use information available to the user in order to generate session ID (e.g., time).Ideas for creating random numbers are offered by Eastlake [RFC1750]Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format."
Reflected XSS,This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is reflected off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.,High,An application that leverages a client-side web browser with scripting enabled.An application that fail to adequately sanitize or encode untrusted input.,SKILL:Requires the ability to write malicious scripts and embed them into HTTP requests.:LEVEL:Medium,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful Reflected XSS attack can enable an adversary to exfiltrate sensitive information from the application.SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful Reflected XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful Reflected attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful Reflected attack can allow an adversary to tamper with application data.","Use browser technologies that do not allow client-side scripting.Utilize strict type, character, and encoding enforcement.Ensure that all user-supplied input is validated before use."
Stored XSS,An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently stored within the data storage of a vulnerable web application as valid input.,High,An application that leverages a client-side web browser with scripting enabled.An application that fails to adequately sanitize or encode untrusted input.An application that stores information provided by the user in data storage of some kind.,SKILL:Requires the ability to write scripts of varying complexity and to inject them through user controlled fields within the application.:LEVEL:Medium,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful Stored XSS attack can enable an adversary to exfiltrate sensitive information from the application.SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful Stored XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful Stored XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful Stored XSS attack can allow an adversary to tamper with application data.","Use browser technologies that do not allow client-side scripting.Utilize strict type, character, and encoding enforcement.Ensure that all user-supplied input is validated before being stored."
Session Hijacking,This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.,High,An application that leverages sessions to perform authentication.,SKILL:Exploiting a poorly protected identity token is a well understood attack with many helpful resources available.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful attack can enable an adversary to gain unauthorized access to an application.,"Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated."
Argument Injection,An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.,High,"Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client.","SKILL:The attacker has to identify injection vector, identify the operating system-specific commands, and optionally collect the output.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise."
Reusing Session IDs (aka Session Replay),This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.,High,The target host uses session IDs to keep track of the users.Session IDs are used to control access to resources.The session IDs used by the target host are not well protected from session theft.,"SKILL:If an attacker can steal a valid session ID, they can then try to be authenticated with that stolen session ID.:LEVEL:LowSKILL:More sophisticated attack can be used to hijack a valid session from a user and spoof a legitimate user by reusing their valid session ID.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Always invalidate a session ID after the user logout.Setup a session time out for the session IDs.Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate adversary in the middle attacks (CAPEC-94).Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.Encrypt the session data associated with the session ID.Use multifactor authentication."
Credential Stuffing,"An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.",High,"The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.",SKILL:A Credential Stuffing attack is very straightforward.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.Create a strong password policy and ensure that your system enforces this policy.Ensure users are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse local administrator account credentials across systems.Deny remote use of local admin credentials to log into domain systems.Do not allow accounts to be a local administrator on more than one system.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Monitor system and domain logs for abnormal credential access."
Wi-Fi Jamming,"In this attack scenario, the attacker actively transmits on the Wi-Fi channel to prevent users from transmitting or receiving data from the targeted Wi-Fi network. There are several known techniques to perform this attack – for example: the attacker may flood the Wi-Fi access point (e.g. the retransmission device) with deauthentication frames. Another method is to transmit high levels of noise on the RF band used by the Wi-Fi network.",Medium,Lack of anti-jam features in 802.11Lack of authentication on deauthentication/disassociation packets on 802.11-based networks,SKILL:This attack can be performed by low capability attackers with freely available tools. Commercial tools are also available that can target select networks or all WiFi networks within a range of several miles.:LEVEL:Low,"SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:A successful attack will deny the availability of the Wi-fi network to authorized users.SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:The attacker's goal is to prevent users from accessing the wireless network. Denying connectivity to the wireless network prevents the user from being able to transmit or receive any data, which also prevents VOIP calls, however this attack poses no threat to data confidentiality.","Countermeasures have been proposed for both disassociation flooding and RF jamming, however these countermeasures are not standardized and would need to be supported on both the retransmission device and the handset in order to be effective. Commercial products are not currently available that support jamming countermeasures for Wi-Fi."
Session Fixation,"The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.",Medium,Session identifiers that remain unchanged when the privilege levels change.Permissive session management mechanism that accepts random user-generated session identifiersPredictable session identifiers,SKILL:Only basic skills are required to determine and fixate session identifiers in a user's browser. Subsequent attacks may require greater skill levels depending on the attackers' motives.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult."
BitSquatting,"An adversary registers a domain name one bit different than a trusted domain. A BitSquatting attack leverages random errors in memory to direct Internet traffic to adversary-controlled destinations. BitSquatting requires no exploitation or complicated reverse engineering, and is operating system and architecture agnostic. Experimental observations show that BitSquatting popular websites could redirect non-trivial amounts of Internet traffic to a malicious entity.",Low,"An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.",SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low,"SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful BitSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.","Authenticate all servers and perform redundant checks when using DNS hostnames.When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults."
Hardware Fault Injection,"The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.",Low,Physical access to the systemThe adversary must be cognizant of where fault injection vulnerabilities exist in the system in order to leverage them for exploitation.,"SKILL:Adversaries require non-trivial technical skills to create and implement fault injection attacks. Although this style of attack has become easier (commercial equipment and training classes are available to perform these attacks), they usual require significant setup and experimentation time during which physical access to the device is required.:LEVEL:High","SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities:NOTE:An adversary capable of successfully collecting and analyzing sensitive, fault/side-channel information, has compromised the confidentiality of that application or information system data.SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:If an adversary is able to inject data via a fault or side channel vulnerability towards malicious ends, the integrity of the application or information system will be compromised.",Implement robust physical security countermeasures and monitoring.
Cross-Site Scripting (XSS),"An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.",High,"Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.","SKILL:To achieve a redirection and use of less trusted source, an attacker can simply place a script in bulletin board, blog, wiki, or other user-generated content site that are echoed back to other client machines.:LEVEL:LowSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Session tokens for specific hostImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
TypoSquatting,"An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.",Low,"An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.",SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low,"SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful TypoSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.",Authenticate all servers and perform redundant checks when using DNS hostnames.Purchase potential TypoSquatted domains and forward to legitimate domain.
SoundSquatting,"An adversary registers a domain name that sounds the same as a trusted domain, but has a different spelling. A SoundSquatting attack takes advantage of a user's confusion of the two words to direct Internet traffic to adversary-controlled destinations. SoundSquatting does not require an attack against the trusted domain or complicated reverse engineering.",Low,"An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.",SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low,"SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful SoundSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.",Authenticate all servers and perform redundant checks when using DNS hostnames.Purchase potential SoundSquatted domains and forward to legitimate domain.
Homograph Attack via Homoglyphs,"An adversary registers a domain name containing a homoglyph, leading the registered domain to appear the same as a trusted domain. A homograph attack leverages the fact that different characters among various character sets look the same to the user. Homograph attacks must generally be combined with other attacks, such as phishing attacks, in order to direct Internet traffic to the adversary-controlled destinations.",Low,"An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.",SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low,"SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful Homograph attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.",Authenticate all servers and perform redundant checks when using DNS hostnames.Utilize browsers that can warn users if URLs contain characters from different character sets.
Probe Audio and Video Peripherals,"The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system.",Low,Knowledge of the target device's or application’s vulnerabilities that can be capitalized on with malicious code. The adversary must be able to place the malicious code on the target device.,SKILL:To deploy a hidden process or malware on the system to automatically collect audio and video data.:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Prevent unknown code from executing on a system through the use of an allowlist policy.Patch installed applications as soon as new updates become available.
Collect Data from Clipboard,"The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",Low,"The adversary must have a means (i.e., a pre-installed tool or background process) by which to collect data from the clipboard and store it. That is, when the target copies data to the clipboard (e.g., to paste into another application), the adversary needs some means of capturing that data in a third location.",SKILL:To deploy a hidden process or malware on the system to automatically collect clipboard data.:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern."
Altered Component Firmware,"An adversary exploits systems features and/or improperly protected firmware of hardware components, such as Hard Disk Drives (HDD), with the goal of executing malicious code from within the component's Master Boot Record (MBR). Conducting this type of attack entails the adversary infecting the target with firmware altering malware, using known tools, and a payload. Once this malware is executed, the MBR is modified to include instructions to execute the payload at desired intervals and when the system is booted up. A successful attack will obtain persistence within the victim system even if the operating system is reinstalled and/or if the component is formatted or has its data erased.",Low,Advanced knowledge about the target component's firmwareAdvanced knowledge about Master Boot Records (MBR)Advanced knowledge about tools used to insert firmware altering malware.Advanced knowledge about component shipments to the target organization.,SKILL:Ability to access and reverse engineer hardware component firmware.:LEVEL:HighSKILL:Ability to intercept components in transit.:LEVEL:HighSKILL:Ability to create malicious payload to be executed from MBR.:LEVEL:MediumSKILL:Ability to leverage known malware tools to infect target system and insert firmware altering malware/payload:LEVEL:Low,SCOPE:Authentication:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data,Leverage hardware components known to not be susceptible to these types of attacks.Implement hardware RAID infrastructure.
Using Slashes and URL Encoding Combined to Bypass Validation Logic,"This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",High,The application accepts and decodes URL string request.The application performs insufficient filtering/canonicalization on the URLs.,SKILL:An attacker can try special characters in the URL and bypass the URL validation.:LEVEL:LowSKILL:The attacker may write a script to defeat the input filtering mechanism.:LEVEL:Medium,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.Refer to the RFCs to safely decode URL.Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)."
Inclusion of Code in Existing Process,"The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, function hooking, reflective code loading, and more.",Low,The targeted application fails to verify the integrity of the running process that allows an adversary to execute arbitrary code.,"SKILL:Knowledge of how to load malicious code into the memory space of a running process, as well as the ability to have the running process execute this code. For example, with DLL injection, the adversary must know how to load a DLL into the memory space of another running process, and cause this process to execute the code inside of the DLL.:LEVEL:High",SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Read Data,"Prevent unknown or malicious software from loading through using an allowlist policy.Properly restrict the location of the software being used.Leverage security kernel modules providing advanced access control and process restrictions like SELinux.Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.Monitor API calls like SetWindowsHookEx and SetWinEventHook which install hook procedures for Windows.Monitor processes and command-line arguments for unknown behavior related to code injection."
DLL Side-Loading,"An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",Low,The target must fail to verify the integrity of the DLL before using them.,SKILL:Trick the operating system in loading a malicious DLL instead of a legitimate DLL.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Bypass Protection Mechanism,Prevent unknown DLLs from loading through using an allowlist policy.Patch installed applications as soon as new updates become available.Properly restrict the location of the software being used.Use of sxstrace.exe on Windows as well as manual inspection of the manifests.Require code signing and avoid using relative paths for resources.
Identify Shared Files/Directories on System,"An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.",Medium,"The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).","SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line. The adversary, or their malware, can simply employ a set of commands that search for shared drives on the system (e.g., net view remote system or net share).:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is potentially able to identify the location of sensitive information or lateral pathways through the network.,"Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools."
Use of Captured Hashes (Pass The Hash),An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.,Medium,The system/application is connected to the Windows domain.The system/application leverages the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.The adversary possesses known Windows credential hash value pairs that exist on the target domain.,"SKILL:Once an adversary obtains a known Windows credential hash value pair, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.Monitor system and domain logs for abnormal credential access.Create a strong password policy and ensure that your system enforces this policy.Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.
Use of Captured Tickets (Pass The Ticket),"An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",Low,The adversary needs physical access to the victim system.The use of a third-party credential harvesting tool.,SKILL:Determine if Kerberos authentication is used on the server.:LEVEL:LowSKILL:The adversary uses a third-party tool to obtain the necessary tickets to execute the attack.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Gain Privileges,Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.Monitor system and domain logs for abnormal access.
Collect Data from Registries,"An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",Medium,"The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).The adversary must have capability to navigate the operating system to peruse the registry.","SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to read sensitive information about the system in the registry.,"Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern."
Collect Data from Screen Capture,"An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",Medium,"The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).","SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only to leverage the relevant command for screen capture.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to capture potentially sensitive information and processes as they appear on the screen.,"Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature."
Sniff Application Code,"An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",Low,"The attacker must have the ability to place themself in the communication path between the client and server.The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.The attacker must be able to employ a sniffer on the network without being detected.","SKILL:The attacker needs to setup a sniffer for a sufficient period of time so as to capture meaningful quantities of code. The presence of the sniffer should not be detected on the network. Also if the attacker plans to employ an adversary-in-the-middle attack (CAPEC-94), the client or server must not realize this. Finally, the attacker needs to regenerate source code from binary code if the need be.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Encrypt all communication between the client and server.Implementation: Use SSL, SSH, SCP.Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network."
Use of Known Kerberos Credentials,"An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.",Medium,"The system/application leverages Kerberos authentication.The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication for Kerberos service accounts.The system/application does not have a sound password policy that is being enforced for Kerberos service accounts.The system/application does not implement an effective password throttling mechanism for authenticating to Kerberos service accounts.The targeted network allows for network sniffing attacks to succeed.","SKILL:Once an adversary obtains a known Kerberos credential, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse Kerberos service account credentials across systems.Deny remote use of Kerberos service account credentials to log into domain systems.Do not allow Kerberos service accounts to be a local administrator on more than one system.Enable at least AES Kerberos encryption for tickets.Monitor system and domain logs for abnormal credential access."
Use of Known Operating System Credentials,"An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.",High,"The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.","SKILL:Once an adversary obtains a known credential, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the network.Create a strong password policy and ensure that your system enforces this policy.Ensure users are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse local administrator account credentials across systems.Deny remote use of local admin credentials to log into domain systems.Do not allow accounts to be a local administrator on more than one system.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Monitor system and domain logs for abnormal credential access."
Credential Prompt Impersonation,"An adversary, through a previously installed malicious application, impersonates a credential prompt in an attempt to steal a user's credentials.",Medium,The adversary must already have access to the target system via some means.A legitimate task must exist that an adversary can impersonate to glean credentials.,"SKILL:Once an adversary has gained access to the target system, impersonating a credential prompt is not difficult.:LEVEL:Low",SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges,"The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help."
Voice Phishing,"An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a cold call or by the victim if calling an illegitimate telephone number.",High,"An adversary needs phone numbers to initiate contact with the victim, in addition to a legitimate-looking telephone number to call the victim from.An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.If passively conducting this attack via a spoofed website, replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.","SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem."
SQL Injection,"This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.",High,"SQL queries used by the application to store, retrieve or modify data.User-controllable input that is not properly validated by the application as part of SQL queries.","SKILL:It is fairly simple for someone with basic SQL knowledge to perform SQL injection, in general. In certain instances, however, specific knowledge of the database employed may be required.:LEVEL:Low",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
Root/Jailbreak Detection Evasion via Hooking,"An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to hook code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.",Medium,The targeted application must be non-restricted to allow code hooking.,SKILL:Knowledge about Root/Jailbreak detection and evasion techniques.:LEVEL:HighSKILL:Knowledge about code hooking.:LEVEL:Medium,"SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through Root/Jailbreak Detection Evasion via Hooking, the adversary compromises the integrity of the application.SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:NOTE:An adversary may leverage Root/Jailbreak Detection Evasion via Hooking in order to obtain sensitive information.","Ensure mobile applications are signed appropriately to avoid code inclusion via hooking.Inspect the application's memory for suspicious artifacts, such as shared objects/JARs or dylibs, after other Root/Jailbreak detection methods.Inspect the application's stack trace for suspicious method calls.Allow legitimate native methods, and check for non-allowed native methods during Root/Jailbreak detection methods.For iOS applications, ensure application methods do not originate from outside of Apple's SDK."
Root/Jailbreak Detection Evasion via Debugging,"An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",Medium,A debugger must be able to be inserted into the targeted application.,SKILL:Knowledge about Root/Jailbreak detection and evasion techniques.:LEVEL:HighSKILL:Knowledge about runtime debugging.:LEVEL:Medium,"SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through Root/Jailbreak Detection Evasion via Debugging, the adversary compromises the integrity of the application.SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:NOTE:An adversary may leverage Root/Jailbreak Detection Evasion via Debugging in order to obtain sensitive information.",Instantiate checks within the application code that ensures debuggers are not attached.
Adversary in the Browser (AiTB),"An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints.",High,"The adversary must install or convince a user to install a Trojan.There are two components communicating with each other.An attacker is able to identify the nature and mechanism of communication between the two target components.Strong mutual authentication is not used between the two target components yielding opportunity for adversarial interposition.For browser pivoting, the SeDebugPrivilege and a high-integrity process must both exist to execute this attack.","SKILL:Tricking the victim into installing the Trojan is often the most difficult aspect of this attack. Afterwards, the remainder of this attack is fairly trivial.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Ensure software and applications are only downloaded from legitimate and reputable sources, in addition to conducting integrity checks on the downloaded component.Leverage anti-malware tools, which can detect Trojan Horse malware.Use strong, out-of-band mutual authentication to always fully authenticate both ends of any communications channel.Limit user permissions to prevent browser pivoting.Ensure browser sessions are regularly terminated and when their effective lifetime ends."
Exploitation of Transient Instruction Execution,"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.",Low,The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU.,"SKILL:Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations.:LEVEL:HighSKILL:Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,Implementation: DAWG (Dynamically Allocated Way Guard) - processor cache properly divided between different programs/processes that don't share resourcesImplementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tablesConfiguration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order executionConfiguration: Disable SharedArrayBuffer for Web BrowsersConfiguration: Disable Copy-on-Write between Cloud VMsConfiguration: Privilege Checks on Cache Flush InstructionsImplementation: Non-inclusive Cache Memories to prevent Flush+Reload Attacks
Server Side Request Forgery,"An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server’s internal network, or to external third parties. If successful, the adversary’s request will be made with the server’s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server’s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.",High,Server must be running a web application that processes HTTP requests.,"SKILL:The adversary will have to detect the vulnerability through an intermediary service or specify maliciously crafted URLs and analyze the server response.:LEVEL:MediumSKILL:The adversary will be required to access internal resources, extract information, or leverage the services running on the server to perform unauthorized actions such as traversing the local network or routing a reflected TCP DDoS through them.:LEVEL:High",SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption,"Handling incoming requests securely is the first line of action to mitigate this vulnerability. This can be done through URL validation.Further down the process flow, examining the response and verifying that it is as expected before sending would be another way to secure the server.Allowlist the DNS name or IP address of every service the web application is required to access is another effective security measure. This ensures the server cannot make external requests to arbitrary services.Requiring authentication for local services adds another layer of security between the adversary and internal services running on the server. By enforcing local authentication, an adversary will not gain access to all internal services only with access to the server.Enforce the usage of relevant URL schemas. By limiting requests be made only through HTTP or HTTPS, for example, attacks made through insecure schemas such as file://, ftp://, etc. can be prevented."
Exploitation of Thunderbolt Protection Flaws,"An adversary leverages a firmware weakness within the Thunderbolt protocol, on a computing device to manipulate Thunderbolt controller firmware in order to exploit vulnerabilities in the implementation of authorization and verification schemes within Thunderbolt protection mechanisms. Upon gaining physical access to a target device, the adversary conducts high-level firmware manipulation of the victim Thunderbolt controller SPI (Serial Peripheral Interface) flash, through the use of a SPI Programing device and an external Thunderbolt device, typically as the target device is booting up. If successful, this allows the adversary to modify memory, subvert authentication mechanisms, spoof identities and content, and extract data and memory from the target device. Currently 7 major vulnerabilities exist within Thunderbolt protocol with 9 attack vectors as noted in the Execution Flow.",Low,"The adversary needs at least a few minutes of physical access to a system with an open Thunderbolt port, version 3 or lower, and an external thunderbolt device controlled by the adversary with maliciously crafted software and firmware, via an SPI Programming device, to exploit weaknesses in security protections.","SKILL:Detailed knowledge on various system motherboards, PCI Express Domain, SPI, and Thunderbolt Protocol in order to interface with internal system components via external devices.:LEVEL:HighSKILL:Detailed knowledge on OS/Kernel memory address space, Direct Memory Access (DMA) mapping, Input-Output Memory Management Units (IOMMUs), and vendor memory protections for data leakage.:LEVEL:HighSKILL:Detailed knowledge on scripting and SPI programming in order to configure and modify Thunderbolt controller firmware and software configurations.:LEVEL:High",SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,Implementation: Kernel Direct Memory Access ProtectionConfiguration: Enable UEFI option USB Passthrough mode - Thunderbolt 3 system port operates as USB 3.1 Type C interfaceConfiguration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interfaceConfiguration: Enable UEFI option Mixed USB/DisplayPort mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface with support for DP modeConfiguration: Set Security Level to SL3 for Thunderbolt 2 system portConfiguration: Disable PCIe tunneling to set Security Level to SL3Configuration: Disable Boot Camp upon MacOS systems
BlueSmacking,An adversary uses Bluetooth flooding to transfer large packets to Bluetooth enabled devices over the L2CAP protocol with the goal of creating a DoS. This attack must be carried out within close proximity to a Bluetooth enabled device.,Medium,The system/application has Bluetooth enabled.,"SKILL:An adversary only needs a Linux machine along with a Bluetooth adapter, which is extremely common.:LEVEL:Low",SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption,"Disable Bluetooth when not being used.When using Bluetooth, set it to hidden or non-discoverable mode."
Bluetooth Impersonation AttackS (BIAS),An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.,Medium,Knowledge of a target device's list of trusted connections.,SKILL:Adversaries must be capable of using command line Linux tools.:LEVEL:LowSKILL:Adversaries must be in close proximity to Bluetooth devices.:LEVEL:Low,"SCOPE:Integrity:NOTE:An adversary will be impersonating another Bluetooth device, and may gain access to information pertaining to that user along with the ability to manipulate other information.SCOPE:Confidentiality:NOTE:An adversary will have unauthorized access to information.",Disable Bluetooth in public places.Verify incoming Bluetooth connections; do not automatically trust.Change default PIN passwords and always use one when connecting.
Key Negotiation of Bluetooth Attack (KNOB),"An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",Low,Person in the Middle network setup.,SKILL:Ability to modify packets.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.
Alteration of a Software Update,"An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",Medium,An adversary would need to have penetrated an organization’s software update infrastructure including gaining access to components supporting the configuration management of software versions and updates related to the software maintenance of customer systems.,"SKILL:Skills required include the ability to infiltrate the organization’s software update infrastructure either from the Internet or from within the organization, including subcontractors, and be able to change software being delivered to customer/user systems in an undetected manner.:LEVEL:High",SCOPE:Access Control:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.Require elevated privileges for distribution of software and software updates."
Software Development Tools Maliciously Altered,"An adversary with the ability to alter tools used in a development environment causes software to be developed with maliciously modified tools. Such tools include requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools. The adversary then carries out malicious acts once the software is deployed including malware infection of other systems to support further compromises.",Low,"An adversary would need to have access to a targeted developer’s development environment and in particular to tools used to design, create, test and manage software, where the adversary could ensure malicious code is included in software packages built through alteration or substitution of tools in the environment used in the development of software.","SKILL:Ability to leverage common delivery mechanisms (e.g., email attachments, removable media) to infiltrate a development environment to gain access to software development tools for the purpose of malware insertion into an existing tool or replacement of an existing tool with a maliciously altered copy.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Access Control:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Read Data,"Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.Avoid giving elevated privileges to developers."
Requirements for ASIC Functionality Maliciously Altered,"An adversary with access to functional requirements for an application specific integrated circuit (ASIC), a chip designed/customized for a singular particular use, maliciously alters requirements derived from originating capability needs. In the chip manufacturing process, requirements drive the chip design which, when the chip is fully manufactured, could result in an ASIC which may not meet the user’s needs, contain malicious functionality, or exhibit other anomalous behaviors thereby affecting the intended use of the ASIC.",Low,"An adversary would need to have access to a foundry’s or chip maker’s requirements management system that stores customer requirements for ASICs, requirements upon which the design of the ASIC is based.",SKILL:An adversary would need experience in designing chips based on functional requirements in order to manipulate requirements in such a way that deviations would not be detected in subsequent stages of ASIC manufacture and where intended malicious functionality would be available to the adversary once integrated into a system and fielded.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for hardware requirements and design.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Malicious Code Implanted During Chip Programming,"During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",Low,"An adversary would need to have access to a foundry’s or chip maker’s development/production environment where programs for specific chips are developed, managed and uploaded into targeted chips prior to distribution or sale.","SKILL:An adversary needs to be skilled in microprogramming, manipulation of configuration management systems, and in the operation of tools used for the uploading of programs into chips during manufacture. Uploading can be for individual chips or performed on a large scale basis.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Developer Signing Maliciously Altered Software,"Software produced by a reputable developer is clandestinely infected with malicious code and then digitally signed by the unsuspecting developer, where the software has been altered via a compromised software development or build process prior to being signed. The receiver or user of the software has no reason to believe that it is anything but legitimate and proceeds to deploy it to organizational systems. This attack differs from CAPEC-206, since the developer is inadvertently signing malicious code they believe to be legitimate and which they are unware of any malicious modifications.",Medium,"An adversary would need to have access to a targeted developer’s software development environment, including to their software build processes, where the adversary could ensure code maliciously tainted prior to a build process is included in software packages built.","SKILL:The adversary must have the skills to infiltrate a developer’s software development/build environment and to implant malicious code in developmental software code, a build server, or a software repository containing dependency code, which would be referenced to be included during the software build process.:LEVEL:High",SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Execute Unauthorized Commands,"Have a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools.Employ intrusion detection and malware detection capabilities on IDE systems where feasible."
Design for FPGA Maliciously Altered,"An adversary alters the functionality of a field-programmable gate array (FPGA) by causing an FPGA configuration memory chip reload in order to introduce a malicious function that could result in the FPGA performing or enabling malicious functions on a host system. Prior to the memory chip reload, the adversary alters the program for the FPGA by adding a function to impact system operation.",Low,An adversary would need to have access to FPGA programming/configuration-related systems in a chip maker’s development environment where FPGAs can be initially configured prior to delivery to a customer or have access to such systems in a customer facility where end-user FPGA configuration/reconfiguration can be performed.,"SKILL:An adversary would need to be skilled in FPGA programming in order to create/manipulate configurations in such a way that when loaded into an FPGA, the end user would be able to observe through testing all user-defined required functions but would be unaware of any additional functions the adversary may have introduced.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Retrieve Data from Decommissioned Devices,"An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",Medium,"An adversary needs to have access to electronic data processing equipment being recycled or disposed of (e.g., laptops, servers) at a collection location and the ability to take control of it for the purpose of exploiting its content.","SKILL:An adversary may need the ability to mount printed circuit boards and target individual chips for exploitation.:LEVEL:HighSKILL:An adversary needs the technical skills required to extract solid state drives, hard disk drives, and other storage media to host on a compatible system or harness to gain access to digital content.:LEVEL:Medium",SCOPE:Accountability:TECHNICAL IMPACT:Bypass Protection Mechanism,"Backup device data before erasure to retain intellectual property and inside knowledge.Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.Use a secure erase software.Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.Physically destroy memory and SIM cards for mobile devices not intended to be reused.Ensure that the user account has been terminated or switched to a new device before destroying."
NoSQL Injection,"An adversary targets software that constructs NoSQL statements based on user input or with parameters vulnerable to operator replacement in order to achieve a variety of technical impacts such as escalating privileges, bypassing authentication, and/or executing code.",High,"Awareness of the technology stack being leveraged by the target application.NoSQL queries used by the application to store, retrieve, or modify data.User-controllable input that is not properly validated by the application as part of NoSQL queries.Target potentially susceptible to operator replacement attacks.","SKILL:For keyword and JavaScript injection attacks, it is fairly simple for someone with basic NoSQL knowledge to perform NoSQL injection, once the target's technology stack has been determined.:LEVEL:LowSKILL:For operator replacement attacks, the adversary must also have knowledge of HTTP Parameter Pollution attacks and how to conduct them.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as relevant NoSQL and JavaScript content. NoSQL-specific keywords, such as $ne, $eq or $gt for MongoDB, must be filtered in addition to characters such as a single-quote(') or semicolons (;) based on the context in which they appear. Validation should also extend to expected types.If possible, leverage safe APIs (e.g., PyMongo and Flask-PyMongo for Python and MongoDB) for queries as opposed to building queries from strings.Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.Use of custom error pages - Adversaries can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.Exercise the principle of Least Privilege with regards to application accounts to minimize damage if a NoSQL injection attack is successful.If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as mongo-sanitize.If using PHP with MongoDB, ensure all special query operators (starting with $) use single quotes to prevent operator replacement attacks.Additional mitigations will depend on the NoSQL database, API, and programming language leveraged by the application."
Exploitation of Improperly Configured or Implemented Memory Protections,An adversary takes advantage of missing or incorrectly configured access control within memory to read/write data or inject malicious code into said memory.,Medium,Access to the hardware being leveraged.,SKILL:Ability to craft malicious code to inject into the memory region.:LEVEL:MediumSKILL:Intricate knowledge of memory structures.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Ensure that protected and unprotected memory ranges are isolated and do not overlap.If memory regions must overlap, leverage memory priority schemes if memory regions can overlap.Ensure that original and mirrored memory regions apply the same protections.Ensure immutable code or data is programmed into ROM or write-once memory."
Subvert Code-signing Facilities,Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.,Low,"A framework-based language that supports code signing (such as, and most commonly, Java or .NET)Deployed code that has been signed by its authoring vendor, or a partner.The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated.","SKILL:Subverting code signing is not a trivial activity. Most code signing and verification schemes are based on use of cryptography and the attacker needs to have an understanding of these cryptographic operations in good detail. Additionally the attacker also needs to be aware of the way memory is assigned and accessed by the container since, often, the only way to subvert code signing would be to patch the code in memory. Finally, a knowledge of the platform specific mechanisms of signing and verifying code is a must.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable."
Exploitation of Improperly Controlled Registers,An adversary exploits missing or incorrectly configured access control within registers to read/write data that is not meant to be obtained or modified by a user.,Medium,Awareness of the hardware being leveraged.Access to the hardware being leveraged.,SKILL:Intricate knowledge of registers.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.Ensure security lock bit protections are reviewed for design inconsistencies and common weaknesses.Test security lock programming flow in both pre-silicon and post-silicon environments.Leverage automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.Ensure that measurement data is stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent.
Exploitation of Improperly Controlled Hardware Security Identifiers,"An adversary takes advantage of missing or incorrectly configured security identifiers (e.g., tokens), which are used for access control within a System-on-Chip (SoC), to read/write data or execute a given action.",Medium,Awareness of the hardware being leveraged.Access to the hardware being leveraged.,SKILL:Ability to execute actions within the SoC.:LEVEL:MediumSKILL:Intricate knowledge of the identifiers being utilized.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Review generation of security identifiers for design inconsistencies and common weaknesses.Review security identifier decoders for design inconsistencies and common weaknesses.Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments."
Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities,"An adversary may exploit vulnerable code (i.e., firmware or ROM) that is unpatchable. Unpatchable devices exist due to manufacturers intentionally or inadvertently designing devices incapable of updating their software. Additionally, with updatable devices, the manufacturer may decide not to support the device and stop making updates to their software.",Medium,"Awareness of the hardware being leveraged.Access to the hardware being leveraged, either physically or remotely.",SKILL:Knowledge of various wireless protocols to enable remote access to vulnerable devices:LEVEL:MediumSKILL:Ability to identify physical entry points such as debug interfaces if the device is not being accessed remotely:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means
Target Programs with Elevated Privileges,This attack targets programs running with elevated privileges. The adversary tries to leverage a vulnerability in the running program and get arbitrary code to execute with elevated privileges.,High,"The targeted program runs with elevated OS privileges.The targeted program accepts input data from the user or from another program.The targeted program is giving away information about itself. Before performing such attack, an eventual attacker may need to gather information about the services running on the host target. The more the host target is verbose about the services that are running (version number of application, etc.) the more information can be gather by an attacker.This attack often requires communicating with the host target services directly. For instance Telnet may be enough to communicate with the host target.","SKILL:An attacker can use a tool to scan and automatically launch an attack against known issues. A tool can also repeat a sequence of instructions and try to brute force the service on the host target, an example of that would be the flooding technique.:LEVEL:LowSKILL:More advanced attack may require knowledge of the protocol spoken by the host service.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Apply the principle of least privilege.Validate all untrusted data.Apply the latest patches.Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them.Avoid revealing information about your system (e.g., version of the program) to anonymous users.Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs.If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage.Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.Monitor traffic and resource usage and pay attention if resource exhaustion occurs.Protect your log file from unauthorized modification and log forging."
Metadata Spoofing,"An adversary alters the metadata of a resource (e.g., file, directory, repository, etc.) to present a malicious resource as legitimate/credible.",Medium,Identification of a resource whose metadata is to be spoofed,SKILL:Ability to spoof a variety of metadata to convince victims the source is trusted:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,"Validate metadata of resources such as authors, timestamps, and statistics.Confirm the pedigree of open source packages and ensure the code being downloaded does not originate from another source.Even if the metadata is properly checked and a user believes it to be legitimate, there may still be a chance that they've been duped. Therefore, leverage automated testing techniques to determine where malicious areas of the code may exist."
Spoof Open-Source Software Metadata,"An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.",Medium,Identification of a popular open-source component whose metadata is to be spoofed.,SKILL:Ability to spoof a variety of software metadata to convince victims the source is trusted.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Within package managers, look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source software from reputable hosting sites or package managers.Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.After downloading open-source software, ensure integrity values have not changed.Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
Spoof Version Control System Commit Metadata,"An adversary spoofs metadata pertaining to a Version Control System (VCS) (e.g., Git) repository's commits to deceive users into believing that the maliciously provided software is frequently maintained and originates from a trusted source.",Medium,Identification of a popular open-source repository whose metadata is to be spoofed.,SKILL:Ability to spoof a variety of repository metadata to convince victims the source is trusted.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source software from reputable hosting sites or package managers.Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.After downloading open-source software, ensure integrity values have not changed.Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
StarJacking,An adversary spoofs software popularity metadata to deceive users into believing that a maliciously provided package is widely used and originates from a trusted source.,Medium,Identification of a popular open-source package whose popularity metadata is to be used for the malicious package.,SKILL:Ability to provide a package to a package manager and associate a popular package's source code repository URL.:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source packages, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source packages from reputable package managers.After downloading open-source packages, ensure integrity values have not changed.Before executing or incorporating the package, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
System Location Discovery,"An adversary collects information about the target system in an attempt to identify the system's geographical location. Information gathered could include keyboard layout, system language, and timezone. This information may benefit an adversary in confirming the desired target and/or tailoring further attacks.",High,The adversary must have some level of access to the system and have a basic understanding of the operating system in order to query the appropriate sources for relevant information.,SKILL:The adversary must know how to query various system sources of information respective of the system's operating system to obtain the relevant information.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation."
Repo Jacking,An adversary takes advantage of the redirect property of directly linked Version Control System (VCS) repositories to trick users into incorporating malicious code into their applications.,Medium,Identification of a popular repository that may be directly referenced in numerous software applicationsA repository owner/maintainer who has recently changed their username or deleted their account,SKILL:Ability to create an account on a VCS hosting site and recreate an existing directory structure.:LEVEL:LowSKILL:Ability to create malware that can exploit various software applications.:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Leverage dedicated package managers instead of directly linking to VCS repositories.Utilize version pinning and lock files to prevent use of maliciously modified repositories.Implement vendoring (i.e., including third-party dependencies locally) and leverage automated testing techniques (e.g., static analysis) to determine if the software behaves maliciously.Leverage automated tools, such as Checkmarx's ChainJacking tool, to determine susceptibility to Repo Jacking attacks."
Load Value Injection,"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",Low,The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU.The CPU incorrectly transiently forwards values from microarchitectural buffers after faulting or assisted loadsThe adversary needs the ability to induce page faults or microcode assists on the target system.Code gadgets exist that allow the adversary to hijack transient execution and encode secrets into the microarchitectural state.,"SKILL:Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations.:LEVEL:HighSKILL:Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage.:LEVEL:HighSKILL:The ability to provoke faulting or assisted loads in legitimate execution.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,"Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.Insert explicit “lfence” speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded."
DHCP Spoofing,"An adversary masquerades as a legitimate Dynamic Host Configuration Protocol (DHCP) server by spoofing DHCP traffic, with the goal of redirecting network traffic or denying service to DHCP.",Low,The adversary must have access to a machine within the target LAN which can send DHCP offers to the target.,SKILL:The adversary must identify potential targets for DHCP Spoofing and craft network configurations to obtain the desired results.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read DataSCOPE:Integrity:SCOPE:Access Control:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption,Design: MAC-Forced ForwardingImplementation: Port Security and DHCP snoopingImplementation: Network-based Intrusion Detection Systems
Install Malicious Extension,"An adversary directly installs or tricks a user into installing a malicious extension into existing trusted software, with the goal of achieving a variety of negative technical impacts.",Medium,"The adversary must craft malware based on the type of software and system(s) they intend to exploit.If the adversary intends to install the malicious extension themself, they must first compromise the target machine via some other means.",SKILL:Ability to create malicious extensions that can exploit specific software applications and systems.:LEVEL:MediumSKILL:Optional: Ability to exploit target system(s) via other means in order to gain entry.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read DataSCOPE:Integrity:SCOPE:Access Control:TECHNICAL IMPACT:Modify DataSCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Only install extensions/plugins from official/verifiable sources.Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.Implement an extension/plugin allow list, based on the given security policy.If applicable, confirm extensions/plugins are properly signed by the official developers.For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background."
Eavesdropping on a Monitor,"An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security tools",Medium,Victim should use an external monitor devicePhysical access to the target location and devices,"SKILL:Knowledge of how to use the SDR and related software: With this knowledge, the adversary will find the correct frequency where the signal is being leaked:LEVEL:MediumSKILL:Understanding of computing hardware, to identify the video cable and video ports:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).Implement: Use wireless technologies to connect to external display devices."
Blind SQL Injection,"Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",High,"SQL queries used by the application to store, retrieve or modify data.User-controllable input that is not properly validated by the application as part of SQL queries.","SKILL:Determining the database type and version, as well as the right number and type of parameters to the query being injected in the absence of error messages requires greater skill than reverse-engineering database error messages.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear."
Try Common or Default Usernames and Passwords,"An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. secret or password) that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.",Medium,The system uses one factor password based authentication.The adversary has the means to interact with the system.,"SKILL:An adversary just needs to gain access to common default usernames/passwords specific to the technologies used by the system. Additionally, a brute force attack leveraging common passwords can be easily realized if the user name is known.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Delete all default account credentials that may be put in by the product vendor.Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
Network Boundary Bridging,"An adversary which has gained elevated access to network boundary devices may use these devices to create a channel to bridge trusted and untrusted networks. Boundary devices do not necessarily have to be on the network’s edge, but rather must serve to segment portions of the target network the adversary wishes to cross into.",Medium,The adversary must have control of a network boundary device.,SKILL:The adversary must understand how to manage the target network device to create or edit policies which will bridge networks.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Hide Activities,"Design: Ensure network devices are storing credentials in encrypted storesDesign: Follow the principle of least privilege and restrict administrative duties to as few accounts as possible. Ensure these privileged accounts are secured with strong credentials which do not overlap with other network devices.Configuration: When possible, configure network boundary devices to use MFA.Configuration: Change the default configuration for network devices to harden their security profiles. Default configurations are often enabled with insecure features to allow ease of installation and management. However, these configurations can be easily discovered and exploited by adversaries.Implementation: Perform integrity checks on audit logs for network device management and review them to identify abnormalities in configurations.Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering."
Browser in the Middle (BiTM),"An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.",Medium,"The adversary must create a convincing web client to establish the connection. The victim then needs to be lured onto the adversary's webpage. In addition, the victim's machine must not use local authentication APIs, a hardware token, or a Trusted Platform Module (TPM) to authenticate.",SKILLLEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges:LIKELIHOOD:HighSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data:LIKELIHOOD:HighSCOPE:Integrity:TECHNICAL IMPACT:Modify Data:LIKELIHOOD:Medium,"Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel"
Exploiting Incorrect Chaining or Granularity of Hardware Debug Components,An adversary exploits incorrect chaining or granularity of hardware debug components in order to gain unauthorized access to debug functionality on a chip. This happens when authorization is not checked on a per function basis and is assumed for a chain or group of debug functionality.,Low,Hardware device has an exposed debug interface,SKILL:Ability to identify physical debug interfaces on a device:LEVEL:MediumSKILL:Ability to operate devices to scan and connect to an exposed debug interface:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Implement: Ensure that debug components are properly chained, and their granularity is maintained at different authorization levelsPerform Post-silicon validation tests at various authorization levels to ensure that debug components are only accessible to authorized users"
Using Unicode Encoding to Bypass Validation Logic,An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.,Medium,Filtering is performed on data that has not be properly canonicalized.,SKILL:An attacker needs to understand Unicode encodings and have an idea (or be able to find out) what system components may not be Unicode aware.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.Ensure that filtering or input validation is applied to canonical data.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.
URL Encoding,This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.,High,The application should accepts and decodes URL input.The application performs insufficient filtering/canonicalization on the URLs.,SKILL:An adversary can try special characters in the URL and bypass the URL validation.:LEVEL:LowSKILL:The adversary may write a script to defeat the input filtering mechanism.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Refer to the RFCs to safely decode URL.Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible."
User-Controlled Filename,"An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",High,The victim must trust the name and locale of user controlled filenames.,"SKILL:To achieve a redirection and use of less trusted source, an attacker can simply edit data that the host uses to build the filename:LEVEL:LowSKILL:Deploying a malicious look-a-like site (such as a site masquerading as a bank or online auction site) that the user enters their authentication data into.:LEVEL:MediumSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Availability:TECHNICAL IMPACT:Alter Execution LogicSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Design: Use browser technologies that do not allow client side scripting.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Scan dynamically generated content against validation specification
Manipulating State,"The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner. State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits. If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.",Medium,"User state is maintained at least in some way in user-controllable locations, such as cookies or URL parameters.There is a faulty finite state machine in the hardware logic that can be exploited.","SKILL:The adversary needs to have knowledge of state management as employed by the target application, and also the ability to manipulate the state in a meaningful way.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.All possible states must be handled by hardware finite state machines."
Manipulating Writeable Configuration Files,"Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.",High,Configuration files must be modifiable by the attacker,"SKILL:To identify vulnerable configuration files, and understand how to manipulate servers and erase forensic evidence:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Backup copies of all configuration filesImplementation: Integrity monitoring for configuration filesImplementation: Enforce audit logging on code and configuration promotion procedures.Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD"
Manipulating Web Input to File System Calls,"An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.",High,Program must allow for user controlled variables to be applied directly to the filesystem,SKILL:To identify file system entry point and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: Enforce principle of least privilege.Design: Ensure all input is validated, and does not contain file system commandsDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."
Manipulating User-Controlled Variables,"This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",High,A variable consumed by the application server is exposed to the client.A variable consumed by the application server can be overwritten by the user.The application server trusts user supplied data to compute business logic.The application server does not perform proper input validation.,SKILL:The malicious user can easily try some well-known global variables and find one which matches.:LEVEL:LowSKILL:The adversary can use automated tools to probe for variables that they can control.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.Use encapsulation when declaring your variables. This is to lower the exposure of your variables.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program."
Using Escaped Slashes in Alternate Encoding,"This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",High,"The application accepts the backlash character as escape character.The application server does incomplete input data decoding, filtering and validation.",SKILL:The adversary can naively try backslash character and discover that the target host uses it as escape character.:LEVEL:LowSKILL:The adversary may need deep understanding of the host target in order to exploit the vulnerability. The adversary may also use automated tools to probe for this vulnerability.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Verify that the user-supplied data does not use backslash character to escape malicious characters.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.Be aware of the threat of alternative method of data encoding.Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names."
Using Slashes in Alternate Encoding,"This attack targets the encoding of the Slash characters. An adversary would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the adversary many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.",High,The application server accepts paths to locate resources.The application server does insufficient input data validation on the resource path requested by the user.The access right to resources are not set properly.,SKILL:An adversary can try variation of the slashes characters.:LEVEL:LowSKILL:An adversary can use more sophisticated tool or script to scan a website and find a path filtering problem.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)Test your path decoding process against malicious input.In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.Assume all input is malicious. Create an allowlist that defines all valid input to the application based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system."
Buffer Overflow in an API Call,"This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",High,The target host exposes an API to the user.One or more API functions exposed by the target host has a buffer overflow vulnerability.,SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Use a language or compiler that performs automatic bounds checking.Use secure functions not vulnerable to buffer overflow.If you have to use dangerous functions, make sure that you do boundary checking.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution."
Using UTF-8 Encoding to Bypass Validation Logic,"This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the shortest possible encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",High,The application's UTF-8 decoder accepts and interprets illegal UTF-8 characters or non-shortest format of UTF-8 encoding.Input filtering and validating is not done properly leaving the door open to harmful characters for the target host.,SKILL:An attacker can inject different representation of a filtered character in UTF-8 format.:LEVEL:LowSKILL:An attacker may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: 1. Insert a replacement character (e.g. '?', ''). 2. Ignore the bytes. 3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). 4. Not notice and decode as if the bytes were some similar bit of UTF-8. 5. Stop decoding and report an error (possibly giving the caller the option to continue). It is possible for a decoder to behave in different ways for different types of invalid input. RFC 3629 only requires that UTF-8 decoders must not decode overlong sequences (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to ...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence. Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input."
Web Server Logs Tampering,"Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to Log Injection-Tampering-Forging except that in this case, the attack is targeting the logs of the web server and not the application.",Medium,Target server software must be a HTTP server that performs web logging.,SKILL:To input faked entries into Web logs:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: Use input validation before writing to web logDesign: Validate all log data before it is output
XPath Injection,"An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",High,XPath queries used to retrieve information stored in XML documentsUser-controllable input not properly sanitized before being used as part of XPath queries,SKILL:XPath Injection shares the same basic premises with SQL Injection. An attacker must have knowledge of XPath syntax and constructs in order to successfully leverage XPath Injection:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
XQuery Injection,"This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",High,The XQL must execute unvalidated data,SKILL:Basic understanding of XQuery:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Design: Perform input allowlist validation on all XML inputImplementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.
AJAX Footprinting,"This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",High,The user must allow JavaScript to execute in their browser,SKILL:To land and launch a script on victim's machine with appropriate footprinting logic for enumerating services and vulnerabilities in JavaScript:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Design: Use browser technologies that do not allow client side scripting.Implementation: Perform input validation for all remote content.
XSS Through HTTP Headers,"An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.",High,Target software must be a client that allows scripting communication from remote hosts.,"SKILL:To achieve a redirection and use of less trusted source, an adversary can simply edit HTTP Headers that are sent to client machine.:LEVEL:LowSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Session tokens for specific hostImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
Forceful Browsing,"An attacker employs forceful browsing (direct URL entry) to access portions of a website that are otherwise unreachable. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.",High,The forcibly browseable pages or accessible resources must be discoverable and improperly protected.,SKILL:Forcibly browseable pages can be discovered by using a number of automated tools. Doing the same manually is tedious but by no means difficult.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context."
OS Command Injection,"In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",High,User controllable input used as part of commands to the underlying operating system.,"SKILL:The attacker needs to have knowledge of not only the application to exploit but also the exact nature of commands that pertain to the target operating system. This may involve, though not always, knowledge of specific assembly commands for the platform.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commandsAll application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them."
Pharming,"A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",High,Vulnerable DNS software or improperly protected hosts file or router that can be poisonedA website that handles sensitive information but does not use a secure connection and a certificate that is valid is also prone to pharming,"SKILL:The attacker needs to be able to poison the resolver - DNS entries or local hosts file or router entry pointing to a trusted DNS server - in order to successfully carry out a pharming attack. Setting up a fake website, identical to the targeted one, does not require special skills.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"All sensitive information must be handled over a secure connection.Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority."
Buffer Overflow in Local Command-Line Utilities,This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.,High,The target host exposes a command-line utility to the user.The command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited.,SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.Use a language or compiler that performs automatic bounds checking.Use an abstraction library to abstract away risky APIs. Not a complete solution.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Operational: Use OS-level preventative functionality. Not a complete solution.Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.Do not unnecessarily expose services."
Reflection Attack in Authentication Protocol,"An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",High,"The attacker must have direct access to the target server in order to successfully mount a reflection attack. An intermediate entity, such as a router or proxy, that handles these exchanges on behalf of the attacker inhibits the attackers' ability to attack the authentication protocol.",SKILL:The attacker needs to have knowledge of observing the protocol exchange and managing the required connections in order to issue and respond to challenges:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any furtherThe use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol"
Forced Integer Overflow,"This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",High,"The attacker can manipulate the value of an integer variable utilized by the target host.The target host does not do proper range checking on the variable before utilizing it.When the integer variable is incremented or decremented to an out of range value, it gets a very different value (e.g. very small or negative number)",SKILL:An attacker can simply overflow an integer by inserting an out of range value.:LEVEL:LowSKILL:Exploiting a buffer overflow by injecting malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,Use a language or compiler that performs automatic bounds checking.Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.Use an abstraction library to abstract away risky APIs. Not a complete solution.Always do bound checking before consuming user input data.
Log Injection-Tampering-Forging,"This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing them to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.",High,The target host is logging the action and data of the user.The target host insufficiently protects access to the logs or logging mechanisms.,SKILL:This attack can be as simple as adding extra characters to the logged data (e.g. username). Adding entries is typically easier than removing entries.:LEVEL:LowSKILL:A more sophisticated attack can try to defeat the input validation mechanism.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Carefully control access to physical log files.Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.Use synchronization to control the flow of execution.Use static analysis tools to identify log forging vulnerabilities.Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells."
Adversary in the Middle (AiTM),"An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.",High,There are two components communicating with each other.An attacker is able to identify the nature and mechanism of communication between the two target components.An attacker can eavesdrop on the communication between the target components.Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption.,SKILL:This attack can get sophisticated since the attack may use cryptography.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Ensure Public Keys are signed by a Certificate AuthorityEncrypt communications using cryptography (e.g., SSL/TLS)Use Strong mutual authentication to always fully authenticate both ends of any communications channel.Exchange public keys using a secure channel"
WSDL Scanning,"This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.",High,A client program connecting to a web service can read the WSDL to determine what functions are available on the server.The target host exposes vulnerable functions within its WSDL interface.,"SKILL:This attack can be as simple as reading WSDL and starting sending invalid request.:LEVEL:LowSKILL:This attack can be used to perform more sophisticated attacks (SQL injection, etc.):LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,It is important to protect WSDL file or provide limited access to it.Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.Validate the received messages against the WSDL Schema. Incomplete solution.
Block Access to Libraries,"An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. It is possible that the application does not handle situations properly where access to these libraries has been blocked. Depending on the error handling within the application, blocked access to libraries may leave the system in an insecure state that could be leveraged by an attacker.",Medium,An application requires access to external libraries.An attacker has the privileges to block application access to external libraries.,"SKILL:Knowledge of how to block access to libraries, as well as knowledge of how to leverage the resulting state of the application based on the failed call.:LEVEL:Low",SCOPE:Availability:TECHNICAL IMPACT:Alter Execution LogicSCOPE:Confidentiality:TECHNICAL IMPACT:OtherSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Ensure that application handles situations where access to APIs in external libraries is not available securely. If the application cannot continue its execution safely it should fail in a consistent and secure fashion.
Cryptanalysis,"Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).",Low,The target software utilizes some sort of cryptographic algorithm.An underlying weaknesses exists either in the cryptographic algorithm used or in the way that it was applied to a particular chunk of plaintext.The encryption algorithm is known to the attacker.An attacker has access to the ciphertext.,SKILL:Cryptanalysis generally requires a very significant level of understanding of mathematics and computation.:LEVEL:High,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:In most cases, if cryptanalysis is successful at all, an adversary will not be able to decrypt the entire message, but instead will only be able to deduce some information about the plaintext. However, that may be sufficient for an adversary, depending on the context of the attack.",Use proven cryptographic algorithms with recommended key sizes.Ensure that the algorithms are used properly. That means: 1. Not rolling out your own crypto; Use proven algorithms and implementations. 2. Choosing initialization vectors with sufficiently random numbers 3. Generating key material using good sources of randomness and avoiding known weak keys 4. Using proven protocols and their implementations. 5. Picking the most appropriate cryptographic algorithm for your usage context and data
Phishing,Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.,High,An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.,"SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind."
Privilege Abuse,An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.,High,"The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources.",SKILL:Adversary can leverage privileged features they already have access to without additional effort or skill. Adversary is only required to have access to an account with improper priveleges.:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.
Footprinting,An adversary engages in probing and exploration activities to identify constituents and properties of the target.,High,"An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack.","SKILL:The adversary knows how to send HTTP request, run the scan tool.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Keep patches up to date by installing weekly or daily if possible.Shut down unnecessary services/ports.Change default passwords by choosing strong passwords.Curtail unexpected input.Encrypt and password-protect sensitive data.Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents."
Exploitation of Trusted Identifiers,"An adversary guesses, obtains, or rides a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.",High,Server software must rely on weak identifier proof and/or verification schemes.Identifiers must have long lifetimes and potential for reusability.Server software must allow concurrent sessions to exist.,"SKILL:To achieve a direct connection with the weak or non-existent server session access control, and pose as an authorized user:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.Implementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.Implementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted.Design: Use strong session identifiers that are protected in transit and at rest.Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.Implementation: Verify authenticity of all identifiers at runtime."
Functionality Misuse,"An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.",Medium,The adversary has the capability to interact with the application directly.The target system does not adequately implement safeguards to prevent misuse of authorized actions/processes.,"SKILL:General computer knowledge about how applications are launched, how they interact with input/output, and how they are configured.:LEVEL:Low","SCOPE:Confidentiality:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful attack of this kind can compromise the confidentiality of an authorized user's credentials.SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Depending on the adversary's intended technical impact, a successful attack of this kind can compromise any or all elements of the security triad.","Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.When implementing security features, consider how they can be misused and compromised."
Exploiting Trust in Client,"An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.",High,"Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side.",SKILL:The attacker must have fairly detailed knowledge of the syntax and semantics of client/server communications protocols and grammars:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.Design: Do not rely on client validation or encoding for security purposes.Design: Utilize digital signatures to increase authentication assurance.Design: Utilize two factor authentication to increase authentication assurance.Implementation: Perform input validation for all remote content.
Fingerprinting,"An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",High,A means by which to interact with the target system directly.,"SKILL:Some fingerprinting activity requires very specific knowledge of how different operating systems respond to various TCP/IP requests. Application fingerprinting can be as easy as envoking the application with the correct command line argument, or mouse clicking in the appropriate place on the screen.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible."
Forced Deadlock,"The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",Low,"The target host has a deadlock condition. There are four conditions for a deadlock to occur, known as the Coffman conditions. [REF-101]The target host exposes an API to the user.",SKILL:This type of attack may be sophisticated and require knowledge about the system's resources and APIs.:LEVEL:Medium,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful forced deadlock attack compromises the availability of the system by exhausting its available resources.,"Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).For competing actions, use well-known libraries which implement synchronization."
Leveraging Race Conditions,"The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by running the race, modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",High,A resource is accessed/modified concurrently by multiple processes such that a race condition exists.The adversary has the ability to modify the resource.,SKILL:Being able to run the race requires basic knowledge of concurrent processing including synchonization techniques.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Use safe libraries to access resources such as files.Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.Use synchronization to control the flow of execution.Use static analysis tools to find race conditions.Pay attention to concurrency problems related to the access of resources."
Contaminate Resource,"An adversary contaminates organizational information systems (including devices and networks) by causing them to handle information of a classification/sensitivity for which they have not been authorized. When this happens, the contaminated information system, device, or network must be brought offline to investigate and mitigate the data spill, which denies availability of the system until the investigation is complete.",Low,The adversary needs to have real or fake classified/sensitive information to place on a system,SKILL:Knowledge of classification levels of systems:LEVEL:LowSKILL:The ability to obtain a classified document or information:LEVEL:HighSKILL:The ability to fake a classified document:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Victims of the attack can be exposed to classified materials,"Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.Have a planned and efficient response plan to limit the amount of time a system is offline while the contamination is investigated."
Use of Known Domain Credentials,An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.,High,"The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.","SKILL:Once an adversary obtains a known credential, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.Create a strong password policy and ensure that your system enforces this policy.Ensure users are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse local administrator account credentials across systems.Deny remote use of local admin credentials to log into domain systems.Do not allow accounts to be a local administrator on more than one system.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Monitor system and domain logs for abnormal credential access."
Hardware Fault Injection,"The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.",Low,Physical access to the systemThe adversary must be cognizant of where fault injection vulnerabilities exist in the system in order to leverage them for exploitation.,"SKILL:Adversaries require non-trivial technical skills to create and implement fault injection attacks. Although this style of attack has become easier (commercial equipment and training classes are available to perform these attacks), they usual require significant setup and experimentation time during which physical access to the device is required.:LEVEL:High","SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities:NOTE:An adversary capable of successfully collecting and analyzing sensitive, fault/side-channel information, has compromised the confidentiality of that application or information system data.SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:If an adversary is able to inject data via a fault or side channel vulnerability towards malicious ends, the integrity of the application or information system will be compromised.",Implement robust physical security countermeasures and monitoring.
Metadata Spoofing,"An adversary alters the metadata of a resource (e.g., file, directory, repository, etc.) to present a malicious resource as legitimate/credible.",Medium,Identification of a resource whose metadata is to be spoofed,SKILL:Ability to spoof a variety of metadata to convince victims the source is trusted:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,"Validate metadata of resources such as authors, timestamps, and statistics.Confirm the pedigree of open source packages and ensure the code being downloaded does not originate from another source.Even if the metadata is properly checked and a user believes it to be legitimate, there may still be a chance that they've been duped. Therefore, leverage automated testing techniques to determine where malicious areas of the code may exist."
Eavesdropping on a Monitor,"An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security tools",Medium,Victim should use an external monitor devicePhysical access to the target location and devices,"SKILL:Knowledge of how to use the SDR and related software: With this knowledge, the adversary will find the correct frequency where the signal is being leaked:LEVEL:MediumSKILL:Understanding of computing hardware, to identify the video cable and video ports:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).Implement: Use wireless technologies to connect to external display devices."
Manipulating State,"The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner. State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits. If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.",Medium,"User state is maintained at least in some way in user-controllable locations, such as cookies or URL parameters.There is a faulty finite state machine in the hardware logic that can be exploited.","SKILL:The adversary needs to have knowledge of state management as employed by the target application, and also the ability to manipulate the state in a meaningful way.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.All possible states must be handled by hardware finite state machines."
Adversary in the Middle (AiTM),"An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.",High,There are two components communicating with each other.An attacker is able to identify the nature and mechanism of communication between the two target components.An attacker can eavesdrop on the communication between the target components.Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption.,SKILL:This attack can get sophisticated since the attack may use cryptography.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Ensure Public Keys are signed by a Certificate AuthorityEncrypt communications using cryptography (e.g., SSL/TLS)Use Strong mutual authentication to always fully authenticate both ends of any communications channel.Exchange public keys using a secure channel"
Accessing Functionality Not Properly Constrained by ACLs,"In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",High,"The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.The various resources, or individual URLs, must be somehow discoverable by the attackerThe administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.","SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic."
Overflow Buffers,"Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.",High,Targeted software performs buffer operations.Targeted software inadequately performs bounds-checking on buffer operations.Adversary has the capability to influence the input to buffer operations.,"SKILL:In most cases, overflowing a buffer does not require advanced skills beyond the ability to notice an overflow and stuff an input variable with content.:LEVEL:LowSKILL:In cases of directed overflows, where the motive is to divert the flow of the program or application as per the adversaries' bidding, high level skills are required. This may involve detailed knowledge of the target system architecture and kernel.:LEVEL:High",SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a language or compiler that performs automatic bounds checking.Use secure functions not vulnerable to buffer overflow.If you have to use dangerous functions, make sure that you do boundary checking.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution.Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software."
Clickjacking,"An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.",Medium,"The victim is communicating with the target application via a web based UI and not a thick clientThe victim's browser security policies allow at least one of the following JavaScript, Flash, iFrames, ActiveX, or CSS.The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser)The victim has an active session with the target system.The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system",SKILL:Crafting the proper malicious site and luring the victim to this site are not trivial tasks.:LEVEL:High,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.Turn off JavaScript, Flash and disable CSS.When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks."
Cross Zone Scripting,An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security.,Medium,The target must be using a zone-aware browser.,SKILL:Ability to craft malicious scripts or find them elsewhere and ability to identify functionality that is running web controls in the local zone and to find an injection vector into that functionality:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Disable script execution.Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zoneLimit the flow of untrusted data into the privileged areas of the system that run in the higher trust zoneLimit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimumEnsure proper HTML output encoding before writing user supplied data to the page
JSON Hijacking (aka JavaScript Hijacking),An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.,High,JSON is used as a transport mechanism between the client and the serverThe target server cannot differentiate real requests from forged requestsThe JSON object returned from the server can be accessed by the attackers' malicious code via a script tag,"SKILL:Once this attack pattern is developed and understood, creating an exploit is not very complex.The attacker needs to have knowledge of the URLs that need to be accessed on the target system to request the JSON objects.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario."
Choosing Message Identifier,"This pattern of attack is defined by the selection of messages distributed via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.",High,"Information and client-sensitive (and client-specific) data must be present through a distribution channel available to all users.Distribution means must code (through channel, message identifiers, or convention) message destination in a manner visible within the distribution means itself (such as a control channel) or in the messages themselves.",SKILL:All the adversary needs to discover is the format of the messages on the channel/distribution means and the particular identifier used within the messages.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Associate some ACL (in the form of a token) with an authenticated user which they provide middleware. The middleware uses this token as part of its channel/message selection for that client, or part of a discerning authorization decision for privileged channels/messages. The purpose is to architect the system in a way that associates proper authentication/authorization with each channel/message.Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them."
Exploit Non-Production Interfaces,"An adversary exploits a sample, demonstration, test, or debug interface that is unintentionally enabled on a production system, with the goal of gleaning information or leveraging functionality that would otherwise be unavailable.",Low,The target must have configured non-production interfaces and failed to secure or remove them when brought into a production environment.,SKILL:Exploiting non-production interfaces requires significant skill and knowledge about the potential non-production interfaces left enabled in production.:LEVEL:High,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Access Control:SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Alter Execution Logic,Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.
Path Traversal,"An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or ) and/or dots (.)) to reach desired directories or files.",High,The attacker must be able to control the path that is requested of the target.The target must fail to adequately sanitize incoming paths,SKILL:Simple command line attacks or to inject the malicious payload in a web page.:LEVEL:LowSKILL:Customizing attacks to bypass non trivial filters in the application.:LEVEL:Medium,"SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.","Design: Configure the access control correctly.Design: Enforce principle of least privilege.Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.Implementation: Perform input validation for all remote content, including remote and user-generated content.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.Implementation: Use indirect references rather than actual file names.Implementation: Use possible permissions on file access when developing and deploying web applications.Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach."
Format String Injection,"An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",High,"The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.","SKILL:In order to discover format string vulnerabilities it takes only low skill, however, converting this discovery into a working exploit requires advanced knowledge on the part of the adversary.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism,Limit the usage of formatting string functions.Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.
LDAP Injection,"An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.",High,"The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.","SKILL:The attacker needs to have knowledge of LDAP, especially its query syntax.:LEVEL:Medium",SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.
Command Delimiters,"An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",High,Software's input validation or filtering must not detect and block presence of additional malicious command.,"SKILL:The attacker has to identify injection vector, identify the specific commands, and optionally collect the output, i.e. from an interactive session.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Design: Perform allowlist validation against a positive specification for command length, type, and parameters.Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged accountImplementation: Perform input validation for all remote content.Implementation: Use type conversions such as JDBC prepared statements."
Redirect Access to Libraries,"An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",High,The target must utilize external libraries and must fail to verify the integrity of these libraries before using them.,SKILL:To modify the entries in the configuration file pointing to malicious libraries:LEVEL:LowSKILL:To force symlink and timing issues for redirecting access to libraries:LEVEL:MediumSKILL:To reverse engineering the libraries and inject malicious code into the libraries:LEVEL:High,SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Implementation: Restrict the permission to modify the entries in the configuration file.Implementation: Check the integrity of the dynamically linked libraries before use them.Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.
Using Malicious Files,"An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.",High,System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."
Exploiting Incorrectly Configured Access Control Security Levels,"An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",High,"The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity..","SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,Design: Configure the access control correctly.
Flash Injection,"An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.",High,"The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link.","SKILL:The attacker needs to have knowledge of Flash, especially how to insert content the executes commands.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information LeakageSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Implementation: remove sensitive information such as user name and password in the SWF file.Implementation: use validation on both client and server side.Implementation: remove debug information.Implementation: use SSL when loading external dataImplementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.
Embedding Scripts within Scripts,An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts.,High,"Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts.","SKILL:To load malicious script into open, e.g. world writable directory:LEVEL:LowSKILL:Executing remote scripts on host and collecting output:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use browser technologies that do not allow client side scripting.Utilize strict type, character, and encoding enforcement.Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Ensure all content that is delivered to client is sanitized against an acceptable content specification.Perform input validation for all remote content.Perform output validation for all remote content.Disable scripting languages such as JavaScript in browserSession tokens for specific hostPatching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode"
Session Credential Falsification through Forging,"An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.",Medium,The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers.,SKILL:Forge the session credential and reply the request.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes."
Inducing Account Lockout,"An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",High,The system has a lockout mechanism.An attacker must be able to reproduce behavior that would result in an account being locked.,SKILL:No programming skills or computer knowledge is needed. An attacker can easily use this attack pattern following the Execution Flow above.:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.When implementing security features, consider how they can be misused and made to turn on themselves."
Encryption Brute Forcing,"An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.",Low,Ciphertext is known.Encryption algorithm and key size are known.,SKILL:Brute forcing encryption does not require much skill.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months."
Removing Important Client Functionality,An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.,Medium,"The targeted server must assume the client performs important actions to protect the server or the server functionality. For example, the server may assume the client filters outbound traffic or that the client performs all price calculations correctly. Moreover, the server must fail to detect when these assumptions are violated by a client.",SKILL:To reverse engineer the client-side code to disable/remove the functionality on the client that the server relies on.:LEVEL:HighSKILL:The adversary installs a web tool that allows scripts or the DOM model of web-based applications to be modified before they are executed in a browser. GreaseMonkey and Firebug are two examples of such tools.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information LeakageSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.Design: Ship client-side application with integrity checks (code signing) when possible.Design: Use obfuscation and other techniques to prevent reverse engineering the client code."
Exploiting Incorrectly Configured SSL/TLS,An adversary takes advantage of incorrectly configured SSL/TLS communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.,Low,Access to the client/server stream.,"SKILL:The adversary needs real-time access to network traffic in such a manner that the adversary can grab needed information from the SSL stream, possibly influence the decided-upon encryption method and options, and perform automated analysis to decipher encrypted material recovered. Tools exist to automate part of the tasks, but to successfully use these tools in an attack scenario requires detailed understanding of the underlying principles.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.Configure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security."
XML Routing Detour Attacks,"An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",High,The targeted system must have multiple stages processing of XML content.,SKILL:To inject a bogus node in the XML routing table:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.Implementation: Use SSL for connections between all parties with mutual authentication.
File Content Injection,"An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.",High,The target software must consume files.The adversary must have access to modify files that the target software will consume.,"SKILL:How to poison a file with malicious payload that will exploit a vulnerability when the file is opened. The adversary must also know how to place the file onto a system where it will be opened by an unsuspecting party, or force the file to be opened.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Design: Enforce principle of least privilegeDesign: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.Implementation: Virus scanning on hostImplementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin."
Oversized Serialized Data Payloads,An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.,Medium,An application uses an parser for serialized data to perform transformation on user-controllable data.An application does not perform sufficient validation to ensure that user-controllable data is safe for a data parser.,SKILL:Denial of service:LEVEL:LowSKILL:Arbitrary code execution:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Resource ConsumptionSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Carefully validate and sanitize all user-controllable serialized data prior to passing it to the parser routine. Ensure that the resultant data is safe to pass to the parser.Perform validation on canonical data.Pick a robust implementation of the serialized data parser.Validate data against a valid schema or DTD prior to parsing.
XML Injection,"An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.",High,XML queries used to process user input and retrieve information stored in XML documentsUser-controllable input not properly sanitized,SKILL:An attacker must have knowledge of XML syntax and constructs in order to successfully leverage XML Injection:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.
Leverage Alternate Encoding,An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.,High,"The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host.",SKILL:An adversary can inject different representation of a filtered character in a different encoding.:LEVEL:LowSKILL:An adversary may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input."
Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions,"This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",High,A resource is access/modified concurrently by multiple processes.The adversary is able to modify resource.A race condition exists while accessing a resource.,SKILL:This attack can get sophisticated since the attack has to occur within a short interval of time.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Alter Execution LogicSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Use safe libraries to access resources such as files.Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.Use synchronization to control the flow of execution.Use static analysis tools to find race conditions.Pay attention to concurrency problems related to the access of resources."
Hijacking a Privileged Thread of Execution,"An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",Low,"The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal usersIn order to feasibly execute this class of attacks, the adversary must have the ability to hijack a privileged thread. This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or calling native OS calls that can suspend and alter process memory. This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.","SKILL:Hijacking a thread involves knowledge of how processes and threads function on the target platform, the design of the target application as well as the ability to identify the primitives to be used or manipulated to hijack the thread.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope."
Using Unpublished Interfaces or Functionality,"An adversary searches for and invokes interfaces or functionality that the target system designers did not intend to be publicly available. If interfaces fail to authenticate requests, the attacker may be able to invoke functionality they are not authorized for.",Medium,"The architecture under attack must publish or otherwise make available services that clients can attach to, either in an unauthenticated fashion, or having obtained an authentication token elsewhere. The service need not be 'discoverable', but in the event it isn't it must have some way of being discovered by an attacker. This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service.","SKILL:A number of web service digging tools are available for free that help discover exposed web services and their interfaces. In the event that a web service is not listed, the attacker does not need to know much more in addition to the format of web service messages that they can sniff/monitor for.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like."
Manipulating Opaque Client-based Data Tokens,"In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",High,"An attacker already has some access to the system or can steal the client based data tokens from another user who has access to the system.For an Attacker to viably execute this attack, some data (later interpreted by the application) must be held client-side in a way that can be manipulated without detection. This means that the data or tokens are not CRCd as part of their value or through a separate meta-data store elsewhere.",SKILL:If the client site token is obfuscated.:LEVEL:MediumSKILL:If the client site token is encrypted.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)Make sure that all session tokens use a good source of randomnessPerform validation on the server side to make sure that client side data tokens are consistent with what is expected."
Manipulating Writeable Terminal Devices,This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.,High,User terminals must have a permissive access control such as world writeable that allows normal users to control data on other user's terminals.,"SKILL:Ability to discover permissions on terminal devices. Of course, brute force can also be used.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Design: Ensure that terminals are only writeable by named owner user and/or administratorDesign: Enforce principle of least privilege
Pretexting,"An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",Medium,The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the pretext that would influence the actions of the specific target.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Depending on the adversary's intentions and the specific nature their actions/requests, a successful pretexting attack can result in the compromise to the confidentiality of sensitive information in a variety of contexts.","An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks."
Influence Perception,The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.,High,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that influence the perception of the target can result in a wide variety of consequences and negatively affect potentially the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Target Influence via Framing,"An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word No and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.",Low,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Successful attacks that influence the target via framing into performing an action or sharing sensitive information can result in a variety of consequences that negatively affect the confidentiality of an application or system.,"An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication."
Influence via Incentives,"The adversary incites a behavior from the target by manipulating something of influence. This is commonly associated with financial, social, or ideological incentivization. Examples include monetary fraud, peer pressure, and preying on the target's morals or ethics. The most effective incentive against one target might not be as effective against another, therefore the adversary must gather information about the target's vulnerability to particular incentives.",Low,The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the incentives that would influence the actions of the specific target.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that successfully incentivize the target into performing an action beneficial to the adversary can result in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence via Psychological Principles,"The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.",Low,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that successfully influence the target into performing an action via psychological principles can result in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Passing Local Filenames to Functions That Expect a URL,"This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",High,"The victim's software must not differentiate between the location and type of reference passed the client software, e.g. browser",SKILL:Attacker identifies known local files to exploit:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.Design: Use browser technologies that do not allow client side scripting.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browser
Contradictory Destinations in Traffic Routing Schemes,"Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",Medium,"An adversary must be aware that their message will be routed using a CDN, and that both of the contradictory domains are served from that CDN.If the purpose of the Domain Fronting is to hide redirected C2 traffic, the C2 server must have been created in the CDN.",SKILL:The adversary must have some knowledge of how messages are routed.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data,"Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names."
Password Brute Forcing,"An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.",Medium,An adversary needs to know a username to target.The system uses password based authentication as the one factor authentication mechanism.An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical.,SKILL:A brute force attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
Password Recovery Exploitation,An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure.,Medium,The system allows users to recover their passwords and gain access back into the system.Password recovery mechanism has been designed or implemented insecurely.Password recovery mechanism relies only on something the user knows and not something the user has.No third party intervention is required to use the password recovery mechanism.,SKILL:Brute force attack:LEVEL:LowSKILL:Social engineering and more sophisticated technical attacks.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.Ensure that your password recovery functionality is not vulnerable to an injection style attack.
Task Impersonation,"An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.",Medium,The adversary must already have access to the target system via some means.A legitimate task must exist that an adversary can impersonate to glean credentials.The user's privileges allow them to execute certain tasks with elevated privileges.,"SKILL:Once an adversary has gained access to the target system, impersonating a task is trivial.:LEVEL:Low",SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges,"The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help."
XML Flood,"An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.",Low,The target must receive and process XML transactions.An adverssary must possess the ability to generate a large amount of XML based messages to send to the target service.,SKILL:Denial of service:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption,Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.Implementation: Provide for network flow control and traffic shaping to control access to the resources.
Malware-Directed Internal Reconnaissance,"Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.",Medium,"The adversary must have internal, logical access to the target network and system.","SKILL:The adversary must be able to obtain or develop, as well as place malicious software inside the target network/system.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Keep patches up to date by installing weekly or daily if possible.Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.
Query System for Information,"An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.",High,"This class of attacks does not strictly require authorized access to the application. As Attackers use this attack process to classify, map, and identify vulnerable aspects of an application, it simply requires hypotheses to be verified, interaction with the application, and time to conduct trial-and-error activities.","SKILL:Although fuzzing parameters is not difficult, and often possible with automated fuzzers, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Application designers can construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion."
System Footprinting,An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.,Low,The adversary must have logical access to the target network and system.,SKILL:The adversary needs to know basic linux commands.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Keep patches up to date by installing weekly or daily if possible.Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.
Session Hijacking,This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.,High,An application that leverages sessions to perform authentication.,SKILL:Exploiting a poorly protected identity token is a well understood attack with many helpful resources available.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful attack can enable an adversary to gain unauthorized access to an application.,"Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated."
Argument Injection,An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.,High,"Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client.","SKILL:The attacker has to identify injection vector, identify the operating system-specific commands, and optionally collect the output.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise."
Credential Stuffing,"An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.",High,"The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.",SKILL:A Credential Stuffing attack is very straightforward.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.Create a strong password policy and ensure that your system enforces this policy.Ensure users are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse local administrator account credentials across systems.Deny remote use of local admin credentials to log into domain systems.Do not allow accounts to be a local administrator on more than one system.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Monitor system and domain logs for abnormal credential access."
Cross-Site Scripting (XSS),"An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.",High,"Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.","SKILL:To achieve a redirection and use of less trusted source, an attacker can simply place a script in bulletin board, blog, wiki, or other user-generated content site that are echoed back to other client machines.:LEVEL:LowSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Session tokens for specific hostImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
Use of Known Kerberos Credentials,"An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.",Medium,"The system/application leverages Kerberos authentication.The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication for Kerberos service accounts.The system/application does not have a sound password policy that is being enforced for Kerberos service accounts.The system/application does not implement an effective password throttling mechanism for authenticating to Kerberos service accounts.The targeted network allows for network sniffing attacks to succeed.","SKILL:Once an adversary obtains a known Kerberos credential, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse Kerberos service account credentials across systems.Deny remote use of Kerberos service account credentials to log into domain systems.Do not allow Kerberos service accounts to be a local administrator on more than one system.Enable at least AES Kerberos encryption for tickets.Monitor system and domain logs for abnormal credential access."
Use of Known Operating System Credentials,"An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.",High,"The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.","SKILL:Once an adversary obtains a known credential, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the network.Create a strong password policy and ensure that your system enforces this policy.Ensure users are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse local administrator account credentials across systems.Deny remote use of local admin credentials to log into domain systems.Do not allow accounts to be a local administrator on more than one system.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Monitor system and domain logs for abnormal credential access."
SQL Injection,"This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.",High,"SQL queries used by the application to store, retrieve or modify data.User-controllable input that is not properly validated by the application as part of SQL queries.","SKILL:It is fairly simple for someone with basic SQL knowledge to perform SQL injection, in general. In certain instances, however, specific knowledge of the database employed may be required.:LEVEL:Low",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
Adversary in the Browser (AiTB),"An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints.",High,"The adversary must install or convince a user to install a Trojan.There are two components communicating with each other.An attacker is able to identify the nature and mechanism of communication between the two target components.Strong mutual authentication is not used between the two target components yielding opportunity for adversarial interposition.For browser pivoting, the SeDebugPrivilege and a high-integrity process must both exist to execute this attack.","SKILL:Tricking the victim into installing the Trojan is often the most difficult aspect of this attack. Afterwards, the remainder of this attack is fairly trivial.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Ensure software and applications are only downloaded from legitimate and reputable sources, in addition to conducting integrity checks on the downloaded component.Leverage anti-malware tools, which can detect Trojan Horse malware.Use strong, out-of-band mutual authentication to always fully authenticate both ends of any communications channel.Limit user permissions to prevent browser pivoting.Ensure browser sessions are regularly terminated and when their effective lifetime ends."
Exploitation of Transient Instruction Execution,"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.",Low,The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU.,"SKILL:Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations.:LEVEL:HighSKILL:Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,Implementation: DAWG (Dynamically Allocated Way Guard) - processor cache properly divided between different programs/processes that don't share resourcesImplementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tablesConfiguration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order executionConfiguration: Disable SharedArrayBuffer for Web BrowsersConfiguration: Disable Copy-on-Write between Cloud VMsConfiguration: Privilege Checks on Cache Flush InstructionsImplementation: Non-inclusive Cache Memories to prevent Flush+Reload Attacks
Server Side Request Forgery,"An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server’s internal network, or to external third parties. If successful, the adversary’s request will be made with the server’s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server’s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.",High,Server must be running a web application that processes HTTP requests.,"SKILL:The adversary will have to detect the vulnerability through an intermediary service or specify maliciously crafted URLs and analyze the server response.:LEVEL:MediumSKILL:The adversary will be required to access internal resources, extract information, or leverage the services running on the server to perform unauthorized actions such as traversing the local network or routing a reflected TCP DDoS through them.:LEVEL:High",SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption,"Handling incoming requests securely is the first line of action to mitigate this vulnerability. This can be done through URL validation.Further down the process flow, examining the response and verifying that it is as expected before sending would be another way to secure the server.Allowlist the DNS name or IP address of every service the web application is required to access is another effective security measure. This ensures the server cannot make external requests to arbitrary services.Requiring authentication for local services adds another layer of security between the adversary and internal services running on the server. By enforcing local authentication, an adversary will not gain access to all internal services only with access to the server.Enforce the usage of relevant URL schemas. By limiting requests be made only through HTTP or HTTPS, for example, attacks made through insecure schemas such as file://, ftp://, etc. can be prevented."
BlueSmacking,An adversary uses Bluetooth flooding to transfer large packets to Bluetooth enabled devices over the L2CAP protocol with the goal of creating a DoS. This attack must be carried out within close proximity to a Bluetooth enabled device.,Medium,The system/application has Bluetooth enabled.,"SKILL:An adversary only needs a Linux machine along with a Bluetooth adapter, which is extremely common.:LEVEL:Low",SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption,"Disable Bluetooth when not being used.When using Bluetooth, set it to hidden or non-discoverable mode."
Key Negotiation of Bluetooth Attack (KNOB),"An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",Low,Person in the Middle network setup.,SKILL:Ability to modify packets.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.
Alteration of a Software Update,"An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",Medium,An adversary would need to have penetrated an organization’s software update infrastructure including gaining access to components supporting the configuration management of software versions and updates related to the software maintenance of customer systems.,"SKILL:Skills required include the ability to infiltrate the organization’s software update infrastructure either from the Internet or from within the organization, including subcontractors, and be able to change software being delivered to customer/user systems in an undetected manner.:LEVEL:High",SCOPE:Access Control:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.Require elevated privileges for distribution of software and software updates."
Retrieve Data from Decommissioned Devices,"An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",Medium,"An adversary needs to have access to electronic data processing equipment being recycled or disposed of (e.g., laptops, servers) at a collection location and the ability to take control of it for the purpose of exploiting its content.","SKILL:An adversary may need the ability to mount printed circuit boards and target individual chips for exploitation.:LEVEL:HighSKILL:An adversary needs the technical skills required to extract solid state drives, hard disk drives, and other storage media to host on a compatible system or harness to gain access to digital content.:LEVEL:Medium",SCOPE:Accountability:TECHNICAL IMPACT:Bypass Protection Mechanism,"Backup device data before erasure to retain intellectual property and inside knowledge.Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.Use a secure erase software.Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.Physically destroy memory and SIM cards for mobile devices not intended to be reused.Ensure that the user account has been terminated or switched to a new device before destroying."
NoSQL Injection,"An adversary targets software that constructs NoSQL statements based on user input or with parameters vulnerable to operator replacement in order to achieve a variety of technical impacts such as escalating privileges, bypassing authentication, and/or executing code.",High,"Awareness of the technology stack being leveraged by the target application.NoSQL queries used by the application to store, retrieve, or modify data.User-controllable input that is not properly validated by the application as part of NoSQL queries.Target potentially susceptible to operator replacement attacks.","SKILL:For keyword and JavaScript injection attacks, it is fairly simple for someone with basic NoSQL knowledge to perform NoSQL injection, once the target's technology stack has been determined.:LEVEL:LowSKILL:For operator replacement attacks, the adversary must also have knowledge of HTTP Parameter Pollution attacks and how to conduct them.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as relevant NoSQL and JavaScript content. NoSQL-specific keywords, such as $ne, $eq or $gt for MongoDB, must be filtered in addition to characters such as a single-quote(') or semicolons (;) based on the context in which they appear. Validation should also extend to expected types.If possible, leverage safe APIs (e.g., PyMongo and Flask-PyMongo for Python and MongoDB) for queries as opposed to building queries from strings.Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.Use of custom error pages - Adversaries can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.Exercise the principle of Least Privilege with regards to application accounts to minimize damage if a NoSQL injection attack is successful.If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as mongo-sanitize.If using PHP with MongoDB, ensure all special query operators (starting with $) use single quotes to prevent operator replacement attacks.Additional mitigations will depend on the NoSQL database, API, and programming language leveraged by the application."
Subvert Code-signing Facilities,Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.,Low,"A framework-based language that supports code signing (such as, and most commonly, Java or .NET)Deployed code that has been signed by its authoring vendor, or a partner.The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated.","SKILL:Subverting code signing is not a trivial activity. Most code signing and verification schemes are based on use of cryptography and the attacker needs to have an understanding of these cryptographic operations in good detail. Additionally the attacker also needs to be aware of the way memory is assigned and accessed by the container since, often, the only way to subvert code signing would be to patch the code in memory. Finally, a knowledge of the platform specific mechanisms of signing and verifying code is a must.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable."
Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities,"An adversary may exploit vulnerable code (i.e., firmware or ROM) that is unpatchable. Unpatchable devices exist due to manufacturers intentionally or inadvertently designing devices incapable of updating their software. Additionally, with updatable devices, the manufacturer may decide not to support the device and stop making updates to their software.",Medium,"Awareness of the hardware being leveraged.Access to the hardware being leveraged, either physically or remotely.",SKILL:Knowledge of various wireless protocols to enable remote access to vulnerable devices:LEVEL:MediumSKILL:Ability to identify physical entry points such as debug interfaces if the device is not being accessed remotely:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means
Target Programs with Elevated Privileges,This attack targets programs running with elevated privileges. The adversary tries to leverage a vulnerability in the running program and get arbitrary code to execute with elevated privileges.,High,"The targeted program runs with elevated OS privileges.The targeted program accepts input data from the user or from another program.The targeted program is giving away information about itself. Before performing such attack, an eventual attacker may need to gather information about the services running on the host target. The more the host target is verbose about the services that are running (version number of application, etc.) the more information can be gather by an attacker.This attack often requires communicating with the host target services directly. For instance Telnet may be enough to communicate with the host target.","SKILL:An attacker can use a tool to scan and automatically launch an attack against known issues. A tool can also repeat a sequence of instructions and try to brute force the service on the host target, an example of that would be the flooding technique.:LEVEL:LowSKILL:More advanced attack may require knowledge of the protocol spoken by the host service.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Apply the principle of least privilege.Validate all untrusted data.Apply the latest patches.Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them.Avoid revealing information about your system (e.g., version of the program) to anonymous users.Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs.If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage.Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.Monitor traffic and resource usage and pay attention if resource exhaustion occurs.Protect your log file from unauthorized modification and log forging."
Spoof Open-Source Software Metadata,"An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.",Medium,Identification of a popular open-source component whose metadata is to be spoofed.,SKILL:Ability to spoof a variety of software metadata to convince victims the source is trusted.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Within package managers, look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source software from reputable hosting sites or package managers.Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.After downloading open-source software, ensure integrity values have not changed.Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
System Location Discovery,"An adversary collects information about the target system in an attempt to identify the system's geographical location. Information gathered could include keyboard layout, system language, and timezone. This information may benefit an adversary in confirming the desired target and/or tailoring further attacks.",High,The adversary must have some level of access to the system and have a basic understanding of the operating system in order to query the appropriate sources for relevant information.,SKILL:The adversary must know how to query various system sources of information respective of the system's operating system to obtain the relevant information.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation."
DHCP Spoofing,"An adversary masquerades as a legitimate Dynamic Host Configuration Protocol (DHCP) server by spoofing DHCP traffic, with the goal of redirecting network traffic or denying service to DHCP.",Low,The adversary must have access to a machine within the target LAN which can send DHCP offers to the target.,SKILL:The adversary must identify potential targets for DHCP Spoofing and craft network configurations to obtain the desired results.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read DataSCOPE:Integrity:SCOPE:Access Control:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption,Design: MAC-Forced ForwardingImplementation: Port Security and DHCP snoopingImplementation: Network-based Intrusion Detection Systems
Network Boundary Bridging,"An adversary which has gained elevated access to network boundary devices may use these devices to create a channel to bridge trusted and untrusted networks. Boundary devices do not necessarily have to be on the network’s edge, but rather must serve to segment portions of the target network the adversary wishes to cross into.",Medium,The adversary must have control of a network boundary device.,SKILL:The adversary must understand how to manage the target network device to create or edit policies which will bridge networks.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Hide Activities,"Design: Ensure network devices are storing credentials in encrypted storesDesign: Follow the principle of least privilege and restrict administrative duties to as few accounts as possible. Ensure these privileged accounts are secured with strong credentials which do not overlap with other network devices.Configuration: When possible, configure network boundary devices to use MFA.Configuration: Change the default configuration for network devices to harden their security profiles. Default configurations are often enabled with insecure features to allow ease of installation and management. However, these configurations can be easily discovered and exploited by adversaries.Implementation: Perform integrity checks on audit logs for network device management and review them to identify abnormalities in configurations.Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering."
Browser in the Middle (BiTM),"An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.",Medium,"The adversary must create a convincing web client to establish the connection. The victim then needs to be lured onto the adversary's webpage. In addition, the victim's machine must not use local authentication APIs, a hardware token, or a Trusted Platform Module (TPM) to authenticate.",SKILLLEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges:LIKELIHOOD:HighSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data:LIKELIHOOD:HighSCOPE:Integrity:TECHNICAL IMPACT:Modify Data:LIKELIHOOD:Medium,"Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel"
User-Controlled Filename,"An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",High,The victim must trust the name and locale of user controlled filenames.,"SKILL:To achieve a redirection and use of less trusted source, an attacker can simply edit data that the host uses to build the filename:LEVEL:LowSKILL:Deploying a malicious look-a-like site (such as a site masquerading as a bank or online auction site) that the user enters their authentication data into.:LEVEL:MediumSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Availability:TECHNICAL IMPACT:Alter Execution LogicSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Design: Use browser technologies that do not allow client side scripting.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Scan dynamically generated content against validation specification
Manipulating Writeable Configuration Files,"Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.",High,Configuration files must be modifiable by the attacker,"SKILL:To identify vulnerable configuration files, and understand how to manipulate servers and erase forensic evidence:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Backup copies of all configuration filesImplementation: Integrity monitoring for configuration filesImplementation: Enforce audit logging on code and configuration promotion procedures.Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD"
Manipulating User-Controlled Variables,"This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",High,A variable consumed by the application server is exposed to the client.A variable consumed by the application server can be overwritten by the user.The application server trusts user supplied data to compute business logic.The application server does not perform proper input validation.,SKILL:The malicious user can easily try some well-known global variables and find one which matches.:LEVEL:LowSKILL:The adversary can use automated tools to probe for variables that they can control.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.Use encapsulation when declaring your variables. This is to lower the exposure of your variables.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program."
Forceful Browsing,"An attacker employs forceful browsing (direct URL entry) to access portions of a website that are otherwise unreachable. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.",High,The forcibly browseable pages or accessible resources must be discoverable and improperly protected.,SKILL:Forcibly browseable pages can be discovered by using a number of automated tools. Doing the same manually is tedious but by no means difficult.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context."
OS Command Injection,"In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",High,User controllable input used as part of commands to the underlying operating system.,"SKILL:The attacker needs to have knowledge of not only the application to exploit but also the exact nature of commands that pertain to the target operating system. This may involve, though not always, knowledge of specific assembly commands for the platform.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commandsAll application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them."
Pharming,"A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",High,Vulnerable DNS software or improperly protected hosts file or router that can be poisonedA website that handles sensitive information but does not use a secure connection and a certificate that is valid is also prone to pharming,"SKILL:The attacker needs to be able to poison the resolver - DNS entries or local hosts file or router entry pointing to a trusted DNS server - in order to successfully carry out a pharming attack. Setting up a fake website, identical to the targeted one, does not require special skills.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"All sensitive information must be handled over a secure connection.Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority."
Reflection Attack in Authentication Protocol,"An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",High,"The attacker must have direct access to the target server in order to successfully mount a reflection attack. An intermediate entity, such as a router or proxy, that handles these exchanges on behalf of the attacker inhibits the attackers' ability to attack the authentication protocol.",SKILL:The attacker needs to have knowledge of observing the protocol exchange and managing the required connections in order to issue and respond to challenges:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any furtherThe use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol"
Cryptanalysis,"Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).",Low,The target software utilizes some sort of cryptographic algorithm.An underlying weaknesses exists either in the cryptographic algorithm used or in the way that it was applied to a particular chunk of plaintext.The encryption algorithm is known to the attacker.An attacker has access to the ciphertext.,SKILL:Cryptanalysis generally requires a very significant level of understanding of mathematics and computation.:LEVEL:High,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:In most cases, if cryptanalysis is successful at all, an adversary will not be able to decrypt the entire message, but instead will only be able to deduce some information about the plaintext. However, that may be sufficient for an adversary, depending on the context of the attack.",Use proven cryptographic algorithms with recommended key sizes.Ensure that the algorithms are used properly. That means: 1. Not rolling out your own crypto; Use proven algorithms and implementations. 2. Choosing initialization vectors with sufficiently random numbers 3. Generating key material using good sources of randomness and avoiding known weak keys 4. Using proven protocols and their implementations. 5. Picking the most appropriate cryptographic algorithm for your usage context and data
Phishing,Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.,High,An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.,"SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind."
Buffer Overflow via Environment Variables,"This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",High,The application uses environment variables.An environment variable exposed to the user is vulnerable to a buffer overflow.The vulnerable environment variable uses untrusted data.Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.,SKILL:An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Do not expose environment variable to the user.Do not use untrusted data in your environment variables.Use a language or compiler that performs automatic bounds checkingThere are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.
Server Side Include (SSI) Injection,"An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",High,A web server that supports server side includes and has them enabledUser controllable input that can carry include directives to the web server,"SKILL:The attacker needs to be aware of SSI technology, determine the nature of injection and be able to craft input that results in the SSI directives being executed.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need themAll user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directiveServer Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead"
Session Sidejacking,"Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.",High,"An attacker and the victim are both using the same WiFi network.The victim has an active session with a target system.The victim is not using a secure channel to communicate with the target system (e.g. SSL, VPN, etc.)The victim initiated communication with a target system that requires transfer of the session token or the target application uses AJAX and thereby periodically rings home asynchronously using the session token",SKILL:Easy to use tools exist to automate this attack.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks."
HTTP Request Splitting,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",Medium,"An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.HTTP headers capable of being user-manipulated.HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.
Cross Site Tracing,Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to a destination system's web server.,Medium,HTTP TRACE is enabled on the web serverThe destination system is susceptible to XSS or an adversary can leverage some other weakness to bypass the same origin policyScripting is enabled in the client's browserHTTP is used as the communication protocol between the server and the client,SKILL:Understanding of the HTTP protocol and an ability to craft a malicious script:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.Patch web browser against known security origin policy bypass exploits.
Command Line Execution through SQL Injection,"An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.",Low,The application does not properly validate data before storing in the databaseBackend application implicitly trusts the data stored in the databaseMalicious data is used on the backend as a command line argument,"SKILL:The attacker most likely has to be familiar with the internal functionality of the system to launch this attack. Without that knowledge, there are not many feedback mechanisms to give an attacker the indication of how to perform command injection or whether the attack is succeeding.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Disable MSSQL xp_cmdshell directive on the databaseProperly validate the data (syntactically and semantically) before writing it to the database.Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).
Object Relational Mapping Injection,"An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.",Low,"An application uses data access layer generated by an ORM tool or frameworkAn application uses user supplied data in queries executed against the databaseThe separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework",SKILL:Knowledge of general SQL injection techniques and subtleties of the ORM framework is needed:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the frameworkEnsure to keep up to date with security relevant updates to the persistence framework used within your application.
Cause Web Server Misclassification,"An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.",Medium,Web server software must rely on file name or file extension for processing.The attacker must be able to make HTTP requests to the web server.,"SKILL:To modify file name or file extension:LEVEL:LowSKILL:To use misclassification to force the Web server to disclose configuration information, source, or binary data:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Implementation: Server routines should be determined by content not determined by filename or file extension.
SQL Injection through SOAP Parameter Tampering,"An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.",High,SOAP messages are used as a communication mechanism in the systemSOAP parameters are not properly validated at the service providerThe service provider does not properly utilize parameter binding when building SQL queries,SKILL:If the attacker is able to gain good understanding of the system's database schema:LEVEL:MediumSKILL:If the attacker has to perform Blind SQL Injection:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Properly validate and sanitize/reject user input at the service provider.Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly."
Directory Indexing,"An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",High,The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.The adversary must be able to control the path that is requested of the target.The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.The server version or patch level must not inherently prevent known directory listing attacks from working.,SKILL:To issue the request to URL without given a specific file name:LEVEL:LowSKILL:To bypass the access control of the directory of listings:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information Leakage,"1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message."
Subverting Environment Variable Values,The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.,High,An environment variable is accessible to the user.An environment variable used by the application can be tainted with user supplied data.Input data used in an environment variable is not validated properly.The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an adversary may attempt to manipulate that variable.,"SKILL:In a web based scenario, the client controls the data that it submitted to the server. So anybody can try to send malicious data and try to bypass the authentication mechanism.:LEVEL:LowSKILL:Some more advanced attacks may require knowledge about protocols and probing technique which help controlling a variable. The malicious user may try to understand the authentication mechanism in order to defeat it.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Accountability:TECHNICAL IMPACT:Hide Activities,Protect environment variables against unauthorized read and write access.Protect the configuration files which contain environment variables against illegitimate read and write access.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.
Symlink Attack,"An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.",Low,The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The adversary must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear.,SKILL:To create symlinks:LEVEL:LowSKILL:To identify the files and create the symlinks during the file operation time window:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information LeakageSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions."
Relative Path Traversal,"An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or ) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.",High,"The target application must accept a string as user input, fail to sanitize combinations of characters in the input that have a special meaning in the context of path navigation, and insert the user-supplied string into path navigation commands.",SKILL:To inject the malicious payload in a web page:LEVEL:LowSKILL:To bypass non trivial filters in the application:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcementImplementation: Perform input validation for all remote content, including remote and user-generated content.Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.Implementation: Prefer working without user input when using file system callsImplementation: Use indirect references rather than actual file names.Implementation: Use possible permissions on file access when developing and deploying web applications."
Client-side Injection-induced Buffer Overflow,"This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads.",Medium,The targeted client software communicates with an external server.The targeted client software has a buffer overflow vulnerability.,"SKILL:To achieve a denial of service, an attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap requires a more in-depth knowledge and higher skill level.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"The client software should not install untrusted code from a non-authenticated server.The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.Perform input validation for length of buffer inputs.Use a language or compiler that performs automatic bounds checking.Use an abstraction library to abstract away risky APIs. Not a complete solution.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Ensure all buffer uses are consistently bounds-checked.Use OS-level preventative functionality. Not a complete solution."
XML Ping of the Death,"An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",Low,The target must receive and process XML transactions.,SKILL:To send small XML messages:LEVEL:LowSKILL:To use distributed network to launch the attack:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:DoS: resource consumption (other),Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.Implementation: Provide for network flow control and traffic shaping to control access to the resources.
Dictionary-based Password Attack,"An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern. Dictionary Attacks differ from similar attacks such as Password Spraying (CAPEC-565) and Credential Stuffing (CAPEC-600), since they leverage unknown username/password combinations and don't care about inducing account lockouts.",Medium,The system uses one factor password based authentication.The system does not have a sound password policy that is being enforced.The system does not implement an effective password throttling mechanism.,SKILL:A variety of password cracking tools and dictionaries are available to launch this type of an attack.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Create a strong password policy and ensure that your system enforces this policy.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Leverage multi-factor authentication for all authentication services.
Spear Phishing,"An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.",High,None. Any user can be targeted by a Spear Phishing attack.,"SKILL:Spear phishing attacks require specific knowledge of the victims being targeted, such as which bank is being used by the victims, or websites they commonly log into (Google, Facebook, etc).:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information LeakageSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges:NOTE:Privilege EscalationSCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:Data Modification,"Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind."
Mobile Phishing,"An adversary targets mobile phone users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Mobile Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a text or SMS message, rather than email. The user is enticed to provide information or visit a compromised web site via this message. Apart from the manner in which the attack is initiated, the attack proceeds as a standard Phishing attack.",High,An adversary needs mobile phone numbers to initiate contact with the victim.An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.,"SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind."
Web Application Fingerprinting,"An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",High,"Any web application can be fingerprinted. However, some configuration choices can limit the useful information an attacker may collect during a fingerprinting attack.","SKILL:Attacker knows how to send HTTP request, SQL query to a web application.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage,Implementation: Obfuscate server fields of HTTP response.Implementation: Hide inner ordering of HTTP response header.Implementation: Customizing HTTP error codes such as 404 or 500.Implementation: Hide URL file extension.Implementation: Hide HTTP response header software information filed.Implementation: Hide cookie's software information filed.Implementation: Appropriately deal with error messages.Implementation: Obfuscate database type in Database API's error message.
Cross-Site Flashing,"An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.",Medium,The targeted Flash application must reference external URLs and the locations thus referenced must be controllable through parameters. The Flash application must fail to sanitize such parameters against malicious manipulation. The victim must follow a crafted link created by the attacker.,"SKILL:knowledge of Flash internals, parameters and remote referencing.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Implementation: Only allow known URL to be included as remote flash movies in a flash applicationConfiguration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.
XSS Targeting Non-Script Elements,"This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",High,The target client software must allow the execution of scripts generated by remote hosts.,"SKILL:To achieve a redirection and use of less trusted source, an adversary can simply edit content such as XML payload or HTML files that are sent to client machine.:LEVEL:LowSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed."
PHP Remote File Inclusion,"In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized include or require call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.",High,"Target application server must allow remote files to be included in the require, include, etc. PHP directivesThe adversary must have the ability to make HTTP requests to the target web application.",SKILL:To inject the malicious payload in a web page:LEVEL:LowSKILL:To bypass filters in the application:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Implementation: Perform input validation for all remote content, including remote and user-generated contentImplementation: Only allow known files to be included (allowlist)Implementation: Make use of indirect references passed in URL parameters instead of file namesConfiguration: Ensure that remote scripts cannot be include in the include or require PHP directives"
Exponential Data Expansion,"An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",High,This type of attack requires that the target must receive input but either fail to provide an upper limit for entity expansion or provide a limit that is so large that it does not preclude significant resource consumption.,SKILL:Ability to craft nested data expansion messages.:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources."
XSS Using Alternate Syntax,"An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the script tag using the alternate forms of Script or ScRiPt may bypass filters where script is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",High,Target client software must allow scripting such as JavaScript.,SKILL:To inject the malicious payload in a web page:LEVEL:LowSKILL:To bypass non trivial filters in the application:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.Implementation: Perform input validation for all remote content, including remote and user-generated contentImplementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
Serialized Data External Linking,"An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.",High,The target must follow external data references without validating the validity of the reference target.,SKILL:To send serialized data messages with maliciously crafted schema.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Configure the serialized data processor to only retrieve external entities from trusted sources.
Fuzzing for application mapping,"An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.",High,The target application must fail to sanitize incoming messages adequately before processing.,"SKILL:Although fuzzing parameters is not difficult, and often possible with automated fuzzing tools, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage,"Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.Implementation: Obfuscate server fields of HTTP response.Implementation: Hide inner ordering of HTTP response header.Implementation: Customizing HTTP error codes such as 404 or 500.Implementation: Hide HTTP response header software information filed.Implementation: Hide cookie's software information filed.Implementation: Obfuscate database type in Database API's error message."
iFrame Overlay,In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system.,Medium,The victim is communicating with the target application via a web based UI and not a thick client. The victim's browser security policies allow iFrames. The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser). The victim has an active session with the target system. The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system.,SKILL:Crafting the proper malicious site and luring the victim to this site is not a trivial task.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Configuration: Disable iFrames in the Web browser.Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames."
Filter Failure through Buffer Overflow,"In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).",High,Ability to control the length of data passed to an active filter.,SKILL:An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.Pre-design: Use a language or compiler that performs automatic bounds checking.Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Operational: Use OS-level preventative functionality. Not a complete solution.Design: Use an abstraction library to abstract away risky APIs. Not a complete solution."
XSS Targeting URI Placeholders,"An attack of this type exploits the ability of most browsers to interpret data, javascript or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.",High,Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme.,SKILL:To inject the malicious payload in a web page:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcement.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.Implementation: Perform input validation for all remote content, including remote and user-generated contentImplementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
Leveraging Race Conditions via Symbolic Links,"This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",Medium,The attacker is able to create Symlink links on the target host.Tainted data from the attacker is used and copied to temporary files.The target host does insecure temporary file creation.,"SKILL:This attack is sophisticated because the attacker has to overcome a few challenges such as creating symlinks on the target host during a precise timing, inserting malicious data in the temporary file and have knowledge about the temporary files created (file name and function which creates them).:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.Follow the principle of least privilege when assigning access rights to files.Ensure good compartmentalization in the system to provide protected areas that can be trusted."
HTTP Response Smuggling,"An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server). See CanPrecede relationships for possible consequences.",Medium,"A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).Differences in the way the two HTTP agents parse and interpret HTTP responses and its headers.HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid charactersConfiguration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
DNS Rebinding,"An adversary serves content whose IP address is resolved by a DNS server that the adversary controls. After initial contact by a web browser (or similar client), the adversary changes the IP address to which its name resolves, to an address within the target organization that is not publicly accessible. This allows the web browser to examine this internal address on behalf of the adversary.",High,The target browser must access content server from the adversary controlled DNS name. Web advertisements are often used for this purpose. The target browser must honor the TTL value returned by the adversary and re-resolve the adversary's DNS name after initial contact.,SKILL:Setup DNS server and the adversary's web server. Write a malicious script to allow the victim to connect to the web server.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response. Unfortunately, this is incompatible with the design of some legitimate sites.Implementation: Reject HTTP request with a malicious Host header.Implementation: Employ DNS resolvers that prevent external names from resolving to internal addresses."
ICMP Echo Request Ping,"An adversary sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss.",Medium,The ability to send an ICMP type 8 query (Echo Request) to a remote target and receive an ICMP type 0 message (ICMP Echo Reply) in response. Any firewalls or access control lists between the sender and receiver must allow ICMP Type 8 and ICMP Type 0 messages in order for a ping operation to succeed.,SKILL:The adversary needs to know certain linux commands for this type of attack.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:A successful attack of this kind can identify open ports and available services on a system.,"Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers."
Using Leading 'Ghost' Character Sequences to Bypass Input Filters,"Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ghost characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",Medium,The targeted API must ignore the leading ghost characters that are used to get past the filters for the semantics to be the same.,"SKILL:The ability to make an API request, and knowledge of ghost characters that will not be filtered by any input validation. These ghost characters must be known to not affect the way in which the request will be interpreted.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Use an allowlist rather than a denylist input validation.Canonicalize all data prior to validation.Take an iterative approach to input validation (defense in depth).
Accessing/Intercepting/Modifying HTTP Cookies,"This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.",High,"Target server software must be a HTTP daemon that relies on cookies.The cookies must contain sensitive information.The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply.","SKILL:To overwrite session cookie data, and submit targeted attacks via HTTP:LEVEL:LowSKILL:Exploiting a remote buffer overflow generated by attack:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Use input validation for cookiesDesign: Generate and validate MAC for cookiesImplementation: Use SSL/TLS to protect cookie in transitImplementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software."
XSS Through HTTP Query Strings,An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser.,High,Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation.,SKILL:To place malicious payload on server via HTTP:LEVEL:LowSKILL:Exploiting any information gathered by HTTP Query on script host:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content, including remote and user-generated contentImplementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Session tokens for specific hostImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode"
HTTP Request Smuggling,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",Medium,"An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid charactersConfiguration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
HTTP Response Splitting,"An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site. See CanPrecede relationships for possible consequences.",Medium,"A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.HTTP headers capable of being user-manipulated.HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.
Leverage Executable Code in Non-Executable Files,An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.,High,The attacker must have the ability to modify non-executable files consumed by the target software.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute."
Leveraging/Manipulating Configuration File Search Paths,"This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",High,The attacker must be able to write to redirect search paths on the victim host.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the programImplementation: Host integrity monitoring"
Using Alternative IP Address Encodings,"This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",Medium,The target software must fail to anticipate all of the possible valid encodings of an IP/web address.The adversary must have the ability to communicate with the server.,SKILL:The adversary has only to try IP address format combinations.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Default deny access control policiesDesign: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)Implementation: Perform input validation for all remote content."
Using Meta-characters in E-mail Headers to Inject Malicious Payloads,"This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",High,"This attack targets most widely deployed feature rich email applications, including web based email programs.",SKILL:To distribute email:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Design: Perform validation on email header dataImplementation: Implement email filtering solutions on mail server or on MTA, relay server.Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names"
Influence Perception of Reciprocation,"An adversary uses a social engineering techniques to produce a sense of obligation in the target to perform a certain action or concede some sensitive or key piece of information. Obligation has to do with actions one feels they need to take due to some sort of social, legal, or moral requirement, duty, contract, or promise. There are various techniques for fostering a sense of obligation to reciprocate or concede during ordinary modes of communication. One method is to compliment the target, and follow up the compliment with a question. If performed correctly the target may volunteer a key piece of information, sometimes involuntarily.",Medium,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that influence the perception of the target can result in a wide variety of consequences and negatively affect potentially the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
MIME Conversion,An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.,High,"The target system uses a mail server.Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system.",SKILL:It may be trivial to cause a DoS via this attack pattern:LEVEL:LowSKILL:Causing arbitrary code to execute on the target system.:LEVEL:High,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Stay up to date with third party vendor patchesDisable the 7 to 8 bit conversion. This can be done by removing the F=9 flag from all Mailer specifications in the sendmail.cf file. For example, a sendmail.cf file with these changes applied should look similar to (depending on your system and configuration): Mlocal, P=/usr/libexec/mail.local, F=lsDFMAw5:/|@qrmn, S=10/30, R=20/40,T=DNS/RFC822/X-Unix,A=mail -d $u Mprog, P=/bin/sh, F=lsDFMoqeu, S=10/30, R=20/40,D=$z:/,T=X-Unix,A=sh -c $u This can be achieved for the Mlocal and Mprog Mailers by modifying the .mc file to include the following lines: define(`LOCAL_MAILER_FLAGS',ifdef(`LOCAL_MAILER_FLAGS',`translit(LOCAL_MAILER_FLAGS, `9')',`rmn')) define(`LOCAL_SHELL_FLAGS',ifdef(`LOCAL_SHELL_FLAGS',`translit(LOCAL_SHELL_FLAGS, `9')',`eu')) and then rebuilding the sendmail.cf file using m4(1). From Exploiting Software, please see reference below.Use the sendmail restricted shell program (smrsh)Use mail.local"
Influence Perception of Scarcity,"The adversary leverages a perception of scarcity to persuade the target to perform an action or divulge information that is advantageous to the adversary. By conveying a perception of scarcity, or a situation of limited supply, the adversary aims to create a sense of urgency in the context of a target's decision-making process.",High,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence Perception of Authority,"An adversary uses a social engineering technique to convey a sense of authority that motivates the target to reveal specific information or take specific action. There are various techniques for producing a sense of authority during ordinary modes of communication. One common method is impersonation. By impersonating someone with a position of power within an organization, an adversary may motivate the target individual to reveal some piece of sensitive information or perform an action that benefits the adversary.",High,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence Perception of Commitment and Consistency,"An adversary uses social engineering to convince the target to do minor tasks as opposed to larger actions. After complying with a request, individuals are more likely to agree to subsequent requests that are similar in type and required effort.",High,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.Individuals should avoid complying with suspicious requests."
Influence Perception of Liking,"The adversary influences the target's actions by building a relationship where the target has a liking to the adversary. People are more likely to be influenced by people of whom they are fond, so the adversary attempts to ingratiate themself with the target via actions, appearance, or a combination thereof.",Medium,The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the types of things that the target likes.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of liking can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence Perception of Consensus or Social Proof,"The adversary influences the target's actions by leveraging the inherent human nature to assume behavior of others is appropriate. In situations of uncertainty, people tend to behave in ways they see others behaving. The adversary convinces the target of adopting behavior or actions that is advantageous to the adversary.",Low,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of liking can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Exploiting Multiple Input Interpretation Layers,"An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a layer of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",Medium,User input is used to construct a command to be executed on the target system or as part of the file name.Multiple parser passes are performed on the data supplied by the user.,"SKILL:Knowledge of various escaping schemes, such as URL escape encoding and XML escape characters.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.
Overflow Binary Resource File,"An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",High,Target software processes binary resource files.Target software contains a buffer overflow vulnerability reachable through input from a user-controllable binary resource file.,"SKILL:To modify file, deceive client into downloading, locate and exploit remote stack or heap vulnerability:LEVEL:Medium",SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Perform appropriate bounds checking on all buffers.Design: Enforce principle of least privilegeDesign: Static code analysisImplementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processesImplementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host."
Buffer Overflow via Symbolic Links,"This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",High,The adversary can create symbolic link on the target host.The target host does not perform correct boundary checking while consuming data from a resources.,SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.Pay attention to the resource pointed to by your symlink links (See attack pattern named Forced Symlink race), they can be replaced by malicious resources.Always check the size of the input data before copying to a buffer.Use a language or compiler that performs automatic bounds checking.Use an abstraction library to abstract away risky APIs. Not a complete solution.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution."
Creating a Rogue Certification Authority Certificate,"An adversary exploits a weakness resulting from using a hashing algorithm with weak collision resistance to generate certificate signing requests (CSR) that contain collision blocks in their to be signed parts. The adversary submits one CSR to be signed by a trusted certificate authority then uses the signed blob to make a second certificate appear signed by said certificate authority. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority.",Medium,Certification Authority is using a hash function with insufficient collision resistance to generate the certificate hash to be signed,SKILL:Understanding of how to force a hash collision in X.509 certificates:LEVEL:HighSKILL:An attacker must be able to craft two X.509 certificates that produce the same hash value:LEVEL:HighSKILL:Knowledge needed to set up a certification authority:LEVEL:Medium,SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges,Certification Authorities need to stop using deprecated or cryptographically insecure hashing algorithms to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512.
Overflow Variables and Tags,"This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The adversary crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.",High,The target program consumes user-controllable data in the form of tags or variables.The target program does not perform sufficient boundary checking.,SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Use a language or compiler that performs automatic bounds checking.Use an abstraction library to abstract away risky APIs. Not a complete solution.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution.Do not trust input data from user. Validate all user input."
Buffer Overflow via Parameter Expansion,"In this attack, the target software is given input that the adversary knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.",Medium,"The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is).","SKILL:Finding this particular buffer overflow may not be trivial. Also, stack and especially heap based buffer overflows require a lot of knowledge if the intended goal is arbitrary code execution. Not only that the adversary needs to write the shell code to accomplish their goals, but the adversary also needs to find a way to get the program execution to jump to the planted shell code. There also needs to be sufficient room for the payload. So not every buffer overflow will be exploitable, even by a skilled adversary.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system
Blue Boxing,"This type of attack against older telephone switches and trunks has been around for decades. A tone is sent by an adversary to impersonate a supervisor signal which has the effect of rerouting or usurping command of the line. While the US infrastructure proper may not contain widespread vulnerabilities to this type of attack, many companies are connected globally through call centers and business process outsourcing. These international systems may be operated in countries which have not upgraded Telco infrastructure and so are vulnerable to Blue boxing. Blue boxing is a result of failure on the part of the system to enforce strong authorization for administrative functions. While the infrastructure is different than standard current applications like web applications, there are historical lessons to be learned to upgrade the access control for administrative functions. This attack pattern is included in CAPEC for historical purposes.",Medium,System must use weak authentication mechanisms for administrative functions.,"SKILL:Given a vulnerable phone system, the attackers' technical vector relies on attacks that are well documented in cracker 'zines and have been around for decades.:LEVEL:Low",SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Implementation: Upgrade phone lines. Note this may be prohibitively expensiveUse strong access control such as two factor access control for administrative access to the switch
Shoulder Surfing,"In a shoulder surfing attack, an adversary observes an unaware individual's keystrokes, screen content, or conversations with the goal of obtaining sensitive information. One motive for this attack is to obtain sensitive information about the target for financial, personal, political, or other gains. From an insider threat perspective, an additional motive could be to obtain system/application credentials or cryptographic keys. Shoulder surfing attacks are accomplished by observing the content over the victim's shoulder, as implied by the name of this attack.",High,"The adversary typically requires physical proximity to the target's environment, in order to observe their screen or conversation. This may not be the case if the adversary is able to record the target and obtain sensitive information upon review of the recording.","SKILL:In most cases, an adversary can simply observe and retain the desired information.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:LIKELIHOOD:High,"Be mindful of your surroundings when discussing or viewing sensitive information in public areas.Pertaining to insider threats, ensure that sensitive information is not displayed to nor discussed around individuals without need-to-know access to said information."
Poison Web Service Registry,"SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.",High,The attacker must be able to write to resources or redirect access to the service registry.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: Enforce principle of least privilegeDesign: Harden registry server and file access permissionsImplementation: Implement communications to and from the registry using secure protocols
Embedding NULL Bytes,An adversary embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).,High,The program does not properly handle postfix NULL terminators,SKILL:Directory traversal:LEVEL:MediumSKILL:Execution of arbitrary code:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.
"Postfix, Null Terminate, and Backslash","If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an adversary to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.",High,Null terminators are not properly handled by the filter.,"SKILL:An adversary needs to understand alternate encodings, what the filter looks for and the data format acceptable to the target API:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.
Incomplete Data Deletion in a Multi-Tenant Environment,"An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",Low,The cloud provider must not assuredly delete part or all of the sensitive data for which they are responsible.The adversary must have the ability to interact with the system.,SKILL:The adversary requires the ability to traverse directory structure.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful attack that probes application memory will compromise the confidentiality of that data.,Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.Deletion of data should be completed promptly when requested.
Rainbow Table Password Cracking,"An attacker gets access to the database table where hashes of passwords are stored. They then use a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.",Medium,"Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).The system uses one factor password based authentication.",SKILL:A variety of password cracking tools are available that can leverage a rainbow table. The more difficult part is to obtain the password hash(es) in the first place.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it."
Password Spraying,"In a Password Spraying attack, an adversary tries a small list (e.g. 3-5) of common or expected passwords, often matching the target's complexity policy, against a known list of user accounts to gain valid credentials. The adversary tries a particular password for each user account, before moving onto the next password in the list. This approach assists the adversary in remaining undetected by avoiding rapid or frequent account lockouts. The adversary may then reattempt the process with additional passwords, once enough time has passed to prevent inducing a lockout.",High,The system/application uses one factor password based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts on the target system/application.,SKILL:A Password Spraying attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Create a strong password policy and ensure that your system enforces this policy.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.
Utilizing REST's Trust in the System Resource to Obtain Sensitive Data,This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.,Medium,Opportunity to intercept must exist beyond the point where SSL is terminated.The adversary must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.,SKILL:To insert a network sniffer or other listener into the communication stream:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Implementation: Implement message level security such as HMAC in the HTTP communicationDesign: Utilize defense in depth, do not rely on a single security mechanism like SSLDesign: Enforce principle of least privilege"
Restful Privilege Elevation,"An adversary identifies a Rest HTTP (Get, Put, Delete) style permission method allowing them to perform various malicious actions upon server data due to lack of access control mechanisms implemented within the application service accepting HTTP messages.",High,The attacker needs to be able to identify HTTP Get URLs. The Get methods must be set to call applications that perform operations other than get such as update and delete.,SKILL:It is relatively straightforward to identify an HTTP Get method that changes state on the server side and executes against an over-privileged system interface:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Design: Enforce principle of least privilegeImplementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server sideImplementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose
DOM-Based XSS,"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.",High,An application that leverages a client-side web browser with scripting enabled.An application that manipulates the DOM via client-side scripting.An application that failS to adequately sanitize or encode untrusted input.,SKILL:Requires the ability to write scripts of some complexity and to inject it through user controlled fields in the system.:LEVEL:Medium,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful DOM-based XSS attack can enable an adversary to exfiltrate sensitive information from the application.SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful DOM-based XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful DOM-based XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful DOM-based XSS attack can allow an adversary to tamper with application data.",Use browser technologies that do not allow client-side scripting.Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.Ensure that all user-supplied input is validated before use.
Session Credential Falsification through Prediction,This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.,High,"The target host uses session IDs to keep track of the users.Session IDs are used to control access to resources.The session IDs used by the target host are predictable. For example, the session IDs are generated using predictable information (e.g., time).",SKILL:There are tools to brute force session ID. Those tools require a low level of knowledge.:LEVEL:LowSKILL:Predicting Session ID may require more computation work which uses advanced analysis such as statistical analysis.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a strong source of randomness to generate a session ID.Use adequate length session IDsDo not use information available to the user in order to generate session ID (e.g., time).Ideas for creating random numbers are offered by Eastlake [RFC1750]Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format."
Reflected XSS,This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is reflected off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.,High,An application that leverages a client-side web browser with scripting enabled.An application that fail to adequately sanitize or encode untrusted input.,SKILL:Requires the ability to write malicious scripts and embed them into HTTP requests.:LEVEL:Medium,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful Reflected XSS attack can enable an adversary to exfiltrate sensitive information from the application.SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful Reflected XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful Reflected attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful Reflected attack can allow an adversary to tamper with application data.","Use browser technologies that do not allow client-side scripting.Utilize strict type, character, and encoding enforcement.Ensure that all user-supplied input is validated before use."
Stored XSS,An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently stored within the data storage of a vulnerable web application as valid input.,High,An application that leverages a client-side web browser with scripting enabled.An application that fails to adequately sanitize or encode untrusted input.An application that stores information provided by the user in data storage of some kind.,SKILL:Requires the ability to write scripts of varying complexity and to inject them through user controlled fields within the application.:LEVEL:Medium,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful Stored XSS attack can enable an adversary to exfiltrate sensitive information from the application.SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful Stored XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful Stored XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful Stored XSS attack can allow an adversary to tamper with application data.","Use browser technologies that do not allow client-side scripting.Utilize strict type, character, and encoding enforcement.Ensure that all user-supplied input is validated before being stored."
Reusing Session IDs (aka Session Replay),This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.,High,The target host uses session IDs to keep track of the users.Session IDs are used to control access to resources.The session IDs used by the target host are not well protected from session theft.,"SKILL:If an attacker can steal a valid session ID, they can then try to be authenticated with that stolen session ID.:LEVEL:LowSKILL:More sophisticated attack can be used to hijack a valid session from a user and spoof a legitimate user by reusing their valid session ID.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Always invalidate a session ID after the user logout.Setup a session time out for the session IDs.Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate adversary in the middle attacks (CAPEC-94).Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.Encrypt the session data associated with the session ID.Use multifactor authentication."
Wi-Fi Jamming,"In this attack scenario, the attacker actively transmits on the Wi-Fi channel to prevent users from transmitting or receiving data from the targeted Wi-Fi network. There are several known techniques to perform this attack – for example: the attacker may flood the Wi-Fi access point (e.g. the retransmission device) with deauthentication frames. Another method is to transmit high levels of noise on the RF band used by the Wi-Fi network.",Medium,Lack of anti-jam features in 802.11Lack of authentication on deauthentication/disassociation packets on 802.11-based networks,SKILL:This attack can be performed by low capability attackers with freely available tools. Commercial tools are also available that can target select networks or all WiFi networks within a range of several miles.:LEVEL:Low,"SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:A successful attack will deny the availability of the Wi-fi network to authorized users.SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:The attacker's goal is to prevent users from accessing the wireless network. Denying connectivity to the wireless network prevents the user from being able to transmit or receive any data, which also prevents VOIP calls, however this attack poses no threat to data confidentiality.","Countermeasures have been proposed for both disassociation flooding and RF jamming, however these countermeasures are not standardized and would need to be supported on both the retransmission device and the handset in order to be effective. Commercial products are not currently available that support jamming countermeasures for Wi-Fi."
Session Fixation,"The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.",Medium,Session identifiers that remain unchanged when the privilege levels change.Permissive session management mechanism that accepts random user-generated session identifiersPredictable session identifiers,SKILL:Only basic skills are required to determine and fixate session identifiers in a user's browser. Subsequent attacks may require greater skill levels depending on the attackers' motives.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult."
BitSquatting,"An adversary registers a domain name one bit different than a trusted domain. A BitSquatting attack leverages random errors in memory to direct Internet traffic to adversary-controlled destinations. BitSquatting requires no exploitation or complicated reverse engineering, and is operating system and architecture agnostic. Experimental observations show that BitSquatting popular websites could redirect non-trivial amounts of Internet traffic to a malicious entity.",Low,"An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.",SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low,"SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful BitSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.","Authenticate all servers and perform redundant checks when using DNS hostnames.When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults."
TypoSquatting,"An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.",Low,"An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.",SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low,"SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful TypoSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.",Authenticate all servers and perform redundant checks when using DNS hostnames.Purchase potential TypoSquatted domains and forward to legitimate domain.
SoundSquatting,"An adversary registers a domain name that sounds the same as a trusted domain, but has a different spelling. A SoundSquatting attack takes advantage of a user's confusion of the two words to direct Internet traffic to adversary-controlled destinations. SoundSquatting does not require an attack against the trusted domain or complicated reverse engineering.",Low,"An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.",SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low,"SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful SoundSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.",Authenticate all servers and perform redundant checks when using DNS hostnames.Purchase potential SoundSquatted domains and forward to legitimate domain.
Homograph Attack via Homoglyphs,"An adversary registers a domain name containing a homoglyph, leading the registered domain to appear the same as a trusted domain. A homograph attack leverages the fact that different characters among various character sets look the same to the user. Homograph attacks must generally be combined with other attacks, such as phishing attacks, in order to direct Internet traffic to the adversary-controlled destinations.",Low,"An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.",SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low,"SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful Homograph attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.",Authenticate all servers and perform redundant checks when using DNS hostnames.Utilize browsers that can warn users if URLs contain characters from different character sets.
Probe Audio and Video Peripherals,"The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system.",Low,Knowledge of the target device's or application’s vulnerabilities that can be capitalized on with malicious code. The adversary must be able to place the malicious code on the target device.,SKILL:To deploy a hidden process or malware on the system to automatically collect audio and video data.:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Prevent unknown code from executing on a system through the use of an allowlist policy.Patch installed applications as soon as new updates become available.
Collect Data from Clipboard,"The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",Low,"The adversary must have a means (i.e., a pre-installed tool or background process) by which to collect data from the clipboard and store it. That is, when the target copies data to the clipboard (e.g., to paste into another application), the adversary needs some means of capturing that data in a third location.",SKILL:To deploy a hidden process or malware on the system to automatically collect clipboard data.:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern."
Altered Component Firmware,"An adversary exploits systems features and/or improperly protected firmware of hardware components, such as Hard Disk Drives (HDD), with the goal of executing malicious code from within the component's Master Boot Record (MBR). Conducting this type of attack entails the adversary infecting the target with firmware altering malware, using known tools, and a payload. Once this malware is executed, the MBR is modified to include instructions to execute the payload at desired intervals and when the system is booted up. A successful attack will obtain persistence within the victim system even if the operating system is reinstalled and/or if the component is formatted or has its data erased.",Low,Advanced knowledge about the target component's firmwareAdvanced knowledge about Master Boot Records (MBR)Advanced knowledge about tools used to insert firmware altering malware.Advanced knowledge about component shipments to the target organization.,SKILL:Ability to access and reverse engineer hardware component firmware.:LEVEL:HighSKILL:Ability to intercept components in transit.:LEVEL:HighSKILL:Ability to create malicious payload to be executed from MBR.:LEVEL:MediumSKILL:Ability to leverage known malware tools to infect target system and insert firmware altering malware/payload:LEVEL:Low,SCOPE:Authentication:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data,Leverage hardware components known to not be susceptible to these types of attacks.Implement hardware RAID infrastructure.
Using Slashes and URL Encoding Combined to Bypass Validation Logic,"This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",High,The application accepts and decodes URL string request.The application performs insufficient filtering/canonicalization on the URLs.,SKILL:An attacker can try special characters in the URL and bypass the URL validation.:LEVEL:LowSKILL:The attacker may write a script to defeat the input filtering mechanism.:LEVEL:Medium,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.Refer to the RFCs to safely decode URL.Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)."
Inclusion of Code in Existing Process,"The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, function hooking, reflective code loading, and more.",Low,The targeted application fails to verify the integrity of the running process that allows an adversary to execute arbitrary code.,"SKILL:Knowledge of how to load malicious code into the memory space of a running process, as well as the ability to have the running process execute this code. For example, with DLL injection, the adversary must know how to load a DLL into the memory space of another running process, and cause this process to execute the code inside of the DLL.:LEVEL:High",SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Read Data,"Prevent unknown or malicious software from loading through using an allowlist policy.Properly restrict the location of the software being used.Leverage security kernel modules providing advanced access control and process restrictions like SELinux.Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.Monitor API calls like SetWindowsHookEx and SetWinEventHook which install hook procedures for Windows.Monitor processes and command-line arguments for unknown behavior related to code injection."
DLL Side-Loading,"An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",Low,The target must fail to verify the integrity of the DLL before using them.,SKILL:Trick the operating system in loading a malicious DLL instead of a legitimate DLL.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Bypass Protection Mechanism,Prevent unknown DLLs from loading through using an allowlist policy.Patch installed applications as soon as new updates become available.Properly restrict the location of the software being used.Use of sxstrace.exe on Windows as well as manual inspection of the manifests.Require code signing and avoid using relative paths for resources.
Identify Shared Files/Directories on System,"An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.",Medium,"The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).","SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line. The adversary, or their malware, can simply employ a set of commands that search for shared drives on the system (e.g., net view remote system or net share).:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is potentially able to identify the location of sensitive information or lateral pathways through the network.,"Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools."
Use of Captured Hashes (Pass The Hash),An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.,Medium,The system/application is connected to the Windows domain.The system/application leverages the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.The adversary possesses known Windows credential hash value pairs that exist on the target domain.,"SKILL:Once an adversary obtains a known Windows credential hash value pair, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.Monitor system and domain logs for abnormal credential access.Create a strong password policy and ensure that your system enforces this policy.Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.
Use of Captured Tickets (Pass The Ticket),"An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",Low,The adversary needs physical access to the victim system.The use of a third-party credential harvesting tool.,SKILL:Determine if Kerberos authentication is used on the server.:LEVEL:LowSKILL:The adversary uses a third-party tool to obtain the necessary tickets to execute the attack.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Gain Privileges,Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.Monitor system and domain logs for abnormal access.
Collect Data from Registries,"An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",Medium,"The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).The adversary must have capability to navigate the operating system to peruse the registry.","SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to read sensitive information about the system in the registry.,"Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern."
Collect Data from Screen Capture,"An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",Medium,"The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).","SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only to leverage the relevant command for screen capture.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to capture potentially sensitive information and processes as they appear on the screen.,"Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature."
Sniff Application Code,"An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",Low,"The attacker must have the ability to place themself in the communication path between the client and server.The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.The attacker must be able to employ a sniffer on the network without being detected.","SKILL:The attacker needs to setup a sniffer for a sufficient period of time so as to capture meaningful quantities of code. The presence of the sniffer should not be detected on the network. Also if the attacker plans to employ an adversary-in-the-middle attack (CAPEC-94), the client or server must not realize this. Finally, the attacker needs to regenerate source code from binary code if the need be.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Encrypt all communication between the client and server.Implementation: Use SSL, SSH, SCP.Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network."
Credential Prompt Impersonation,"An adversary, through a previously installed malicious application, impersonates a credential prompt in an attempt to steal a user's credentials.",Medium,The adversary must already have access to the target system via some means.A legitimate task must exist that an adversary can impersonate to glean credentials.,"SKILL:Once an adversary has gained access to the target system, impersonating a credential prompt is not difficult.:LEVEL:Low",SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges,"The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help."
Voice Phishing,"An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a cold call or by the victim if calling an illegitimate telephone number.",High,"An adversary needs phone numbers to initiate contact with the victim, in addition to a legitimate-looking telephone number to call the victim from.An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.If passively conducting this attack via a spoofed website, replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.","SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem."
Root/Jailbreak Detection Evasion via Hooking,"An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to hook code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.",Medium,The targeted application must be non-restricted to allow code hooking.,SKILL:Knowledge about Root/Jailbreak detection and evasion techniques.:LEVEL:HighSKILL:Knowledge about code hooking.:LEVEL:Medium,"SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through Root/Jailbreak Detection Evasion via Hooking, the adversary compromises the integrity of the application.SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:NOTE:An adversary may leverage Root/Jailbreak Detection Evasion via Hooking in order to obtain sensitive information.","Ensure mobile applications are signed appropriately to avoid code inclusion via hooking.Inspect the application's memory for suspicious artifacts, such as shared objects/JARs or dylibs, after other Root/Jailbreak detection methods.Inspect the application's stack trace for suspicious method calls.Allow legitimate native methods, and check for non-allowed native methods during Root/Jailbreak detection methods.For iOS applications, ensure application methods do not originate from outside of Apple's SDK."
Root/Jailbreak Detection Evasion via Debugging,"An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",Medium,A debugger must be able to be inserted into the targeted application.,SKILL:Knowledge about Root/Jailbreak detection and evasion techniques.:LEVEL:HighSKILL:Knowledge about runtime debugging.:LEVEL:Medium,"SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through Root/Jailbreak Detection Evasion via Debugging, the adversary compromises the integrity of the application.SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:NOTE:An adversary may leverage Root/Jailbreak Detection Evasion via Debugging in order to obtain sensitive information.",Instantiate checks within the application code that ensures debuggers are not attached.
Exploitation of Thunderbolt Protection Flaws,"An adversary leverages a firmware weakness within the Thunderbolt protocol, on a computing device to manipulate Thunderbolt controller firmware in order to exploit vulnerabilities in the implementation of authorization and verification schemes within Thunderbolt protection mechanisms. Upon gaining physical access to a target device, the adversary conducts high-level firmware manipulation of the victim Thunderbolt controller SPI (Serial Peripheral Interface) flash, through the use of a SPI Programing device and an external Thunderbolt device, typically as the target device is booting up. If successful, this allows the adversary to modify memory, subvert authentication mechanisms, spoof identities and content, and extract data and memory from the target device. Currently 7 major vulnerabilities exist within Thunderbolt protocol with 9 attack vectors as noted in the Execution Flow.",Low,"The adversary needs at least a few minutes of physical access to a system with an open Thunderbolt port, version 3 or lower, and an external thunderbolt device controlled by the adversary with maliciously crafted software and firmware, via an SPI Programming device, to exploit weaknesses in security protections.","SKILL:Detailed knowledge on various system motherboards, PCI Express Domain, SPI, and Thunderbolt Protocol in order to interface with internal system components via external devices.:LEVEL:HighSKILL:Detailed knowledge on OS/Kernel memory address space, Direct Memory Access (DMA) mapping, Input-Output Memory Management Units (IOMMUs), and vendor memory protections for data leakage.:LEVEL:HighSKILL:Detailed knowledge on scripting and SPI programming in order to configure and modify Thunderbolt controller firmware and software configurations.:LEVEL:High",SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,Implementation: Kernel Direct Memory Access ProtectionConfiguration: Enable UEFI option USB Passthrough mode - Thunderbolt 3 system port operates as USB 3.1 Type C interfaceConfiguration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interfaceConfiguration: Enable UEFI option Mixed USB/DisplayPort mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface with support for DP modeConfiguration: Set Security Level to SL3 for Thunderbolt 2 system portConfiguration: Disable PCIe tunneling to set Security Level to SL3Configuration: Disable Boot Camp upon MacOS systems
Bluetooth Impersonation AttackS (BIAS),An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.,Medium,Knowledge of a target device's list of trusted connections.,SKILL:Adversaries must be capable of using command line Linux tools.:LEVEL:LowSKILL:Adversaries must be in close proximity to Bluetooth devices.:LEVEL:Low,"SCOPE:Integrity:NOTE:An adversary will be impersonating another Bluetooth device, and may gain access to information pertaining to that user along with the ability to manipulate other information.SCOPE:Confidentiality:NOTE:An adversary will have unauthorized access to information.",Disable Bluetooth in public places.Verify incoming Bluetooth connections; do not automatically trust.Change default PIN passwords and always use one when connecting.
Software Development Tools Maliciously Altered,"An adversary with the ability to alter tools used in a development environment causes software to be developed with maliciously modified tools. Such tools include requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools. The adversary then carries out malicious acts once the software is deployed including malware infection of other systems to support further compromises.",Low,"An adversary would need to have access to a targeted developer’s development environment and in particular to tools used to design, create, test and manage software, where the adversary could ensure malicious code is included in software packages built through alteration or substitution of tools in the environment used in the development of software.","SKILL:Ability to leverage common delivery mechanisms (e.g., email attachments, removable media) to infiltrate a development environment to gain access to software development tools for the purpose of malware insertion into an existing tool or replacement of an existing tool with a maliciously altered copy.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Access Control:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Read Data,"Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.Avoid giving elevated privileges to developers."
Requirements for ASIC Functionality Maliciously Altered,"An adversary with access to functional requirements for an application specific integrated circuit (ASIC), a chip designed/customized for a singular particular use, maliciously alters requirements derived from originating capability needs. In the chip manufacturing process, requirements drive the chip design which, when the chip is fully manufactured, could result in an ASIC which may not meet the user’s needs, contain malicious functionality, or exhibit other anomalous behaviors thereby affecting the intended use of the ASIC.",Low,"An adversary would need to have access to a foundry’s or chip maker’s requirements management system that stores customer requirements for ASICs, requirements upon which the design of the ASIC is based.",SKILL:An adversary would need experience in designing chips based on functional requirements in order to manipulate requirements in such a way that deviations would not be detected in subsequent stages of ASIC manufacture and where intended malicious functionality would be available to the adversary once integrated into a system and fielded.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for hardware requirements and design.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Malicious Code Implanted During Chip Programming,"During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",Low,"An adversary would need to have access to a foundry’s or chip maker’s development/production environment where programs for specific chips are developed, managed and uploaded into targeted chips prior to distribution or sale.","SKILL:An adversary needs to be skilled in microprogramming, manipulation of configuration management systems, and in the operation of tools used for the uploading of programs into chips during manufacture. Uploading can be for individual chips or performed on a large scale basis.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Developer Signing Maliciously Altered Software,"Software produced by a reputable developer is clandestinely infected with malicious code and then digitally signed by the unsuspecting developer, where the software has been altered via a compromised software development or build process prior to being signed. The receiver or user of the software has no reason to believe that it is anything but legitimate and proceeds to deploy it to organizational systems. This attack differs from CAPEC-206, since the developer is inadvertently signing malicious code they believe to be legitimate and which they are unware of any malicious modifications.",Medium,"An adversary would need to have access to a targeted developer’s software development environment, including to their software build processes, where the adversary could ensure code maliciously tainted prior to a build process is included in software packages built.","SKILL:The adversary must have the skills to infiltrate a developer’s software development/build environment and to implant malicious code in developmental software code, a build server, or a software repository containing dependency code, which would be referenced to be included during the software build process.:LEVEL:High",SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Execute Unauthorized Commands,"Have a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools.Employ intrusion detection and malware detection capabilities on IDE systems where feasible."
Design for FPGA Maliciously Altered,"An adversary alters the functionality of a field-programmable gate array (FPGA) by causing an FPGA configuration memory chip reload in order to introduce a malicious function that could result in the FPGA performing or enabling malicious functions on a host system. Prior to the memory chip reload, the adversary alters the program for the FPGA by adding a function to impact system operation.",Low,An adversary would need to have access to FPGA programming/configuration-related systems in a chip maker’s development environment where FPGAs can be initially configured prior to delivery to a customer or have access to such systems in a customer facility where end-user FPGA configuration/reconfiguration can be performed.,"SKILL:An adversary would need to be skilled in FPGA programming in order to create/manipulate configurations in such a way that when loaded into an FPGA, the end user would be able to observe through testing all user-defined required functions but would be unaware of any additional functions the adversary may have introduced.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Exploitation of Improperly Configured or Implemented Memory Protections,An adversary takes advantage of missing or incorrectly configured access control within memory to read/write data or inject malicious code into said memory.,Medium,Access to the hardware being leveraged.,SKILL:Ability to craft malicious code to inject into the memory region.:LEVEL:MediumSKILL:Intricate knowledge of memory structures.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Ensure that protected and unprotected memory ranges are isolated and do not overlap.If memory regions must overlap, leverage memory priority schemes if memory regions can overlap.Ensure that original and mirrored memory regions apply the same protections.Ensure immutable code or data is programmed into ROM or write-once memory."
Exploitation of Improperly Controlled Registers,An adversary exploits missing or incorrectly configured access control within registers to read/write data that is not meant to be obtained or modified by a user.,Medium,Awareness of the hardware being leveraged.Access to the hardware being leveraged.,SKILL:Intricate knowledge of registers.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.Ensure security lock bit protections are reviewed for design inconsistencies and common weaknesses.Test security lock programming flow in both pre-silicon and post-silicon environments.Leverage automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.Ensure that measurement data is stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent.
Exploitation of Improperly Controlled Hardware Security Identifiers,"An adversary takes advantage of missing or incorrectly configured security identifiers (e.g., tokens), which are used for access control within a System-on-Chip (SoC), to read/write data or execute a given action.",Medium,Awareness of the hardware being leveraged.Access to the hardware being leveraged.,SKILL:Ability to execute actions within the SoC.:LEVEL:MediumSKILL:Intricate knowledge of the identifiers being utilized.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Review generation of security identifiers for design inconsistencies and common weaknesses.Review security identifier decoders for design inconsistencies and common weaknesses.Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments."
Spoof Version Control System Commit Metadata,"An adversary spoofs metadata pertaining to a Version Control System (VCS) (e.g., Git) repository's commits to deceive users into believing that the maliciously provided software is frequently maintained and originates from a trusted source.",Medium,Identification of a popular open-source repository whose metadata is to be spoofed.,SKILL:Ability to spoof a variety of repository metadata to convince victims the source is trusted.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source software from reputable hosting sites or package managers.Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.After downloading open-source software, ensure integrity values have not changed.Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
StarJacking,An adversary spoofs software popularity metadata to deceive users into believing that a maliciously provided package is widely used and originates from a trusted source.,Medium,Identification of a popular open-source package whose popularity metadata is to be used for the malicious package.,SKILL:Ability to provide a package to a package manager and associate a popular package's source code repository URL.:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source packages, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source packages from reputable package managers.After downloading open-source packages, ensure integrity values have not changed.Before executing or incorporating the package, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
Repo Jacking,An adversary takes advantage of the redirect property of directly linked Version Control System (VCS) repositories to trick users into incorporating malicious code into their applications.,Medium,Identification of a popular repository that may be directly referenced in numerous software applicationsA repository owner/maintainer who has recently changed their username or deleted their account,SKILL:Ability to create an account on a VCS hosting site and recreate an existing directory structure.:LEVEL:LowSKILL:Ability to create malware that can exploit various software applications.:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Leverage dedicated package managers instead of directly linking to VCS repositories.Utilize version pinning and lock files to prevent use of maliciously modified repositories.Implement vendoring (i.e., including third-party dependencies locally) and leverage automated testing techniques (e.g., static analysis) to determine if the software behaves maliciously.Leverage automated tools, such as Checkmarx's ChainJacking tool, to determine susceptibility to Repo Jacking attacks."
Load Value Injection,"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",Low,The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU.The CPU incorrectly transiently forwards values from microarchitectural buffers after faulting or assisted loadsThe adversary needs the ability to induce page faults or microcode assists on the target system.Code gadgets exist that allow the adversary to hijack transient execution and encode secrets into the microarchitectural state.,"SKILL:Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations.:LEVEL:HighSKILL:Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage.:LEVEL:HighSKILL:The ability to provoke faulting or assisted loads in legitimate execution.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,"Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.Insert explicit “lfence” speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded."
Install Malicious Extension,"An adversary directly installs or tricks a user into installing a malicious extension into existing trusted software, with the goal of achieving a variety of negative technical impacts.",Medium,"The adversary must craft malware based on the type of software and system(s) they intend to exploit.If the adversary intends to install the malicious extension themself, they must first compromise the target machine via some other means.",SKILL:Ability to create malicious extensions that can exploit specific software applications and systems.:LEVEL:MediumSKILL:Optional: Ability to exploit target system(s) via other means in order to gain entry.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read DataSCOPE:Integrity:SCOPE:Access Control:TECHNICAL IMPACT:Modify DataSCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Only install extensions/plugins from official/verifiable sources.Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.Implement an extension/plugin allow list, based on the given security policy.If applicable, confirm extensions/plugins are properly signed by the official developers.For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background."
Blind SQL Injection,"Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",High,"SQL queries used by the application to store, retrieve or modify data.User-controllable input that is not properly validated by the application as part of SQL queries.","SKILL:Determining the database type and version, as well as the right number and type of parameters to the query being injected in the absence of error messages requires greater skill than reverse-engineering database error messages.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear."
Try Common or Default Usernames and Passwords,"An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. secret or password) that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.",Medium,The system uses one factor password based authentication.The adversary has the means to interact with the system.,"SKILL:An adversary just needs to gain access to common default usernames/passwords specific to the technologies used by the system. Additionally, a brute force attack leveraging common passwords can be easily realized if the user name is known.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Delete all default account credentials that may be put in by the product vendor.Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
Exploiting Incorrect Chaining or Granularity of Hardware Debug Components,An adversary exploits incorrect chaining or granularity of hardware debug components in order to gain unauthorized access to debug functionality on a chip. This happens when authorization is not checked on a per function basis and is assumed for a chain or group of debug functionality.,Low,Hardware device has an exposed debug interface,SKILL:Ability to identify physical debug interfaces on a device:LEVEL:MediumSKILL:Ability to operate devices to scan and connect to an exposed debug interface:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Implement: Ensure that debug components are properly chained, and their granularity is maintained at different authorization levelsPerform Post-silicon validation tests at various authorization levels to ensure that debug components are only accessible to authorized users"
Using Unicode Encoding to Bypass Validation Logic,An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.,Medium,Filtering is performed on data that has not be properly canonicalized.,SKILL:An attacker needs to understand Unicode encodings and have an idea (or be able to find out) what system components may not be Unicode aware.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.Ensure that filtering or input validation is applied to canonical data.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.
URL Encoding,This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.,High,The application should accepts and decodes URL input.The application performs insufficient filtering/canonicalization on the URLs.,SKILL:An adversary can try special characters in the URL and bypass the URL validation.:LEVEL:LowSKILL:The adversary may write a script to defeat the input filtering mechanism.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Refer to the RFCs to safely decode URL.Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible."
Manipulating Web Input to File System Calls,"An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.",High,Program must allow for user controlled variables to be applied directly to the filesystem,SKILL:To identify file system entry point and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: Enforce principle of least privilege.Design: Ensure all input is validated, and does not contain file system commandsDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."
Using Escaped Slashes in Alternate Encoding,"This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",High,"The application accepts the backlash character as escape character.The application server does incomplete input data decoding, filtering and validation.",SKILL:The adversary can naively try backslash character and discover that the target host uses it as escape character.:LEVEL:LowSKILL:The adversary may need deep understanding of the host target in order to exploit the vulnerability. The adversary may also use automated tools to probe for this vulnerability.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Verify that the user-supplied data does not use backslash character to escape malicious characters.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.Be aware of the threat of alternative method of data encoding.Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names."
Using Slashes in Alternate Encoding,"This attack targets the encoding of the Slash characters. An adversary would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the adversary many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.",High,The application server accepts paths to locate resources.The application server does insufficient input data validation on the resource path requested by the user.The access right to resources are not set properly.,SKILL:An adversary can try variation of the slashes characters.:LEVEL:LowSKILL:An adversary can use more sophisticated tool or script to scan a website and find a path filtering problem.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)Test your path decoding process against malicious input.In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.Assume all input is malicious. Create an allowlist that defines all valid input to the application based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system."
Buffer Overflow in an API Call,"This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",High,The target host exposes an API to the user.One or more API functions exposed by the target host has a buffer overflow vulnerability.,SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Use a language or compiler that performs automatic bounds checking.Use secure functions not vulnerable to buffer overflow.If you have to use dangerous functions, make sure that you do boundary checking.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution."
Using UTF-8 Encoding to Bypass Validation Logic,"This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the shortest possible encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",High,The application's UTF-8 decoder accepts and interprets illegal UTF-8 characters or non-shortest format of UTF-8 encoding.Input filtering and validating is not done properly leaving the door open to harmful characters for the target host.,SKILL:An attacker can inject different representation of a filtered character in UTF-8 format.:LEVEL:LowSKILL:An attacker may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: 1. Insert a replacement character (e.g. '?', ''). 2. Ignore the bytes. 3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). 4. Not notice and decode as if the bytes were some similar bit of UTF-8. 5. Stop decoding and report an error (possibly giving the caller the option to continue). It is possible for a decoder to behave in different ways for different types of invalid input. RFC 3629 only requires that UTF-8 decoders must not decode overlong sequences (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to ...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence. Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input."
Web Server Logs Tampering,"Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to Log Injection-Tampering-Forging except that in this case, the attack is targeting the logs of the web server and not the application.",Medium,Target server software must be a HTTP server that performs web logging.,SKILL:To input faked entries into Web logs:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: Use input validation before writing to web logDesign: Validate all log data before it is output
XPath Injection,"An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",High,XPath queries used to retrieve information stored in XML documentsUser-controllable input not properly sanitized before being used as part of XPath queries,SKILL:XPath Injection shares the same basic premises with SQL Injection. An attacker must have knowledge of XPath syntax and constructs in order to successfully leverage XPath Injection:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
XQuery Injection,"This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",High,The XQL must execute unvalidated data,SKILL:Basic understanding of XQuery:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Design: Perform input allowlist validation on all XML inputImplementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.
AJAX Footprinting,"This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",High,The user must allow JavaScript to execute in their browser,SKILL:To land and launch a script on victim's machine with appropriate footprinting logic for enumerating services and vulnerabilities in JavaScript:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Design: Use browser technologies that do not allow client side scripting.Implementation: Perform input validation for all remote content.
XSS Through HTTP Headers,"An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.",High,Target software must be a client that allows scripting communication from remote hosts.,"SKILL:To achieve a redirection and use of less trusted source, an adversary can simply edit HTTP Headers that are sent to client machine.:LEVEL:LowSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Session tokens for specific hostImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
Buffer Overflow in Local Command-Line Utilities,This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.,High,The target host exposes a command-line utility to the user.The command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited.,SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.Use a language or compiler that performs automatic bounds checking.Use an abstraction library to abstract away risky APIs. Not a complete solution.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Operational: Use OS-level preventative functionality. Not a complete solution.Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.Do not unnecessarily expose services."
Forced Integer Overflow,"This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",High,"The attacker can manipulate the value of an integer variable utilized by the target host.The target host does not do proper range checking on the variable before utilizing it.When the integer variable is incremented or decremented to an out of range value, it gets a very different value (e.g. very small or negative number)",SKILL:An attacker can simply overflow an integer by inserting an out of range value.:LEVEL:LowSKILL:Exploiting a buffer overflow by injecting malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,Use a language or compiler that performs automatic bounds checking.Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.Use an abstraction library to abstract away risky APIs. Not a complete solution.Always do bound checking before consuming user input data.
Log Injection-Tampering-Forging,"This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing them to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.",High,The target host is logging the action and data of the user.The target host insufficiently protects access to the logs or logging mechanisms.,SKILL:This attack can be as simple as adding extra characters to the logged data (e.g. username). Adding entries is typically easier than removing entries.:LEVEL:LowSKILL:A more sophisticated attack can try to defeat the input validation mechanism.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Carefully control access to physical log files.Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.Use synchronization to control the flow of execution.Use static analysis tools to identify log forging vulnerabilities.Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells."
WSDL Scanning,"This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.",High,A client program connecting to a web service can read the WSDL to determine what functions are available on the server.The target host exposes vulnerable functions within its WSDL interface.,"SKILL:This attack can be as simple as reading WSDL and starting sending invalid request.:LEVEL:LowSKILL:This attack can be used to perform more sophisticated attacks (SQL injection, etc.):LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,It is important to protect WSDL file or provide limited access to it.Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.Validate the received messages against the WSDL Schema. Incomplete solution.
Block Access to Libraries,"An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. It is possible that the application does not handle situations properly where access to these libraries has been blocked. Depending on the error handling within the application, blocked access to libraries may leave the system in an insecure state that could be leveraged by an attacker.",Medium,An application requires access to external libraries.An attacker has the privileges to block application access to external libraries.,"SKILL:Knowledge of how to block access to libraries, as well as knowledge of how to leverage the resulting state of the application based on the failed call.:LEVEL:Low",SCOPE:Availability:TECHNICAL IMPACT:Alter Execution LogicSCOPE:Confidentiality:TECHNICAL IMPACT:OtherSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Ensure that application handles situations where access to APIs in external libraries is not available securely. If the application cannot continue its execution safely it should fail in a consistent and secure fashion.
Accessing Functionality Not Properly Constrained by ACLs,"In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",High,"The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.The various resources, or individual URLs, must be somehow discoverable by the attackerThe administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.","SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic."
Buffer Overflow via Environment Variables,"This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",High,The application uses environment variables.An environment variable exposed to the user is vulnerable to a buffer overflow.The vulnerable environment variable uses untrusted data.Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.,SKILL:An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Do not expose environment variable to the user.Do not use untrusted data in your environment variables.Use a language or compiler that performs automatic bounds checkingThere are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.
Overflow Buffers,"Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.",High,Targeted software performs buffer operations.Targeted software inadequately performs bounds-checking on buffer operations.Adversary has the capability to influence the input to buffer operations.,"SKILL:In most cases, overflowing a buffer does not require advanced skills beyond the ability to notice an overflow and stuff an input variable with content.:LEVEL:LowSKILL:In cases of directed overflows, where the motive is to divert the flow of the program or application as per the adversaries' bidding, high level skills are required. This may involve detailed knowledge of the target system architecture and kernel.:LEVEL:High",SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a language or compiler that performs automatic bounds checking.Use secure functions not vulnerable to buffer overflow.If you have to use dangerous functions, make sure that you do boundary checking.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution.Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software."
Server Side Include (SSI) Injection,"An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",High,A web server that supports server side includes and has them enabledUser controllable input that can carry include directives to the web server,"SKILL:The attacker needs to be aware of SSI technology, determine the nature of injection and be able to craft input that results in the SSI directives being executed.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need themAll user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directiveServer Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead"
Session Sidejacking,"Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.",High,"An attacker and the victim are both using the same WiFi network.The victim has an active session with a target system.The victim is not using a secure channel to communicate with the target system (e.g. SSL, VPN, etc.)The victim initiated communication with a target system that requires transfer of the session token or the target application uses AJAX and thereby periodically rings home asynchronously using the session token",SKILL:Easy to use tools exist to automate this attack.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks."
Clickjacking,"An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.",Medium,"The victim is communicating with the target application via a web based UI and not a thick clientThe victim's browser security policies allow at least one of the following JavaScript, Flash, iFrames, ActiveX, or CSS.The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser)The victim has an active session with the target system.The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system",SKILL:Crafting the proper malicious site and luring the victim to this site are not trivial tasks.:LEVEL:High,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.Turn off JavaScript, Flash and disable CSS.When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks."
Cross Zone Scripting,An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security.,Medium,The target must be using a zone-aware browser.,SKILL:Ability to craft malicious scripts or find them elsewhere and ability to identify functionality that is running web controls in the local zone and to find an injection vector into that functionality:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Disable script execution.Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zoneLimit the flow of untrusted data into the privileged areas of the system that run in the higher trust zoneLimit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimumEnsure proper HTML output encoding before writing user supplied data to the page
HTTP Request Splitting,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",Medium,"An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.HTTP headers capable of being user-manipulated.HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.
Cross Site Tracing,Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to a destination system's web server.,Medium,HTTP TRACE is enabled on the web serverThe destination system is susceptible to XSS or an adversary can leverage some other weakness to bypass the same origin policyScripting is enabled in the client's browserHTTP is used as the communication protocol between the server and the client,SKILL:Understanding of the HTTP protocol and an ability to craft a malicious script:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.Patch web browser against known security origin policy bypass exploits.
Command Line Execution through SQL Injection,"An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.",Low,The application does not properly validate data before storing in the databaseBackend application implicitly trusts the data stored in the databaseMalicious data is used on the backend as a command line argument,"SKILL:The attacker most likely has to be familiar with the internal functionality of the system to launch this attack. Without that knowledge, there are not many feedback mechanisms to give an attacker the indication of how to perform command injection or whether the attack is succeeding.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Disable MSSQL xp_cmdshell directive on the databaseProperly validate the data (syntactically and semantically) before writing it to the database.Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).
Object Relational Mapping Injection,"An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.",Low,"An application uses data access layer generated by an ORM tool or frameworkAn application uses user supplied data in queries executed against the databaseThe separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework",SKILL:Knowledge of general SQL injection techniques and subtleties of the ORM framework is needed:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the frameworkEnsure to keep up to date with security relevant updates to the persistence framework used within your application.
Cause Web Server Misclassification,"An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.",Medium,Web server software must rely on file name or file extension for processing.The attacker must be able to make HTTP requests to the web server.,"SKILL:To modify file name or file extension:LEVEL:LowSKILL:To use misclassification to force the Web server to disclose configuration information, source, or binary data:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Implementation: Server routines should be determined by content not determined by filename or file extension.
SQL Injection through SOAP Parameter Tampering,"An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.",High,SOAP messages are used as a communication mechanism in the systemSOAP parameters are not properly validated at the service providerThe service provider does not properly utilize parameter binding when building SQL queries,SKILL:If the attacker is able to gain good understanding of the system's database schema:LEVEL:MediumSKILL:If the attacker has to perform Blind SQL Injection:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Properly validate and sanitize/reject user input at the service provider.Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly."
JSON Hijacking (aka JavaScript Hijacking),An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.,High,JSON is used as a transport mechanism between the client and the serverThe target server cannot differentiate real requests from forged requestsThe JSON object returned from the server can be accessed by the attackers' malicious code via a script tag,"SKILL:Once this attack pattern is developed and understood, creating an exploit is not very complex.The attacker needs to have knowledge of the URLs that need to be accessed on the target system to request the JSON objects.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario."
Choosing Message Identifier,"This pattern of attack is defined by the selection of messages distributed via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.",High,"Information and client-sensitive (and client-specific) data must be present through a distribution channel available to all users.Distribution means must code (through channel, message identifiers, or convention) message destination in a manner visible within the distribution means itself (such as a control channel) or in the messages themselves.",SKILL:All the adversary needs to discover is the format of the messages on the channel/distribution means and the particular identifier used within the messages.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Associate some ACL (in the form of a token) with an authenticated user which they provide middleware. The middleware uses this token as part of its channel/message selection for that client, or part of a discerning authorization decision for privileged channels/messages. The purpose is to architect the system in a way that associates proper authentication/authorization with each channel/message.Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them."
Exploit Non-Production Interfaces,"An adversary exploits a sample, demonstration, test, or debug interface that is unintentionally enabled on a production system, with the goal of gleaning information or leveraging functionality that would otherwise be unavailable.",Low,The target must have configured non-production interfaces and failed to secure or remove them when brought into a production environment.,SKILL:Exploiting non-production interfaces requires significant skill and knowledge about the potential non-production interfaces left enabled in production.:LEVEL:High,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Access Control:SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Alter Execution Logic,Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.
Privilege Abuse,An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.,High,"The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources.",SKILL:Adversary can leverage privileged features they already have access to without additional effort or skill. Adversary is only required to have access to an account with improper priveleges.:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.
Path Traversal,"An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or ) and/or dots (.)) to reach desired directories or files.",High,The attacker must be able to control the path that is requested of the target.The target must fail to adequately sanitize incoming paths,SKILL:Simple command line attacks or to inject the malicious payload in a web page.:LEVEL:LowSKILL:Customizing attacks to bypass non trivial filters in the application.:LEVEL:Medium,"SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.","Design: Configure the access control correctly.Design: Enforce principle of least privilege.Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.Implementation: Perform input validation for all remote content, including remote and user-generated content.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.Implementation: Use indirect references rather than actual file names.Implementation: Use possible permissions on file access when developing and deploying web applications.Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach."
Directory Indexing,"An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",High,The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.The adversary must be able to control the path that is requested of the target.The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.The server version or patch level must not inherently prevent known directory listing attacks from working.,SKILL:To issue the request to URL without given a specific file name:LEVEL:LowSKILL:To bypass the access control of the directory of listings:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information Leakage,"1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message."
Subverting Environment Variable Values,The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.,High,An environment variable is accessible to the user.An environment variable used by the application can be tainted with user supplied data.Input data used in an environment variable is not validated properly.The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an adversary may attempt to manipulate that variable.,"SKILL:In a web based scenario, the client controls the data that it submitted to the server. So anybody can try to send malicious data and try to bypass the authentication mechanism.:LEVEL:LowSKILL:Some more advanced attacks may require knowledge about protocols and probing technique which help controlling a variable. The malicious user may try to understand the authentication mechanism in order to defeat it.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Accountability:TECHNICAL IMPACT:Hide Activities,Protect environment variables against unauthorized read and write access.Protect the configuration files which contain environment variables against illegitimate read and write access.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.
Symlink Attack,"An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.",Low,The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The adversary must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear.,SKILL:To create symlinks:LEVEL:LowSKILL:To identify the files and create the symlinks during the file operation time window:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information LeakageSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions."
Format String Injection,"An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",High,"The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.","SKILL:In order to discover format string vulnerabilities it takes only low skill, however, converting this discovery into a working exploit requires advanced knowledge on the part of the adversary.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism,Limit the usage of formatting string functions.Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.
LDAP Injection,"An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.",High,"The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.","SKILL:The attacker needs to have knowledge of LDAP, especially its query syntax.:LEVEL:Medium",SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.
Relative Path Traversal,"An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or ) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.",High,"The target application must accept a string as user input, fail to sanitize combinations of characters in the input that have a special meaning in the context of path navigation, and insert the user-supplied string into path navigation commands.",SKILL:To inject the malicious payload in a web page:LEVEL:LowSKILL:To bypass non trivial filters in the application:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcementImplementation: Perform input validation for all remote content, including remote and user-generated content.Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.Implementation: Prefer working without user input when using file system callsImplementation: Use indirect references rather than actual file names.Implementation: Use possible permissions on file access when developing and deploying web applications."
Client-side Injection-induced Buffer Overflow,"This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads.",Medium,The targeted client software communicates with an external server.The targeted client software has a buffer overflow vulnerability.,"SKILL:To achieve a denial of service, an attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap requires a more in-depth knowledge and higher skill level.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"The client software should not install untrusted code from a non-authenticated server.The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.Perform input validation for length of buffer inputs.Use a language or compiler that performs automatic bounds checking.Use an abstraction library to abstract away risky APIs. Not a complete solution.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Ensure all buffer uses are consistently bounds-checked.Use OS-level preventative functionality. Not a complete solution."
XML Ping of the Death,"An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",Low,The target must receive and process XML transactions.,SKILL:To send small XML messages:LEVEL:LowSKILL:To use distributed network to launch the attack:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:DoS: resource consumption (other),Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.Implementation: Provide for network flow control and traffic shaping to control access to the resources.
Command Delimiters,"An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",High,Software's input validation or filtering must not detect and block presence of additional malicious command.,"SKILL:The attacker has to identify injection vector, identify the specific commands, and optionally collect the output, i.e. from an interactive session.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Design: Perform allowlist validation against a positive specification for command length, type, and parameters.Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged accountImplementation: Perform input validation for all remote content.Implementation: Use type conversions such as JDBC prepared statements."
Redirect Access to Libraries,"An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",High,The target must utilize external libraries and must fail to verify the integrity of these libraries before using them.,SKILL:To modify the entries in the configuration file pointing to malicious libraries:LEVEL:LowSKILL:To force symlink and timing issues for redirecting access to libraries:LEVEL:MediumSKILL:To reverse engineering the libraries and inject malicious code into the libraries:LEVEL:High,SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Implementation: Restrict the permission to modify the entries in the configuration file.Implementation: Check the integrity of the dynamically linked libraries before use them.Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.
Dictionary-based Password Attack,"An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern. Dictionary Attacks differ from similar attacks such as Password Spraying (CAPEC-565) and Credential Stuffing (CAPEC-600), since they leverage unknown username/password combinations and don't care about inducing account lockouts.",Medium,The system uses one factor password based authentication.The system does not have a sound password policy that is being enforced.The system does not implement an effective password throttling mechanism.,SKILL:A variety of password cracking tools and dictionaries are available to launch this type of an attack.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Create a strong password policy and ensure that your system enforces this policy.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Leverage multi-factor authentication for all authentication services.
Spear Phishing,"An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.",High,None. Any user can be targeted by a Spear Phishing attack.,"SKILL:Spear phishing attacks require specific knowledge of the victims being targeted, such as which bank is being used by the victims, or websites they commonly log into (Google, Facebook, etc).:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information LeakageSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges:NOTE:Privilege EscalationSCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:Data Modification,"Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind."
Mobile Phishing,"An adversary targets mobile phone users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Mobile Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a text or SMS message, rather than email. The user is enticed to provide information or visit a compromised web site via this message. Apart from the manner in which the attack is initiated, the attack proceeds as a standard Phishing attack.",High,An adversary needs mobile phone numbers to initiate contact with the victim.An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.,"SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind."
Footprinting,An adversary engages in probing and exploration activities to identify constituents and properties of the target.,High,"An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack.","SKILL:The adversary knows how to send HTTP request, run the scan tool.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Keep patches up to date by installing weekly or daily if possible.Shut down unnecessary services/ports.Change default passwords by choosing strong passwords.Curtail unexpected input.Encrypt and password-protect sensitive data.Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents."
Using Malicious Files,"An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.",High,System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."
Web Application Fingerprinting,"An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",High,"Any web application can be fingerprinted. However, some configuration choices can limit the useful information an attacker may collect during a fingerprinting attack.","SKILL:Attacker knows how to send HTTP request, SQL query to a web application.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage,Implementation: Obfuscate server fields of HTTP response.Implementation: Hide inner ordering of HTTP response header.Implementation: Customizing HTTP error codes such as 404 or 500.Implementation: Hide URL file extension.Implementation: Hide HTTP response header software information filed.Implementation: Hide cookie's software information filed.Implementation: Appropriately deal with error messages.Implementation: Obfuscate database type in Database API's error message.
Cross-Site Flashing,"An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.",Medium,The targeted Flash application must reference external URLs and the locations thus referenced must be controllable through parameters. The Flash application must fail to sanitize such parameters against malicious manipulation. The victim must follow a crafted link created by the attacker.,"SKILL:knowledge of Flash internals, parameters and remote referencing.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Implementation: Only allow known URL to be included as remote flash movies in a flash applicationConfiguration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.
XSS Targeting Non-Script Elements,"This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",High,The target client software must allow the execution of scripts generated by remote hosts.,"SKILL:To achieve a redirection and use of less trusted source, an adversary can simply edit content such as XML payload or HTML files that are sent to client machine.:LEVEL:LowSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed."
Exploiting Incorrectly Configured Access Control Security Levels,"An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",High,"The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity..","SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,Design: Configure the access control correctly.
Flash Injection,"An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.",High,"The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link.","SKILL:The attacker needs to have knowledge of Flash, especially how to insert content the executes commands.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information LeakageSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Implementation: remove sensitive information such as user name and password in the SWF file.Implementation: use validation on both client and server side.Implementation: remove debug information.Implementation: use SSL when loading external dataImplementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.
Embedding Scripts within Scripts,An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts.,High,"Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts.","SKILL:To load malicious script into open, e.g. world writable directory:LEVEL:LowSKILL:Executing remote scripts on host and collecting output:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use browser technologies that do not allow client side scripting.Utilize strict type, character, and encoding enforcement.Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Ensure all content that is delivered to client is sanitized against an acceptable content specification.Perform input validation for all remote content.Perform output validation for all remote content.Disable scripting languages such as JavaScript in browserSession tokens for specific hostPatching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode"
PHP Remote File Inclusion,"In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized include or require call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.",High,"Target application server must allow remote files to be included in the require, include, etc. PHP directivesThe adversary must have the ability to make HTTP requests to the target web application.",SKILL:To inject the malicious payload in a web page:LEVEL:LowSKILL:To bypass filters in the application:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Implementation: Perform input validation for all remote content, including remote and user-generated contentImplementation: Only allow known files to be included (allowlist)Implementation: Make use of indirect references passed in URL parameters instead of file namesConfiguration: Ensure that remote scripts cannot be include in the include or require PHP directives"
Session Credential Falsification through Forging,"An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.",Medium,The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers.,SKILL:Forge the session credential and reply the request.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes."
Exponential Data Expansion,"An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",High,This type of attack requires that the target must receive input but either fail to provide an upper limit for entity expansion or provide a limit that is so large that it does not preclude significant resource consumption.,SKILL:Ability to craft nested data expansion messages.:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources."
XSS Using Alternate Syntax,"An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the script tag using the alternate forms of Script or ScRiPt may bypass filters where script is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",High,Target client software must allow scripting such as JavaScript.,SKILL:To inject the malicious payload in a web page:LEVEL:LowSKILL:To bypass non trivial filters in the application:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.Implementation: Perform input validation for all remote content, including remote and user-generated contentImplementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
Inducing Account Lockout,"An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",High,The system has a lockout mechanism.An attacker must be able to reproduce behavior that would result in an account being locked.,SKILL:No programming skills or computer knowledge is needed. An attacker can easily use this attack pattern following the Execution Flow above.:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.When implementing security features, consider how they can be misused and made to turn on themselves."
Encryption Brute Forcing,"An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.",Low,Ciphertext is known.Encryption algorithm and key size are known.,SKILL:Brute forcing encryption does not require much skill.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months."
Serialized Data External Linking,"An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.",High,The target must follow external data references without validating the validity of the reference target.,SKILL:To send serialized data messages with maliciously crafted schema.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Configure the serialized data processor to only retrieve external entities from trusted sources.
Removing Important Client Functionality,An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.,Medium,"The targeted server must assume the client performs important actions to protect the server or the server functionality. For example, the server may assume the client filters outbound traffic or that the client performs all price calculations correctly. Moreover, the server must fail to detect when these assumptions are violated by a client.",SKILL:To reverse engineer the client-side code to disable/remove the functionality on the client that the server relies on.:LEVEL:HighSKILL:The adversary installs a web tool that allows scripts or the DOM model of web-based applications to be modified before they are executed in a browser. GreaseMonkey and Firebug are two examples of such tools.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information LeakageSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.Design: Ship client-side application with integrity checks (code signing) when possible.Design: Use obfuscation and other techniques to prevent reverse engineering the client code."
Exploitation of Trusted Identifiers,"An adversary guesses, obtains, or rides a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.",High,Server software must rely on weak identifier proof and/or verification schemes.Identifiers must have long lifetimes and potential for reusability.Server software must allow concurrent sessions to exist.,"SKILL:To achieve a direct connection with the weak or non-existent server session access control, and pose as an authorized user:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.Implementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.Implementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted.Design: Use strong session identifiers that are protected in transit and at rest.Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.Implementation: Verify authenticity of all identifiers at runtime."
Functionality Misuse,"An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.",Medium,The adversary has the capability to interact with the application directly.The target system does not adequately implement safeguards to prevent misuse of authorized actions/processes.,"SKILL:General computer knowledge about how applications are launched, how they interact with input/output, and how they are configured.:LEVEL:Low","SCOPE:Confidentiality:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful attack of this kind can compromise the confidentiality of an authorized user's credentials.SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Depending on the adversary's intended technical impact, a successful attack of this kind can compromise any or all elements of the security triad.","Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.When implementing security features, consider how they can be misused and compromised."
Fuzzing for application mapping,"An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.",High,The target application must fail to sanitize incoming messages adequately before processing.,"SKILL:Although fuzzing parameters is not difficult, and often possible with automated fuzzing tools, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage,"Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.Implementation: Obfuscate server fields of HTTP response.Implementation: Hide inner ordering of HTTP response header.Implementation: Customizing HTTP error codes such as 404 or 500.Implementation: Hide HTTP response header software information filed.Implementation: Hide cookie's software information filed.Implementation: Obfuscate database type in Database API's error message."
Exploiting Incorrectly Configured SSL/TLS,An adversary takes advantage of incorrectly configured SSL/TLS communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.,Low,Access to the client/server stream.,"SKILL:The adversary needs real-time access to network traffic in such a manner that the adversary can grab needed information from the SSL stream, possibly influence the decided-upon encryption method and options, and perform automated analysis to decipher encrypted material recovered. Tools exist to automate part of the tasks, but to successfully use these tools in an attack scenario requires detailed understanding of the underlying principles.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.Configure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security."
XML Routing Detour Attacks,"An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",High,The targeted system must have multiple stages processing of XML content.,SKILL:To inject a bogus node in the XML routing table:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.Implementation: Use SSL for connections between all parties with mutual authentication.
Exploiting Trust in Client,"An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.",High,"Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side.",SKILL:The attacker must have fairly detailed knowledge of the syntax and semantics of client/server communications protocols and grammars:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.Design: Do not rely on client validation or encoding for security purposes.Design: Utilize digital signatures to increase authentication assurance.Design: Utilize two factor authentication to increase authentication assurance.Implementation: Perform input validation for all remote content.
iFrame Overlay,In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system.,Medium,The victim is communicating with the target application via a web based UI and not a thick client. The victim's browser security policies allow iFrames. The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser). The victim has an active session with the target system. The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system.,SKILL:Crafting the proper malicious site and luring the victim to this site is not a trivial task.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Configuration: Disable iFrames in the Web browser.Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames."
Fingerprinting,"An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",High,A means by which to interact with the target system directly.,"SKILL:Some fingerprinting activity requires very specific knowledge of how different operating systems respond to various TCP/IP requests. Application fingerprinting can be as easy as envoking the application with the correct command line argument, or mouse clicking in the appropriate place on the screen.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible."
File Content Injection,"An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.",High,The target software must consume files.The adversary must have access to modify files that the target software will consume.,"SKILL:How to poison a file with malicious payload that will exploit a vulnerability when the file is opened. The adversary must also know how to place the file onto a system where it will be opened by an unsuspecting party, or force the file to be opened.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Design: Enforce principle of least privilegeDesign: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.Implementation: Virus scanning on hostImplementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin."
Oversized Serialized Data Payloads,An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.,Medium,An application uses an parser for serialized data to perform transformation on user-controllable data.An application does not perform sufficient validation to ensure that user-controllable data is safe for a data parser.,SKILL:Denial of service:LEVEL:LowSKILL:Arbitrary code execution:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Resource ConsumptionSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Carefully validate and sanitize all user-controllable serialized data prior to passing it to the parser routine. Ensure that the resultant data is safe to pass to the parser.Perform validation on canonical data.Pick a robust implementation of the serialized data parser.Validate data against a valid schema or DTD prior to parsing.
Filter Failure through Buffer Overflow,"In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).",High,Ability to control the length of data passed to an active filter.,SKILL:An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.Pre-design: Use a language or compiler that performs automatic bounds checking.Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Operational: Use OS-level preventative functionality. Not a complete solution.Design: Use an abstraction library to abstract away risky APIs. Not a complete solution."
XSS Targeting URI Placeholders,"An attack of this type exploits the ability of most browsers to interpret data, javascript or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.",High,Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme.,SKILL:To inject the malicious payload in a web page:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcement.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.Implementation: Perform input validation for all remote content, including remote and user-generated contentImplementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
Forced Deadlock,"The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",Low,"The target host has a deadlock condition. There are four conditions for a deadlock to occur, known as the Coffman conditions. [REF-101]The target host exposes an API to the user.",SKILL:This type of attack may be sophisticated and require knowledge about the system's resources and APIs.:LEVEL:Medium,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful forced deadlock attack compromises the availability of the system by exhausting its available resources.,"Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).For competing actions, use well-known libraries which implement synchronization."
XML Injection,"An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.",High,XML queries used to process user input and retrieve information stored in XML documentsUser-controllable input not properly sanitized,SKILL:An attacker must have knowledge of XML syntax and constructs in order to successfully leverage XML Injection:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.
Leveraging Race Conditions,"The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by running the race, modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",High,A resource is accessed/modified concurrently by multiple processes such that a race condition exists.The adversary has the ability to modify the resource.,SKILL:Being able to run the race requires basic knowledge of concurrent processing including synchonization techniques.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Use safe libraries to access resources such as files.Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.Use synchronization to control the flow of execution.Use static analysis tools to find race conditions.Pay attention to concurrency problems related to the access of resources."
Leverage Alternate Encoding,An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.,High,"The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host.",SKILL:An adversary can inject different representation of a filtered character in a different encoding.:LEVEL:LowSKILL:An adversary may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input."
Leveraging Race Conditions via Symbolic Links,"This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",Medium,The attacker is able to create Symlink links on the target host.Tainted data from the attacker is used and copied to temporary files.The target host does insecure temporary file creation.,"SKILL:This attack is sophisticated because the attacker has to overcome a few challenges such as creating symlinks on the target host during a precise timing, inserting malicious data in the temporary file and have knowledge about the temporary files created (file name and function which creates them).:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.Follow the principle of least privilege when assigning access rights to files.Ensure good compartmentalization in the system to provide protected areas that can be trusted."
HTTP Response Smuggling,"An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server). See CanPrecede relationships for possible consequences.",Medium,"A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).Differences in the way the two HTTP agents parse and interpret HTTP responses and its headers.HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid charactersConfiguration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
DNS Rebinding,"An adversary serves content whose IP address is resolved by a DNS server that the adversary controls. After initial contact by a web browser (or similar client), the adversary changes the IP address to which its name resolves, to an address within the target organization that is not publicly accessible. This allows the web browser to examine this internal address on behalf of the adversary.",High,The target browser must access content server from the adversary controlled DNS name. Web advertisements are often used for this purpose. The target browser must honor the TTL value returned by the adversary and re-resolve the adversary's DNS name after initial contact.,SKILL:Setup DNS server and the adversary's web server. Write a malicious script to allow the victim to connect to the web server.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response. Unfortunately, this is incompatible with the design of some legitimate sites.Implementation: Reject HTTP request with a malicious Host header.Implementation: Employ DNS resolvers that prevent external names from resolving to internal addresses."
ICMP Echo Request Ping,"An adversary sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss.",Medium,The ability to send an ICMP type 8 query (Echo Request) to a remote target and receive an ICMP type 0 message (ICMP Echo Reply) in response. Any firewalls or access control lists between the sender and receiver must allow ICMP Type 8 and ICMP Type 0 messages in order for a ping operation to succeed.,SKILL:The adversary needs to know certain linux commands for this type of attack.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:A successful attack of this kind can identify open ports and available services on a system.,"Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers."
Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions,"This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",High,A resource is access/modified concurrently by multiple processes.The adversary is able to modify resource.A race condition exists while accessing a resource.,SKILL:This attack can get sophisticated since the attack has to occur within a short interval of time.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Alter Execution LogicSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Use safe libraries to access resources such as files.Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.Use synchronization to control the flow of execution.Use static analysis tools to find race conditions.Pay attention to concurrency problems related to the access of resources."
Using Leading 'Ghost' Character Sequences to Bypass Input Filters,"Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ghost characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",Medium,The targeted API must ignore the leading ghost characters that are used to get past the filters for the semantics to be the same.,"SKILL:The ability to make an API request, and knowledge of ghost characters that will not be filtered by any input validation. These ghost characters must be known to not affect the way in which the request will be interpreted.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Use an allowlist rather than a denylist input validation.Canonicalize all data prior to validation.Take an iterative approach to input validation (defense in depth).
Hijacking a Privileged Thread of Execution,"An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",Low,"The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal usersIn order to feasibly execute this class of attacks, the adversary must have the ability to hijack a privileged thread. This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or calling native OS calls that can suspend and alter process memory. This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.","SKILL:Hijacking a thread involves knowledge of how processes and threads function on the target platform, the design of the target application as well as the ability to identify the primitives to be used or manipulated to hijack the thread.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope."
Accessing/Intercepting/Modifying HTTP Cookies,"This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.",High,"Target server software must be a HTTP daemon that relies on cookies.The cookies must contain sensitive information.The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply.","SKILL:To overwrite session cookie data, and submit targeted attacks via HTTP:LEVEL:LowSKILL:Exploiting a remote buffer overflow generated by attack:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Use input validation for cookiesDesign: Generate and validate MAC for cookiesImplementation: Use SSL/TLS to protect cookie in transitImplementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software."
XSS Through HTTP Query Strings,An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser.,High,Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation.,SKILL:To place malicious payload on server via HTTP:LEVEL:LowSKILL:Exploiting any information gathered by HTTP Query on script host:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content, including remote and user-generated contentImplementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Session tokens for specific hostImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode"
HTTP Request Smuggling,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",Medium,"An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid charactersConfiguration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
HTTP Response Splitting,"An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site. See CanPrecede relationships for possible consequences.",Medium,"A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.HTTP headers capable of being user-manipulated.HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.
Leverage Executable Code in Non-Executable Files,An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.,High,The attacker must have the ability to modify non-executable files consumed by the target software.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute."
Using Unpublished Interfaces or Functionality,"An adversary searches for and invokes interfaces or functionality that the target system designers did not intend to be publicly available. If interfaces fail to authenticate requests, the attacker may be able to invoke functionality they are not authorized for.",Medium,"The architecture under attack must publish or otherwise make available services that clients can attach to, either in an unauthenticated fashion, or having obtained an authentication token elsewhere. The service need not be 'discoverable', but in the event it isn't it must have some way of being discovered by an attacker. This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service.","SKILL:A number of web service digging tools are available for free that help discover exposed web services and their interfaces. In the event that a web service is not listed, the attacker does not need to know much more in addition to the format of web service messages that they can sniff/monitor for.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like."
Leveraging/Manipulating Configuration File Search Paths,"This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",High,The attacker must be able to write to redirect search paths on the victim host.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the programImplementation: Host integrity monitoring"
Manipulating Opaque Client-based Data Tokens,"In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",High,"An attacker already has some access to the system or can steal the client based data tokens from another user who has access to the system.For an Attacker to viably execute this attack, some data (later interpreted by the application) must be held client-side in a way that can be manipulated without detection. This means that the data or tokens are not CRCd as part of their value or through a separate meta-data store elsewhere.",SKILL:If the client site token is obfuscated.:LEVEL:MediumSKILL:If the client site token is encrypted.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)Make sure that all session tokens use a good source of randomnessPerform validation on the server side to make sure that client side data tokens are consistent with what is expected."
Using Alternative IP Address Encodings,"This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",Medium,The target software must fail to anticipate all of the possible valid encodings of an IP/web address.The adversary must have the ability to communicate with the server.,SKILL:The adversary has only to try IP address format combinations.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Default deny access control policiesDesign: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)Implementation: Perform input validation for all remote content."
Manipulating Writeable Terminal Devices,This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.,High,User terminals must have a permissive access control such as world writeable that allows normal users to control data on other user's terminals.,"SKILL:Ability to discover permissions on terminal devices. Of course, brute force can also be used.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Design: Ensure that terminals are only writeable by named owner user and/or administratorDesign: Enforce principle of least privilege
Pretexting,"An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",Medium,The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the pretext that would influence the actions of the specific target.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Depending on the adversary's intentions and the specific nature their actions/requests, a successful pretexting attack can result in the compromise to the confidentiality of sensitive information in a variety of contexts.","An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks."
Using Meta-characters in E-mail Headers to Inject Malicious Payloads,"This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",High,"This attack targets most widely deployed feature rich email applications, including web based email programs.",SKILL:To distribute email:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Design: Perform validation on email header dataImplementation: Implement email filtering solutions on mail server or on MTA, relay server.Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names"
Influence Perception,The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.,High,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that influence the perception of the target can result in a wide variety of consequences and negatively affect potentially the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence Perception of Reciprocation,"An adversary uses a social engineering techniques to produce a sense of obligation in the target to perform a certain action or concede some sensitive or key piece of information. Obligation has to do with actions one feels they need to take due to some sort of social, legal, or moral requirement, duty, contract, or promise. There are various techniques for fostering a sense of obligation to reciprocate or concede during ordinary modes of communication. One method is to compliment the target, and follow up the compliment with a question. If performed correctly the target may volunteer a key piece of information, sometimes involuntarily.",Medium,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that influence the perception of the target can result in a wide variety of consequences and negatively affect potentially the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
MIME Conversion,An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.,High,"The target system uses a mail server.Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system.",SKILL:It may be trivial to cause a DoS via this attack pattern:LEVEL:LowSKILL:Causing arbitrary code to execute on the target system.:LEVEL:High,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Stay up to date with third party vendor patchesDisable the 7 to 8 bit conversion. This can be done by removing the F=9 flag from all Mailer specifications in the sendmail.cf file. For example, a sendmail.cf file with these changes applied should look similar to (depending on your system and configuration): Mlocal, P=/usr/libexec/mail.local, F=lsDFMAw5:/|@qrmn, S=10/30, R=20/40,T=DNS/RFC822/X-Unix,A=mail -d $u Mprog, P=/bin/sh, F=lsDFMoqeu, S=10/30, R=20/40,D=$z:/,T=X-Unix,A=sh -c $u This can be achieved for the Mlocal and Mprog Mailers by modifying the .mc file to include the following lines: define(`LOCAL_MAILER_FLAGS',ifdef(`LOCAL_MAILER_FLAGS',`translit(LOCAL_MAILER_FLAGS, `9')',`rmn')) define(`LOCAL_SHELL_FLAGS',ifdef(`LOCAL_SHELL_FLAGS',`translit(LOCAL_SHELL_FLAGS, `9')',`eu')) and then rebuilding the sendmail.cf file using m4(1). From Exploiting Software, please see reference below.Use the sendmail restricted shell program (smrsh)Use mail.local"
Influence Perception of Scarcity,"The adversary leverages a perception of scarcity to persuade the target to perform an action or divulge information that is advantageous to the adversary. By conveying a perception of scarcity, or a situation of limited supply, the adversary aims to create a sense of urgency in the context of a target's decision-making process.",High,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence Perception of Authority,"An adversary uses a social engineering technique to convey a sense of authority that motivates the target to reveal specific information or take specific action. There are various techniques for producing a sense of authority during ordinary modes of communication. One common method is impersonation. By impersonating someone with a position of power within an organization, an adversary may motivate the target individual to reveal some piece of sensitive information or perform an action that benefits the adversary.",High,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence Perception of Commitment and Consistency,"An adversary uses social engineering to convince the target to do minor tasks as opposed to larger actions. After complying with a request, individuals are more likely to agree to subsequent requests that are similar in type and required effort.",High,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.Individuals should avoid complying with suspicious requests."
Influence Perception of Liking,"The adversary influences the target's actions by building a relationship where the target has a liking to the adversary. People are more likely to be influenced by people of whom they are fond, so the adversary attempts to ingratiate themself with the target via actions, appearance, or a combination thereof.",Medium,The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the types of things that the target likes.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of liking can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence Perception of Consensus or Social Proof,"The adversary influences the target's actions by leveraging the inherent human nature to assume behavior of others is appropriate. In situations of uncertainty, people tend to behave in ways they see others behaving. The adversary convinces the target of adopting behavior or actions that is advantageous to the adversary.",Low,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of liking can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Target Influence via Framing,"An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word No and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.",Low,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Successful attacks that influence the target via framing into performing an action or sharing sensitive information can result in a variety of consequences that negatively affect the confidentiality of an application or system.,"An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication."
Influence via Incentives,"The adversary incites a behavior from the target by manipulating something of influence. This is commonly associated with financial, social, or ideological incentivization. Examples include monetary fraud, peer pressure, and preying on the target's morals or ethics. The most effective incentive against one target might not be as effective against another, therefore the adversary must gather information about the target's vulnerability to particular incentives.",Low,The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the incentives that would influence the actions of the specific target.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that successfully incentivize the target into performing an action beneficial to the adversary can result in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Influence via Psychological Principles,"The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.",Low,The adversary must have the means and knowledge of how to communicate with the target in some manner.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that successfully influence the target into performing an action via psychological principles can result in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.","An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
Exploiting Multiple Input Interpretation Layers,"An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a layer of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",Medium,User input is used to construct a command to be executed on the target system or as part of the file name.Multiple parser passes are performed on the data supplied by the user.,"SKILL:Knowledge of various escaping schemes, such as URL escape encoding and XML escape characters.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.
Overflow Binary Resource File,"An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",High,Target software processes binary resource files.Target software contains a buffer overflow vulnerability reachable through input from a user-controllable binary resource file.,"SKILL:To modify file, deceive client into downloading, locate and exploit remote stack or heap vulnerability:LEVEL:Medium",SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Perform appropriate bounds checking on all buffers.Design: Enforce principle of least privilegeDesign: Static code analysisImplementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processesImplementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host."
Buffer Overflow via Symbolic Links,"This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",High,The adversary can create symbolic link on the target host.The target host does not perform correct boundary checking while consuming data from a resources.,SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.Pay attention to the resource pointed to by your symlink links (See attack pattern named Forced Symlink race), they can be replaced by malicious resources.Always check the size of the input data before copying to a buffer.Use a language or compiler that performs automatic bounds checking.Use an abstraction library to abstract away risky APIs. Not a complete solution.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution."
Creating a Rogue Certification Authority Certificate,"An adversary exploits a weakness resulting from using a hashing algorithm with weak collision resistance to generate certificate signing requests (CSR) that contain collision blocks in their to be signed parts. The adversary submits one CSR to be signed by a trusted certificate authority then uses the signed blob to make a second certificate appear signed by said certificate authority. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority.",Medium,Certification Authority is using a hash function with insufficient collision resistance to generate the certificate hash to be signed,SKILL:Understanding of how to force a hash collision in X.509 certificates:LEVEL:HighSKILL:An attacker must be able to craft two X.509 certificates that produce the same hash value:LEVEL:HighSKILL:Knowledge needed to set up a certification authority:LEVEL:Medium,SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges,Certification Authorities need to stop using deprecated or cryptographically insecure hashing algorithms to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512.
Overflow Variables and Tags,"This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The adversary crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.",High,The target program consumes user-controllable data in the form of tags or variables.The target program does not perform sufficient boundary checking.,SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Use a language or compiler that performs automatic bounds checking.Use an abstraction library to abstract away risky APIs. Not a complete solution.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution.Do not trust input data from user. Validate all user input."
Buffer Overflow via Parameter Expansion,"In this attack, the target software is given input that the adversary knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.",Medium,"The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is).","SKILL:Finding this particular buffer overflow may not be trivial. Also, stack and especially heap based buffer overflows require a lot of knowledge if the intended goal is arbitrary code execution. Not only that the adversary needs to write the shell code to accomplish their goals, but the adversary also needs to find a way to get the program execution to jump to the planted shell code. There also needs to be sufficient room for the payload. So not every buffer overflow will be exploitable, even by a skilled adversary.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system
Passing Local Filenames to Functions That Expect a URL,"This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",High,"The victim's software must not differentiate between the location and type of reference passed the client software, e.g. browser",SKILL:Attacker identifies known local files to exploit:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.Design: Use browser technologies that do not allow client side scripting.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browser
Contradictory Destinations in Traffic Routing Schemes,"Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",Medium,"An adversary must be aware that their message will be routed using a CDN, and that both of the contradictory domains are served from that CDN.If the purpose of the Domain Fronting is to hide redirected C2 traffic, the C2 server must have been created in the CDN.",SKILL:The adversary must have some knowledge of how messages are routed.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data,"Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names."
Password Brute Forcing,"An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.",Medium,An adversary needs to know a username to target.The system uses password based authentication as the one factor authentication mechanism.An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical.,SKILL:A brute force attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
Blue Boxing,"This type of attack against older telephone switches and trunks has been around for decades. A tone is sent by an adversary to impersonate a supervisor signal which has the effect of rerouting or usurping command of the line. While the US infrastructure proper may not contain widespread vulnerabilities to this type of attack, many companies are connected globally through call centers and business process outsourcing. These international systems may be operated in countries which have not upgraded Telco infrastructure and so are vulnerable to Blue boxing. Blue boxing is a result of failure on the part of the system to enforce strong authorization for administrative functions. While the infrastructure is different than standard current applications like web applications, there are historical lessons to be learned to upgrade the access control for administrative functions. This attack pattern is included in CAPEC for historical purposes.",Medium,System must use weak authentication mechanisms for administrative functions.,"SKILL:Given a vulnerable phone system, the attackers' technical vector relies on attacks that are well documented in cracker 'zines and have been around for decades.:LEVEL:Low",SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Implementation: Upgrade phone lines. Note this may be prohibitively expensiveUse strong access control such as two factor access control for administrative access to the switch
Password Recovery Exploitation,An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure.,Medium,The system allows users to recover their passwords and gain access back into the system.Password recovery mechanism has been designed or implemented insecurely.Password recovery mechanism relies only on something the user knows and not something the user has.No third party intervention is required to use the password recovery mechanism.,SKILL:Brute force attack:LEVEL:LowSKILL:Social engineering and more sophisticated technical attacks.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.Ensure that your password recovery functionality is not vulnerable to an injection style attack.
Task Impersonation,"An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.",Medium,The adversary must already have access to the target system via some means.A legitimate task must exist that an adversary can impersonate to glean credentials.The user's privileges allow them to execute certain tasks with elevated privileges.,"SKILL:Once an adversary has gained access to the target system, impersonating a task is trivial.:LEVEL:Low",SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges,"The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help."
Shoulder Surfing,"In a shoulder surfing attack, an adversary observes an unaware individual's keystrokes, screen content, or conversations with the goal of obtaining sensitive information. One motive for this attack is to obtain sensitive information about the target for financial, personal, political, or other gains. From an insider threat perspective, an additional motive could be to obtain system/application credentials or cryptographic keys. Shoulder surfing attacks are accomplished by observing the content over the victim's shoulder, as implied by the name of this attack.",High,"The adversary typically requires physical proximity to the target's environment, in order to observe their screen or conversation. This may not be the case if the adversary is able to record the target and obtain sensitive information upon review of the recording.","SKILL:In most cases, an adversary can simply observe and retain the desired information.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:LIKELIHOOD:High,"Be mindful of your surroundings when discussing or viewing sensitive information in public areas.Pertaining to insider threats, ensure that sensitive information is not displayed to nor discussed around individuals without need-to-know access to said information."
Poison Web Service Registry,"SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.",High,The attacker must be able to write to resources or redirect access to the service registry.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: Enforce principle of least privilegeDesign: Harden registry server and file access permissionsImplementation: Implement communications to and from the registry using secure protocols
Embedding NULL Bytes,An adversary embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).,High,The program does not properly handle postfix NULL terminators,SKILL:Directory traversal:LEVEL:MediumSKILL:Execution of arbitrary code:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.
XML Flood,"An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.",Low,The target must receive and process XML transactions.An adverssary must possess the ability to generate a large amount of XML based messages to send to the target service.,SKILL:Denial of service:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption,Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.Implementation: Provide for network flow control and traffic shaping to control access to the resources.
Malware-Directed Internal Reconnaissance,"Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.",Medium,"The adversary must have internal, logical access to the target network and system.","SKILL:The adversary must be able to obtain or develop, as well as place malicious software inside the target network/system.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Keep patches up to date by installing weekly or daily if possible.Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.
"Postfix, Null Terminate, and Backslash","If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an adversary to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.",High,Null terminators are not properly handled by the filter.,"SKILL:An adversary needs to understand alternate encodings, what the filter looks for and the data format acceptable to the target API:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.
Query System for Information,"An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.",High,"This class of attacks does not strictly require authorized access to the application. As Attackers use this attack process to classify, map, and identify vulnerable aspects of an application, it simply requires hypotheses to be verified, interaction with the application, and time to conduct trial-and-error activities.","SKILL:Although fuzzing parameters is not difficult, and often possible with automated fuzzers, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Application designers can construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion."
Incomplete Data Deletion in a Multi-Tenant Environment,"An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",Low,The cloud provider must not assuredly delete part or all of the sensitive data for which they are responsible.The adversary must have the ability to interact with the system.,SKILL:The adversary requires the ability to traverse directory structure.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful attack that probes application memory will compromise the confidentiality of that data.,Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.Deletion of data should be completed promptly when requested.
Contaminate Resource,"An adversary contaminates organizational information systems (including devices and networks) by causing them to handle information of a classification/sensitivity for which they have not been authorized. When this happens, the contaminated information system, device, or network must be brought offline to investigate and mitigate the data spill, which denies availability of the system until the investigation is complete.",Low,The adversary needs to have real or fake classified/sensitive information to place on a system,SKILL:Knowledge of classification levels of systems:LEVEL:LowSKILL:The ability to obtain a classified document or information:LEVEL:HighSKILL:The ability to fake a classified document:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Victims of the attack can be exposed to classified materials,"Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.Have a planned and efficient response plan to limit the amount of time a system is offline while the contamination is investigated."
Rainbow Table Password Cracking,"An attacker gets access to the database table where hashes of passwords are stored. They then use a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.",Medium,"Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).The system uses one factor password based authentication.",SKILL:A variety of password cracking tools are available that can leverage a rainbow table. The more difficult part is to obtain the password hash(es) in the first place.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it."
Use of Known Domain Credentials,An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.,High,"The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.","SKILL:Once an adversary obtains a known credential, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.Create a strong password policy and ensure that your system enforces this policy.Ensure users are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse local administrator account credentials across systems.Deny remote use of local admin credentials to log into domain systems.Do not allow accounts to be a local administrator on more than one system.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Monitor system and domain logs for abnormal credential access."
Password Spraying,"In a Password Spraying attack, an adversary tries a small list (e.g. 3-5) of common or expected passwords, often matching the target's complexity policy, against a known list of user accounts to gain valid credentials. The adversary tries a particular password for each user account, before moving onto the next password in the list. This approach assists the adversary in remaining undetected by avoiding rapid or frequent account lockouts. The adversary may then reattempt the process with additional passwords, once enough time has passed to prevent inducing a lockout.",High,The system/application uses one factor password based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts on the target system/application.,SKILL:A Password Spraying attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Create a strong password policy and ensure that your system enforces this policy.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.
Utilizing REST's Trust in the System Resource to Obtain Sensitive Data,This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.,Medium,Opportunity to intercept must exist beyond the point where SSL is terminated.The adversary must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.,SKILL:To insert a network sniffer or other listener into the communication stream:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Implementation: Implement message level security such as HMAC in the HTTP communicationDesign: Utilize defense in depth, do not rely on a single security mechanism like SSLDesign: Enforce principle of least privilege"
Restful Privilege Elevation,"An adversary identifies a Rest HTTP (Get, Put, Delete) style permission method allowing them to perform various malicious actions upon server data due to lack of access control mechanisms implemented within the application service accepting HTTP messages.",High,The attacker needs to be able to identify HTTP Get URLs. The Get methods must be set to call applications that perform operations other than get such as update and delete.,SKILL:It is relatively straightforward to identify an HTTP Get method that changes state on the server side and executes against an over-privileged system interface:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Design: Enforce principle of least privilegeImplementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server sideImplementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose
System Footprinting,An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.,Low,The adversary must have logical access to the target network and system.,SKILL:The adversary needs to know basic linux commands.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Keep patches up to date by installing weekly or daily if possible.Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.
DOM-Based XSS,"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.",High,An application that leverages a client-side web browser with scripting enabled.An application that manipulates the DOM via client-side scripting.An application that failS to adequately sanitize or encode untrusted input.,SKILL:Requires the ability to write scripts of some complexity and to inject it through user controlled fields in the system.:LEVEL:Medium,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful DOM-based XSS attack can enable an adversary to exfiltrate sensitive information from the application.SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful DOM-based XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful DOM-based XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful DOM-based XSS attack can allow an adversary to tamper with application data.",Use browser technologies that do not allow client-side scripting.Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.Ensure that all user-supplied input is validated before use.
Session Credential Falsification through Prediction,This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.,High,"The target host uses session IDs to keep track of the users.Session IDs are used to control access to resources.The session IDs used by the target host are predictable. For example, the session IDs are generated using predictable information (e.g., time).",SKILL:There are tools to brute force session ID. Those tools require a low level of knowledge.:LEVEL:LowSKILL:Predicting Session ID may require more computation work which uses advanced analysis such as statistical analysis.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a strong source of randomness to generate a session ID.Use adequate length session IDsDo not use information available to the user in order to generate session ID (e.g., time).Ideas for creating random numbers are offered by Eastlake [RFC1750]Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format."
Reflected XSS,This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is reflected off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.,High,An application that leverages a client-side web browser with scripting enabled.An application that fail to adequately sanitize or encode untrusted input.,SKILL:Requires the ability to write malicious scripts and embed them into HTTP requests.:LEVEL:Medium,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful Reflected XSS attack can enable an adversary to exfiltrate sensitive information from the application.SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful Reflected XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful Reflected attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful Reflected attack can allow an adversary to tamper with application data.","Use browser technologies that do not allow client-side scripting.Utilize strict type, character, and encoding enforcement.Ensure that all user-supplied input is validated before use."
Stored XSS,An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently stored within the data storage of a vulnerable web application as valid input.,High,An application that leverages a client-side web browser with scripting enabled.An application that fails to adequately sanitize or encode untrusted input.An application that stores information provided by the user in data storage of some kind.,SKILL:Requires the ability to write scripts of varying complexity and to inject them through user controlled fields within the application.:LEVEL:Medium,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful Stored XSS attack can enable an adversary to exfiltrate sensitive information from the application.SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful Stored XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful Stored XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful Stored XSS attack can allow an adversary to tamper with application data.","Use browser technologies that do not allow client-side scripting.Utilize strict type, character, and encoding enforcement.Ensure that all user-supplied input is validated before being stored."
Session Hijacking,This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.,High,An application that leverages sessions to perform authentication.,SKILL:Exploiting a poorly protected identity token is a well understood attack with many helpful resources available.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful attack can enable an adversary to gain unauthorized access to an application.,"Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated."
Argument Injection,An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.,High,"Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client.","SKILL:The attacker has to identify injection vector, identify the operating system-specific commands, and optionally collect the output.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise."
Reusing Session IDs (aka Session Replay),This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.,High,The target host uses session IDs to keep track of the users.Session IDs are used to control access to resources.The session IDs used by the target host are not well protected from session theft.,"SKILL:If an attacker can steal a valid session ID, they can then try to be authenticated with that stolen session ID.:LEVEL:LowSKILL:More sophisticated attack can be used to hijack a valid session from a user and spoof a legitimate user by reusing their valid session ID.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Always invalidate a session ID after the user logout.Setup a session time out for the session IDs.Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate adversary in the middle attacks (CAPEC-94).Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.Encrypt the session data associated with the session ID.Use multifactor authentication."
Credential Stuffing,"An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.",High,"The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.",SKILL:A Credential Stuffing attack is very straightforward.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.Create a strong password policy and ensure that your system enforces this policy.Ensure users are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse local administrator account credentials across systems.Deny remote use of local admin credentials to log into domain systems.Do not allow accounts to be a local administrator on more than one system.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Monitor system and domain logs for abnormal credential access."
Wi-Fi Jamming,"In this attack scenario, the attacker actively transmits on the Wi-Fi channel to prevent users from transmitting or receiving data from the targeted Wi-Fi network. There are several known techniques to perform this attack – for example: the attacker may flood the Wi-Fi access point (e.g. the retransmission device) with deauthentication frames. Another method is to transmit high levels of noise on the RF band used by the Wi-Fi network.",Medium,Lack of anti-jam features in 802.11Lack of authentication on deauthentication/disassociation packets on 802.11-based networks,SKILL:This attack can be performed by low capability attackers with freely available tools. Commercial tools are also available that can target select networks or all WiFi networks within a range of several miles.:LEVEL:Low,"SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:A successful attack will deny the availability of the Wi-fi network to authorized users.SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:The attacker's goal is to prevent users from accessing the wireless network. Denying connectivity to the wireless network prevents the user from being able to transmit or receive any data, which also prevents VOIP calls, however this attack poses no threat to data confidentiality.","Countermeasures have been proposed for both disassociation flooding and RF jamming, however these countermeasures are not standardized and would need to be supported on both the retransmission device and the handset in order to be effective. Commercial products are not currently available that support jamming countermeasures for Wi-Fi."
Session Fixation,"The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.",Medium,Session identifiers that remain unchanged when the privilege levels change.Permissive session management mechanism that accepts random user-generated session identifiersPredictable session identifiers,SKILL:Only basic skills are required to determine and fixate session identifiers in a user's browser. Subsequent attacks may require greater skill levels depending on the attackers' motives.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult."
BitSquatting,"An adversary registers a domain name one bit different than a trusted domain. A BitSquatting attack leverages random errors in memory to direct Internet traffic to adversary-controlled destinations. BitSquatting requires no exploitation or complicated reverse engineering, and is operating system and architecture agnostic. Experimental observations show that BitSquatting popular websites could redirect non-trivial amounts of Internet traffic to a malicious entity.",Low,"An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.",SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low,"SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful BitSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.","Authenticate all servers and perform redundant checks when using DNS hostnames.When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults."
Hardware Fault Injection,"The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.",Low,Physical access to the systemThe adversary must be cognizant of where fault injection vulnerabilities exist in the system in order to leverage them for exploitation.,"SKILL:Adversaries require non-trivial technical skills to create and implement fault injection attacks. Although this style of attack has become easier (commercial equipment and training classes are available to perform these attacks), they usual require significant setup and experimentation time during which physical access to the device is required.:LEVEL:High","SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities:NOTE:An adversary capable of successfully collecting and analyzing sensitive, fault/side-channel information, has compromised the confidentiality of that application or information system data.SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:If an adversary is able to inject data via a fault or side channel vulnerability towards malicious ends, the integrity of the application or information system will be compromised.",Implement robust physical security countermeasures and monitoring.
Cross-Site Scripting (XSS),"An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.",High,"Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.","SKILL:To achieve a redirection and use of less trusted source, an attacker can simply place a script in bulletin board, blog, wiki, or other user-generated content site that are echoed back to other client machines.:LEVEL:LowSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Session tokens for specific hostImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
TypoSquatting,"An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.",Low,"An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.",SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low,"SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful TypoSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.",Authenticate all servers and perform redundant checks when using DNS hostnames.Purchase potential TypoSquatted domains and forward to legitimate domain.
SoundSquatting,"An adversary registers a domain name that sounds the same as a trusted domain, but has a different spelling. A SoundSquatting attack takes advantage of a user's confusion of the two words to direct Internet traffic to adversary-controlled destinations. SoundSquatting does not require an attack against the trusted domain or complicated reverse engineering.",Low,"An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.",SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low,"SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful SoundSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.",Authenticate all servers and perform redundant checks when using DNS hostnames.Purchase potential SoundSquatted domains and forward to legitimate domain.
Homograph Attack via Homoglyphs,"An adversary registers a domain name containing a homoglyph, leading the registered domain to appear the same as a trusted domain. A homograph attack leverages the fact that different characters among various character sets look the same to the user. Homograph attacks must generally be combined with other attacks, such as phishing attacks, in order to direct Internet traffic to the adversary-controlled destinations.",Low,"An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.",SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low,"SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful Homograph attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.",Authenticate all servers and perform redundant checks when using DNS hostnames.Utilize browsers that can warn users if URLs contain characters from different character sets.
Probe Audio and Video Peripherals,"The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system.",Low,Knowledge of the target device's or application’s vulnerabilities that can be capitalized on with malicious code. The adversary must be able to place the malicious code on the target device.,SKILL:To deploy a hidden process or malware on the system to automatically collect audio and video data.:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Prevent unknown code from executing on a system through the use of an allowlist policy.Patch installed applications as soon as new updates become available.
Collect Data from Clipboard,"The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",Low,"The adversary must have a means (i.e., a pre-installed tool or background process) by which to collect data from the clipboard and store it. That is, when the target copies data to the clipboard (e.g., to paste into another application), the adversary needs some means of capturing that data in a third location.",SKILL:To deploy a hidden process or malware on the system to automatically collect clipboard data.:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern."
Altered Component Firmware,"An adversary exploits systems features and/or improperly protected firmware of hardware components, such as Hard Disk Drives (HDD), with the goal of executing malicious code from within the component's Master Boot Record (MBR). Conducting this type of attack entails the adversary infecting the target with firmware altering malware, using known tools, and a payload. Once this malware is executed, the MBR is modified to include instructions to execute the payload at desired intervals and when the system is booted up. A successful attack will obtain persistence within the victim system even if the operating system is reinstalled and/or if the component is formatted or has its data erased.",Low,Advanced knowledge about the target component's firmwareAdvanced knowledge about Master Boot Records (MBR)Advanced knowledge about tools used to insert firmware altering malware.Advanced knowledge about component shipments to the target organization.,SKILL:Ability to access and reverse engineer hardware component firmware.:LEVEL:HighSKILL:Ability to intercept components in transit.:LEVEL:HighSKILL:Ability to create malicious payload to be executed from MBR.:LEVEL:MediumSKILL:Ability to leverage known malware tools to infect target system and insert firmware altering malware/payload:LEVEL:Low,SCOPE:Authentication:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data,Leverage hardware components known to not be susceptible to these types of attacks.Implement hardware RAID infrastructure.
Using Slashes and URL Encoding Combined to Bypass Validation Logic,"This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",High,The application accepts and decodes URL string request.The application performs insufficient filtering/canonicalization on the URLs.,SKILL:An attacker can try special characters in the URL and bypass the URL validation.:LEVEL:LowSKILL:The attacker may write a script to defeat the input filtering mechanism.:LEVEL:Medium,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.Refer to the RFCs to safely decode URL.Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)."
Inclusion of Code in Existing Process,"The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, function hooking, reflective code loading, and more.",Low,The targeted application fails to verify the integrity of the running process that allows an adversary to execute arbitrary code.,"SKILL:Knowledge of how to load malicious code into the memory space of a running process, as well as the ability to have the running process execute this code. For example, with DLL injection, the adversary must know how to load a DLL into the memory space of another running process, and cause this process to execute the code inside of the DLL.:LEVEL:High",SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Read Data,"Prevent unknown or malicious software from loading through using an allowlist policy.Properly restrict the location of the software being used.Leverage security kernel modules providing advanced access control and process restrictions like SELinux.Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.Monitor API calls like SetWindowsHookEx and SetWinEventHook which install hook procedures for Windows.Monitor processes and command-line arguments for unknown behavior related to code injection."
DLL Side-Loading,"An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",Low,The target must fail to verify the integrity of the DLL before using them.,SKILL:Trick the operating system in loading a malicious DLL instead of a legitimate DLL.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Bypass Protection Mechanism,Prevent unknown DLLs from loading through using an allowlist policy.Patch installed applications as soon as new updates become available.Properly restrict the location of the software being used.Use of sxstrace.exe on Windows as well as manual inspection of the manifests.Require code signing and avoid using relative paths for resources.
Identify Shared Files/Directories on System,"An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.",Medium,"The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).","SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line. The adversary, or their malware, can simply employ a set of commands that search for shared drives on the system (e.g., net view remote system or net share).:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is potentially able to identify the location of sensitive information or lateral pathways through the network.,"Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools."
Use of Captured Hashes (Pass The Hash),An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.,Medium,The system/application is connected to the Windows domain.The system/application leverages the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.The adversary possesses known Windows credential hash value pairs that exist on the target domain.,"SKILL:Once an adversary obtains a known Windows credential hash value pair, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.Monitor system and domain logs for abnormal credential access.Create a strong password policy and ensure that your system enforces this policy.Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.
Use of Captured Tickets (Pass The Ticket),"An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",Low,The adversary needs physical access to the victim system.The use of a third-party credential harvesting tool.,SKILL:Determine if Kerberos authentication is used on the server.:LEVEL:LowSKILL:The adversary uses a third-party tool to obtain the necessary tickets to execute the attack.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Gain Privileges,Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.Monitor system and domain logs for abnormal access.
Collect Data from Registries,"An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",Medium,"The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).The adversary must have capability to navigate the operating system to peruse the registry.","SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to read sensitive information about the system in the registry.,"Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern."
Collect Data from Screen Capture,"An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",Medium,"The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).","SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only to leverage the relevant command for screen capture.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to capture potentially sensitive information and processes as they appear on the screen.,"Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature."
Sniff Application Code,"An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",Low,"The attacker must have the ability to place themself in the communication path between the client and server.The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.The attacker must be able to employ a sniffer on the network without being detected.","SKILL:The attacker needs to setup a sniffer for a sufficient period of time so as to capture meaningful quantities of code. The presence of the sniffer should not be detected on the network. Also if the attacker plans to employ an adversary-in-the-middle attack (CAPEC-94), the client or server must not realize this. Finally, the attacker needs to regenerate source code from binary code if the need be.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Encrypt all communication between the client and server.Implementation: Use SSL, SSH, SCP.Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network."
Use of Known Kerberos Credentials,"An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.",Medium,"The system/application leverages Kerberos authentication.The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication for Kerberos service accounts.The system/application does not have a sound password policy that is being enforced for Kerberos service accounts.The system/application does not implement an effective password throttling mechanism for authenticating to Kerberos service accounts.The targeted network allows for network sniffing attacks to succeed.","SKILL:Once an adversary obtains a known Kerberos credential, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse Kerberos service account credentials across systems.Deny remote use of Kerberos service account credentials to log into domain systems.Do not allow Kerberos service accounts to be a local administrator on more than one system.Enable at least AES Kerberos encryption for tickets.Monitor system and domain logs for abnormal credential access."
Use of Known Operating System Credentials,"An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.",High,"The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.","SKILL:Once an adversary obtains a known credential, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the network.Create a strong password policy and ensure that your system enforces this policy.Ensure users are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse local administrator account credentials across systems.Deny remote use of local admin credentials to log into domain systems.Do not allow accounts to be a local administrator on more than one system.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Monitor system and domain logs for abnormal credential access."
Credential Prompt Impersonation,"An adversary, through a previously installed malicious application, impersonates a credential prompt in an attempt to steal a user's credentials.",Medium,The adversary must already have access to the target system via some means.A legitimate task must exist that an adversary can impersonate to glean credentials.,"SKILL:Once an adversary has gained access to the target system, impersonating a credential prompt is not difficult.:LEVEL:Low",SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges,"The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help."
Voice Phishing,"An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a cold call or by the victim if calling an illegitimate telephone number.",High,"An adversary needs phone numbers to initiate contact with the victim, in addition to a legitimate-looking telephone number to call the victim from.An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.If passively conducting this attack via a spoofed website, replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.","SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem."
SQL Injection,"This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.",High,"SQL queries used by the application to store, retrieve or modify data.User-controllable input that is not properly validated by the application as part of SQL queries.","SKILL:It is fairly simple for someone with basic SQL knowledge to perform SQL injection, in general. In certain instances, however, specific knowledge of the database employed may be required.:LEVEL:Low",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
Root/Jailbreak Detection Evasion via Hooking,"An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to hook code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.",Medium,The targeted application must be non-restricted to allow code hooking.,SKILL:Knowledge about Root/Jailbreak detection and evasion techniques.:LEVEL:HighSKILL:Knowledge about code hooking.:LEVEL:Medium,"SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through Root/Jailbreak Detection Evasion via Hooking, the adversary compromises the integrity of the application.SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:NOTE:An adversary may leverage Root/Jailbreak Detection Evasion via Hooking in order to obtain sensitive information.","Ensure mobile applications are signed appropriately to avoid code inclusion via hooking.Inspect the application's memory for suspicious artifacts, such as shared objects/JARs or dylibs, after other Root/Jailbreak detection methods.Inspect the application's stack trace for suspicious method calls.Allow legitimate native methods, and check for non-allowed native methods during Root/Jailbreak detection methods.For iOS applications, ensure application methods do not originate from outside of Apple's SDK."
Root/Jailbreak Detection Evasion via Debugging,"An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",Medium,A debugger must be able to be inserted into the targeted application.,SKILL:Knowledge about Root/Jailbreak detection and evasion techniques.:LEVEL:HighSKILL:Knowledge about runtime debugging.:LEVEL:Medium,"SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through Root/Jailbreak Detection Evasion via Debugging, the adversary compromises the integrity of the application.SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:NOTE:An adversary may leverage Root/Jailbreak Detection Evasion via Debugging in order to obtain sensitive information.",Instantiate checks within the application code that ensures debuggers are not attached.
Adversary in the Browser (AiTB),"An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints.",High,"The adversary must install or convince a user to install a Trojan.There are two components communicating with each other.An attacker is able to identify the nature and mechanism of communication between the two target components.Strong mutual authentication is not used between the two target components yielding opportunity for adversarial interposition.For browser pivoting, the SeDebugPrivilege and a high-integrity process must both exist to execute this attack.","SKILL:Tricking the victim into installing the Trojan is often the most difficult aspect of this attack. Afterwards, the remainder of this attack is fairly trivial.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Ensure software and applications are only downloaded from legitimate and reputable sources, in addition to conducting integrity checks on the downloaded component.Leverage anti-malware tools, which can detect Trojan Horse malware.Use strong, out-of-band mutual authentication to always fully authenticate both ends of any communications channel.Limit user permissions to prevent browser pivoting.Ensure browser sessions are regularly terminated and when their effective lifetime ends."
Exploitation of Transient Instruction Execution,"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.",Low,The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU.,"SKILL:Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations.:LEVEL:HighSKILL:Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,Implementation: DAWG (Dynamically Allocated Way Guard) - processor cache properly divided between different programs/processes that don't share resourcesImplementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tablesConfiguration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order executionConfiguration: Disable SharedArrayBuffer for Web BrowsersConfiguration: Disable Copy-on-Write between Cloud VMsConfiguration: Privilege Checks on Cache Flush InstructionsImplementation: Non-inclusive Cache Memories to prevent Flush+Reload Attacks
Server Side Request Forgery,"An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server’s internal network, or to external third parties. If successful, the adversary’s request will be made with the server’s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server’s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.",High,Server must be running a web application that processes HTTP requests.,"SKILL:The adversary will have to detect the vulnerability through an intermediary service or specify maliciously crafted URLs and analyze the server response.:LEVEL:MediumSKILL:The adversary will be required to access internal resources, extract information, or leverage the services running on the server to perform unauthorized actions such as traversing the local network or routing a reflected TCP DDoS through them.:LEVEL:High",SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption,"Handling incoming requests securely is the first line of action to mitigate this vulnerability. This can be done through URL validation.Further down the process flow, examining the response and verifying that it is as expected before sending would be another way to secure the server.Allowlist the DNS name or IP address of every service the web application is required to access is another effective security measure. This ensures the server cannot make external requests to arbitrary services.Requiring authentication for local services adds another layer of security between the adversary and internal services running on the server. By enforcing local authentication, an adversary will not gain access to all internal services only with access to the server.Enforce the usage of relevant URL schemas. By limiting requests be made only through HTTP or HTTPS, for example, attacks made through insecure schemas such as file://, ftp://, etc. can be prevented."
Exploitation of Thunderbolt Protection Flaws,"An adversary leverages a firmware weakness within the Thunderbolt protocol, on a computing device to manipulate Thunderbolt controller firmware in order to exploit vulnerabilities in the implementation of authorization and verification schemes within Thunderbolt protection mechanisms. Upon gaining physical access to a target device, the adversary conducts high-level firmware manipulation of the victim Thunderbolt controller SPI (Serial Peripheral Interface) flash, through the use of a SPI Programing device and an external Thunderbolt device, typically as the target device is booting up. If successful, this allows the adversary to modify memory, subvert authentication mechanisms, spoof identities and content, and extract data and memory from the target device. Currently 7 major vulnerabilities exist within Thunderbolt protocol with 9 attack vectors as noted in the Execution Flow.",Low,"The adversary needs at least a few minutes of physical access to a system with an open Thunderbolt port, version 3 or lower, and an external thunderbolt device controlled by the adversary with maliciously crafted software and firmware, via an SPI Programming device, to exploit weaknesses in security protections.","SKILL:Detailed knowledge on various system motherboards, PCI Express Domain, SPI, and Thunderbolt Protocol in order to interface with internal system components via external devices.:LEVEL:HighSKILL:Detailed knowledge on OS/Kernel memory address space, Direct Memory Access (DMA) mapping, Input-Output Memory Management Units (IOMMUs), and vendor memory protections for data leakage.:LEVEL:HighSKILL:Detailed knowledge on scripting and SPI programming in order to configure and modify Thunderbolt controller firmware and software configurations.:LEVEL:High",SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,Implementation: Kernel Direct Memory Access ProtectionConfiguration: Enable UEFI option USB Passthrough mode - Thunderbolt 3 system port operates as USB 3.1 Type C interfaceConfiguration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interfaceConfiguration: Enable UEFI option Mixed USB/DisplayPort mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface with support for DP modeConfiguration: Set Security Level to SL3 for Thunderbolt 2 system portConfiguration: Disable PCIe tunneling to set Security Level to SL3Configuration: Disable Boot Camp upon MacOS systems
BlueSmacking,An adversary uses Bluetooth flooding to transfer large packets to Bluetooth enabled devices over the L2CAP protocol with the goal of creating a DoS. This attack must be carried out within close proximity to a Bluetooth enabled device.,Medium,The system/application has Bluetooth enabled.,"SKILL:An adversary only needs a Linux machine along with a Bluetooth adapter, which is extremely common.:LEVEL:Low",SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption,"Disable Bluetooth when not being used.When using Bluetooth, set it to hidden or non-discoverable mode."
Bluetooth Impersonation AttackS (BIAS),An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.,Medium,Knowledge of a target device's list of trusted connections.,SKILL:Adversaries must be capable of using command line Linux tools.:LEVEL:LowSKILL:Adversaries must be in close proximity to Bluetooth devices.:LEVEL:Low,"SCOPE:Integrity:NOTE:An adversary will be impersonating another Bluetooth device, and may gain access to information pertaining to that user along with the ability to manipulate other information.SCOPE:Confidentiality:NOTE:An adversary will have unauthorized access to information.",Disable Bluetooth in public places.Verify incoming Bluetooth connections; do not automatically trust.Change default PIN passwords and always use one when connecting.
Key Negotiation of Bluetooth Attack (KNOB),"An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",Low,Person in the Middle network setup.,SKILL:Ability to modify packets.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.
Alteration of a Software Update,"An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",Medium,An adversary would need to have penetrated an organization’s software update infrastructure including gaining access to components supporting the configuration management of software versions and updates related to the software maintenance of customer systems.,"SKILL:Skills required include the ability to infiltrate the organization’s software update infrastructure either from the Internet or from within the organization, including subcontractors, and be able to change software being delivered to customer/user systems in an undetected manner.:LEVEL:High",SCOPE:Access Control:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.Require elevated privileges for distribution of software and software updates."
Software Development Tools Maliciously Altered,"An adversary with the ability to alter tools used in a development environment causes software to be developed with maliciously modified tools. Such tools include requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools. The adversary then carries out malicious acts once the software is deployed including malware infection of other systems to support further compromises.",Low,"An adversary would need to have access to a targeted developer’s development environment and in particular to tools used to design, create, test and manage software, where the adversary could ensure malicious code is included in software packages built through alteration or substitution of tools in the environment used in the development of software.","SKILL:Ability to leverage common delivery mechanisms (e.g., email attachments, removable media) to infiltrate a development environment to gain access to software development tools for the purpose of malware insertion into an existing tool or replacement of an existing tool with a maliciously altered copy.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Access Control:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Read Data,"Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.Avoid giving elevated privileges to developers."
Requirements for ASIC Functionality Maliciously Altered,"An adversary with access to functional requirements for an application specific integrated circuit (ASIC), a chip designed/customized for a singular particular use, maliciously alters requirements derived from originating capability needs. In the chip manufacturing process, requirements drive the chip design which, when the chip is fully manufactured, could result in an ASIC which may not meet the user’s needs, contain malicious functionality, or exhibit other anomalous behaviors thereby affecting the intended use of the ASIC.",Low,"An adversary would need to have access to a foundry’s or chip maker’s requirements management system that stores customer requirements for ASICs, requirements upon which the design of the ASIC is based.",SKILL:An adversary would need experience in designing chips based on functional requirements in order to manipulate requirements in such a way that deviations would not be detected in subsequent stages of ASIC manufacture and where intended malicious functionality would be available to the adversary once integrated into a system and fielded.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for hardware requirements and design.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Malicious Code Implanted During Chip Programming,"During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",Low,"An adversary would need to have access to a foundry’s or chip maker’s development/production environment where programs for specific chips are developed, managed and uploaded into targeted chips prior to distribution or sale.","SKILL:An adversary needs to be skilled in microprogramming, manipulation of configuration management systems, and in the operation of tools used for the uploading of programs into chips during manufacture. Uploading can be for individual chips or performed on a large scale basis.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Developer Signing Maliciously Altered Software,"Software produced by a reputable developer is clandestinely infected with malicious code and then digitally signed by the unsuspecting developer, where the software has been altered via a compromised software development or build process prior to being signed. The receiver or user of the software has no reason to believe that it is anything but legitimate and proceeds to deploy it to organizational systems. This attack differs from CAPEC-206, since the developer is inadvertently signing malicious code they believe to be legitimate and which they are unware of any malicious modifications.",Medium,"An adversary would need to have access to a targeted developer’s software development environment, including to their software build processes, where the adversary could ensure code maliciously tainted prior to a build process is included in software packages built.","SKILL:The adversary must have the skills to infiltrate a developer’s software development/build environment and to implant malicious code in developmental software code, a build server, or a software repository containing dependency code, which would be referenced to be included during the software build process.:LEVEL:High",SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Execute Unauthorized Commands,"Have a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools.Employ intrusion detection and malware detection capabilities on IDE systems where feasible."
Design for FPGA Maliciously Altered,"An adversary alters the functionality of a field-programmable gate array (FPGA) by causing an FPGA configuration memory chip reload in order to introduce a malicious function that could result in the FPGA performing or enabling malicious functions on a host system. Prior to the memory chip reload, the adversary alters the program for the FPGA by adding a function to impact system operation.",Low,An adversary would need to have access to FPGA programming/configuration-related systems in a chip maker’s development environment where FPGAs can be initially configured prior to delivery to a customer or have access to such systems in a customer facility where end-user FPGA configuration/reconfiguration can be performed.,"SKILL:An adversary would need to be skilled in FPGA programming in order to create/manipulate configurations in such a way that when loaded into an FPGA, the end user would be able to observe through testing all user-defined required functions but would be unaware of any additional functions the adversary may have introduced.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Retrieve Data from Decommissioned Devices,"An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",Medium,"An adversary needs to have access to electronic data processing equipment being recycled or disposed of (e.g., laptops, servers) at a collection location and the ability to take control of it for the purpose of exploiting its content.","SKILL:An adversary may need the ability to mount printed circuit boards and target individual chips for exploitation.:LEVEL:HighSKILL:An adversary needs the technical skills required to extract solid state drives, hard disk drives, and other storage media to host on a compatible system or harness to gain access to digital content.:LEVEL:Medium",SCOPE:Accountability:TECHNICAL IMPACT:Bypass Protection Mechanism,"Backup device data before erasure to retain intellectual property and inside knowledge.Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.Use a secure erase software.Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.Physically destroy memory and SIM cards for mobile devices not intended to be reused.Ensure that the user account has been terminated or switched to a new device before destroying."
NoSQL Injection,"An adversary targets software that constructs NoSQL statements based on user input or with parameters vulnerable to operator replacement in order to achieve a variety of technical impacts such as escalating privileges, bypassing authentication, and/or executing code.",High,"Awareness of the technology stack being leveraged by the target application.NoSQL queries used by the application to store, retrieve, or modify data.User-controllable input that is not properly validated by the application as part of NoSQL queries.Target potentially susceptible to operator replacement attacks.","SKILL:For keyword and JavaScript injection attacks, it is fairly simple for someone with basic NoSQL knowledge to perform NoSQL injection, once the target's technology stack has been determined.:LEVEL:LowSKILL:For operator replacement attacks, the adversary must also have knowledge of HTTP Parameter Pollution attacks and how to conduct them.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as relevant NoSQL and JavaScript content. NoSQL-specific keywords, such as $ne, $eq or $gt for MongoDB, must be filtered in addition to characters such as a single-quote(') or semicolons (;) based on the context in which they appear. Validation should also extend to expected types.If possible, leverage safe APIs (e.g., PyMongo and Flask-PyMongo for Python and MongoDB) for queries as opposed to building queries from strings.Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.Use of custom error pages - Adversaries can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.Exercise the principle of Least Privilege with regards to application accounts to minimize damage if a NoSQL injection attack is successful.If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as mongo-sanitize.If using PHP with MongoDB, ensure all special query operators (starting with $) use single quotes to prevent operator replacement attacks.Additional mitigations will depend on the NoSQL database, API, and programming language leveraged by the application."
Exploitation of Improperly Configured or Implemented Memory Protections,An adversary takes advantage of missing or incorrectly configured access control within memory to read/write data or inject malicious code into said memory.,Medium,Access to the hardware being leveraged.,SKILL:Ability to craft malicious code to inject into the memory region.:LEVEL:MediumSKILL:Intricate knowledge of memory structures.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Ensure that protected and unprotected memory ranges are isolated and do not overlap.If memory regions must overlap, leverage memory priority schemes if memory regions can overlap.Ensure that original and mirrored memory regions apply the same protections.Ensure immutable code or data is programmed into ROM or write-once memory."
Subvert Code-signing Facilities,Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.,Low,"A framework-based language that supports code signing (such as, and most commonly, Java or .NET)Deployed code that has been signed by its authoring vendor, or a partner.The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated.","SKILL:Subverting code signing is not a trivial activity. Most code signing and verification schemes are based on use of cryptography and the attacker needs to have an understanding of these cryptographic operations in good detail. Additionally the attacker also needs to be aware of the way memory is assigned and accessed by the container since, often, the only way to subvert code signing would be to patch the code in memory. Finally, a knowledge of the platform specific mechanisms of signing and verifying code is a must.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable."
Exploitation of Improperly Controlled Registers,An adversary exploits missing or incorrectly configured access control within registers to read/write data that is not meant to be obtained or modified by a user.,Medium,Awareness of the hardware being leveraged.Access to the hardware being leveraged.,SKILL:Intricate knowledge of registers.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.Ensure security lock bit protections are reviewed for design inconsistencies and common weaknesses.Test security lock programming flow in both pre-silicon and post-silicon environments.Leverage automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.Ensure that measurement data is stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent.
Exploitation of Improperly Controlled Hardware Security Identifiers,"An adversary takes advantage of missing or incorrectly configured security identifiers (e.g., tokens), which are used for access control within a System-on-Chip (SoC), to read/write data or execute a given action.",Medium,Awareness of the hardware being leveraged.Access to the hardware being leveraged.,SKILL:Ability to execute actions within the SoC.:LEVEL:MediumSKILL:Intricate knowledge of the identifiers being utilized.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Review generation of security identifiers for design inconsistencies and common weaknesses.Review security identifier decoders for design inconsistencies and common weaknesses.Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments."
Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities,"An adversary may exploit vulnerable code (i.e., firmware or ROM) that is unpatchable. Unpatchable devices exist due to manufacturers intentionally or inadvertently designing devices incapable of updating their software. Additionally, with updatable devices, the manufacturer may decide not to support the device and stop making updates to their software.",Medium,"Awareness of the hardware being leveraged.Access to the hardware being leveraged, either physically or remotely.",SKILL:Knowledge of various wireless protocols to enable remote access to vulnerable devices:LEVEL:MediumSKILL:Ability to identify physical entry points such as debug interfaces if the device is not being accessed remotely:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means
Target Programs with Elevated Privileges,This attack targets programs running with elevated privileges. The adversary tries to leverage a vulnerability in the running program and get arbitrary code to execute with elevated privileges.,High,"The targeted program runs with elevated OS privileges.The targeted program accepts input data from the user or from another program.The targeted program is giving away information about itself. Before performing such attack, an eventual attacker may need to gather information about the services running on the host target. The more the host target is verbose about the services that are running (version number of application, etc.) the more information can be gather by an attacker.This attack often requires communicating with the host target services directly. For instance Telnet may be enough to communicate with the host target.","SKILL:An attacker can use a tool to scan and automatically launch an attack against known issues. A tool can also repeat a sequence of instructions and try to brute force the service on the host target, an example of that would be the flooding technique.:LEVEL:LowSKILL:More advanced attack may require knowledge of the protocol spoken by the host service.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Apply the principle of least privilege.Validate all untrusted data.Apply the latest patches.Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them.Avoid revealing information about your system (e.g., version of the program) to anonymous users.Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs.If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage.Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.Monitor traffic and resource usage and pay attention if resource exhaustion occurs.Protect your log file from unauthorized modification and log forging."
Metadata Spoofing,"An adversary alters the metadata of a resource (e.g., file, directory, repository, etc.) to present a malicious resource as legitimate/credible.",Medium,Identification of a resource whose metadata is to be spoofed,SKILL:Ability to spoof a variety of metadata to convince victims the source is trusted:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,"Validate metadata of resources such as authors, timestamps, and statistics.Confirm the pedigree of open source packages and ensure the code being downloaded does not originate from another source.Even if the metadata is properly checked and a user believes it to be legitimate, there may still be a chance that they've been duped. Therefore, leverage automated testing techniques to determine where malicious areas of the code may exist."
Spoof Open-Source Software Metadata,"An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.",Medium,Identification of a popular open-source component whose metadata is to be spoofed.,SKILL:Ability to spoof a variety of software metadata to convince victims the source is trusted.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Within package managers, look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source software from reputable hosting sites or package managers.Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.After downloading open-source software, ensure integrity values have not changed.Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
Spoof Version Control System Commit Metadata,"An adversary spoofs metadata pertaining to a Version Control System (VCS) (e.g., Git) repository's commits to deceive users into believing that the maliciously provided software is frequently maintained and originates from a trusted source.",Medium,Identification of a popular open-source repository whose metadata is to be spoofed.,SKILL:Ability to spoof a variety of repository metadata to convince victims the source is trusted.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source software from reputable hosting sites or package managers.Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.After downloading open-source software, ensure integrity values have not changed.Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
StarJacking,An adversary spoofs software popularity metadata to deceive users into believing that a maliciously provided package is widely used and originates from a trusted source.,Medium,Identification of a popular open-source package whose popularity metadata is to be used for the malicious package.,SKILL:Ability to provide a package to a package manager and associate a popular package's source code repository URL.:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source packages, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source packages from reputable package managers.After downloading open-source packages, ensure integrity values have not changed.Before executing or incorporating the package, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
System Location Discovery,"An adversary collects information about the target system in an attempt to identify the system's geographical location. Information gathered could include keyboard layout, system language, and timezone. This information may benefit an adversary in confirming the desired target and/or tailoring further attacks.",High,The adversary must have some level of access to the system and have a basic understanding of the operating system in order to query the appropriate sources for relevant information.,SKILL:The adversary must know how to query various system sources of information respective of the system's operating system to obtain the relevant information.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation."
Repo Jacking,An adversary takes advantage of the redirect property of directly linked Version Control System (VCS) repositories to trick users into incorporating malicious code into their applications.,Medium,Identification of a popular repository that may be directly referenced in numerous software applicationsA repository owner/maintainer who has recently changed their username or deleted their account,SKILL:Ability to create an account on a VCS hosting site and recreate an existing directory structure.:LEVEL:LowSKILL:Ability to create malware that can exploit various software applications.:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Leverage dedicated package managers instead of directly linking to VCS repositories.Utilize version pinning and lock files to prevent use of maliciously modified repositories.Implement vendoring (i.e., including third-party dependencies locally) and leverage automated testing techniques (e.g., static analysis) to determine if the software behaves maliciously.Leverage automated tools, such as Checkmarx's ChainJacking tool, to determine susceptibility to Repo Jacking attacks."
Load Value Injection,"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",Low,The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU.The CPU incorrectly transiently forwards values from microarchitectural buffers after faulting or assisted loadsThe adversary needs the ability to induce page faults or microcode assists on the target system.Code gadgets exist that allow the adversary to hijack transient execution and encode secrets into the microarchitectural state.,"SKILL:Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations.:LEVEL:HighSKILL:Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage.:LEVEL:HighSKILL:The ability to provoke faulting or assisted loads in legitimate execution.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,"Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.Insert explicit “lfence” speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded."
DHCP Spoofing,"An adversary masquerades as a legitimate Dynamic Host Configuration Protocol (DHCP) server by spoofing DHCP traffic, with the goal of redirecting network traffic or denying service to DHCP.",Low,The adversary must have access to a machine within the target LAN which can send DHCP offers to the target.,SKILL:The adversary must identify potential targets for DHCP Spoofing and craft network configurations to obtain the desired results.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read DataSCOPE:Integrity:SCOPE:Access Control:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption,Design: MAC-Forced ForwardingImplementation: Port Security and DHCP snoopingImplementation: Network-based Intrusion Detection Systems
Install Malicious Extension,"An adversary directly installs or tricks a user into installing a malicious extension into existing trusted software, with the goal of achieving a variety of negative technical impacts.",Medium,"The adversary must craft malware based on the type of software and system(s) they intend to exploit.If the adversary intends to install the malicious extension themself, they must first compromise the target machine via some other means.",SKILL:Ability to create malicious extensions that can exploit specific software applications and systems.:LEVEL:MediumSKILL:Optional: Ability to exploit target system(s) via other means in order to gain entry.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read DataSCOPE:Integrity:SCOPE:Access Control:TECHNICAL IMPACT:Modify DataSCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Only install extensions/plugins from official/verifiable sources.Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.Implement an extension/plugin allow list, based on the given security policy.If applicable, confirm extensions/plugins are properly signed by the official developers.For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background."
Eavesdropping on a Monitor,"An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security tools",Medium,Victim should use an external monitor devicePhysical access to the target location and devices,"SKILL:Knowledge of how to use the SDR and related software: With this knowledge, the adversary will find the correct frequency where the signal is being leaked:LEVEL:MediumSKILL:Understanding of computing hardware, to identify the video cable and video ports:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).Implement: Use wireless technologies to connect to external display devices."
Blind SQL Injection,"Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",High,"SQL queries used by the application to store, retrieve or modify data.User-controllable input that is not properly validated by the application as part of SQL queries.","SKILL:Determining the database type and version, as well as the right number and type of parameters to the query being injected in the absence of error messages requires greater skill than reverse-engineering database error messages.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear."
Try Common or Default Usernames and Passwords,"An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. secret or password) that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.",Medium,The system uses one factor password based authentication.The adversary has the means to interact with the system.,"SKILL:An adversary just needs to gain access to common default usernames/passwords specific to the technologies used by the system. Additionally, a brute force attack leveraging common passwords can be easily realized if the user name is known.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Delete all default account credentials that may be put in by the product vendor.Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
Network Boundary Bridging,"An adversary which has gained elevated access to network boundary devices may use these devices to create a channel to bridge trusted and untrusted networks. Boundary devices do not necessarily have to be on the network’s edge, but rather must serve to segment portions of the target network the adversary wishes to cross into.",Medium,The adversary must have control of a network boundary device.,SKILL:The adversary must understand how to manage the target network device to create or edit policies which will bridge networks.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Hide Activities,"Design: Ensure network devices are storing credentials in encrypted storesDesign: Follow the principle of least privilege and restrict administrative duties to as few accounts as possible. Ensure these privileged accounts are secured with strong credentials which do not overlap with other network devices.Configuration: When possible, configure network boundary devices to use MFA.Configuration: Change the default configuration for network devices to harden their security profiles. Default configurations are often enabled with insecure features to allow ease of installation and management. However, these configurations can be easily discovered and exploited by adversaries.Implementation: Perform integrity checks on audit logs for network device management and review them to identify abnormalities in configurations.Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering."
Browser in the Middle (BiTM),"An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.",Medium,"The adversary must create a convincing web client to establish the connection. The victim then needs to be lured onto the adversary's webpage. In addition, the victim's machine must not use local authentication APIs, a hardware token, or a Trusted Platform Module (TPM) to authenticate.",SKILLLEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges:LIKELIHOOD:HighSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data:LIKELIHOOD:HighSCOPE:Integrity:TECHNICAL IMPACT:Modify Data:LIKELIHOOD:Medium,"Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel"
Exploiting Incorrect Chaining or Granularity of Hardware Debug Components,An adversary exploits incorrect chaining or granularity of hardware debug components in order to gain unauthorized access to debug functionality on a chip. This happens when authorization is not checked on a per function basis and is assumed for a chain or group of debug functionality.,Low,Hardware device has an exposed debug interface,SKILL:Ability to identify physical debug interfaces on a device:LEVEL:MediumSKILL:Ability to operate devices to scan and connect to an exposed debug interface:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Implement: Ensure that debug components are properly chained, and their granularity is maintained at different authorization levelsPerform Post-silicon validation tests at various authorization levels to ensure that debug components are only accessible to authorized users"
Using Unicode Encoding to Bypass Validation Logic,An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.,Medium,Filtering is performed on data that has not be properly canonicalized.,SKILL:An attacker needs to understand Unicode encodings and have an idea (or be able to find out) what system components may not be Unicode aware.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.Ensure that filtering or input validation is applied to canonical data.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.
URL Encoding,This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.,High,The application should accepts and decodes URL input.The application performs insufficient filtering/canonicalization on the URLs.,SKILL:An adversary can try special characters in the URL and bypass the URL validation.:LEVEL:LowSKILL:The adversary may write a script to defeat the input filtering mechanism.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Refer to the RFCs to safely decode URL.Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible."
User-Controlled Filename,"An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",High,The victim must trust the name and locale of user controlled filenames.,"SKILL:To achieve a redirection and use of less trusted source, an attacker can simply edit data that the host uses to build the filename:LEVEL:LowSKILL:Deploying a malicious look-a-like site (such as a site masquerading as a bank or online auction site) that the user enters their authentication data into.:LEVEL:MediumSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Availability:TECHNICAL IMPACT:Alter Execution LogicSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Design: Use browser technologies that do not allow client side scripting.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Scan dynamically generated content against validation specification
Manipulating State,"The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner. State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits. If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.",Medium,"User state is maintained at least in some way in user-controllable locations, such as cookies or URL parameters.There is a faulty finite state machine in the hardware logic that can be exploited.","SKILL:The adversary needs to have knowledge of state management as employed by the target application, and also the ability to manipulate the state in a meaningful way.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.All possible states must be handled by hardware finite state machines."
Manipulating Writeable Configuration Files,"Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.",High,Configuration files must be modifiable by the attacker,"SKILL:To identify vulnerable configuration files, and understand how to manipulate servers and erase forensic evidence:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Backup copies of all configuration filesImplementation: Integrity monitoring for configuration filesImplementation: Enforce audit logging on code and configuration promotion procedures.Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD"
Manipulating Web Input to File System Calls,"An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.",High,Program must allow for user controlled variables to be applied directly to the filesystem,SKILL:To identify file system entry point and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: Enforce principle of least privilege.Design: Ensure all input is validated, and does not contain file system commandsDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."
Manipulating User-Controlled Variables,"This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",High,A variable consumed by the application server is exposed to the client.A variable consumed by the application server can be overwritten by the user.The application server trusts user supplied data to compute business logic.The application server does not perform proper input validation.,SKILL:The malicious user can easily try some well-known global variables and find one which matches.:LEVEL:LowSKILL:The adversary can use automated tools to probe for variables that they can control.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.Use encapsulation when declaring your variables. This is to lower the exposure of your variables.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program."
Using Escaped Slashes in Alternate Encoding,"This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",High,"The application accepts the backlash character as escape character.The application server does incomplete input data decoding, filtering and validation.",SKILL:The adversary can naively try backslash character and discover that the target host uses it as escape character.:LEVEL:LowSKILL:The adversary may need deep understanding of the host target in order to exploit the vulnerability. The adversary may also use automated tools to probe for this vulnerability.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of ServiceSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Verify that the user-supplied data does not use backslash character to escape malicious characters.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.Be aware of the threat of alternative method of data encoding.Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names."
Using Slashes in Alternate Encoding,"This attack targets the encoding of the Slash characters. An adversary would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the adversary many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.",High,The application server accepts paths to locate resources.The application server does insufficient input data validation on the resource path requested by the user.The access right to resources are not set properly.,SKILL:An adversary can try variation of the slashes characters.:LEVEL:LowSKILL:An adversary can use more sophisticated tool or script to scan a website and find a path filtering problem.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)Test your path decoding process against malicious input.In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.Assume all input is malicious. Create an allowlist that defines all valid input to the application based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system."
Buffer Overflow in an API Call,"This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",High,The target host exposes an API to the user.One or more API functions exposed by the target host has a buffer overflow vulnerability.,SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Use a language or compiler that performs automatic bounds checking.Use secure functions not vulnerable to buffer overflow.If you have to use dangerous functions, make sure that you do boundary checking.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution."
Using UTF-8 Encoding to Bypass Validation Logic,"This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the shortest possible encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",High,The application's UTF-8 decoder accepts and interprets illegal UTF-8 characters or non-shortest format of UTF-8 encoding.Input filtering and validating is not done properly leaving the door open to harmful characters for the target host.,SKILL:An attacker can inject different representation of a filtered character in UTF-8 format.:LEVEL:LowSKILL:An attacker may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: 1. Insert a replacement character (e.g. '?', ''). 2. Ignore the bytes. 3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). 4. Not notice and decode as if the bytes were some similar bit of UTF-8. 5. Stop decoding and report an error (possibly giving the caller the option to continue). It is possible for a decoder to behave in different ways for different types of invalid input. RFC 3629 only requires that UTF-8 decoders must not decode overlong sequences (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to ...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence. Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input."
Web Server Logs Tampering,"Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to Log Injection-Tampering-Forging except that in this case, the attack is targeting the logs of the web server and not the application.",Medium,Target server software must be a HTTP server that performs web logging.,SKILL:To input faked entries into Web logs:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: Use input validation before writing to web logDesign: Validate all log data before it is output
XPath Injection,"An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",High,XPath queries used to retrieve information stored in XML documentsUser-controllable input not properly sanitized before being used as part of XPath queries,SKILL:XPath Injection shares the same basic premises with SQL Injection. An attacker must have knowledge of XPath syntax and constructs in order to successfully leverage XPath Injection:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
XQuery Injection,"This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",High,The XQL must execute unvalidated data,SKILL:Basic understanding of XQuery:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Design: Perform input allowlist validation on all XML inputImplementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.
AJAX Footprinting,"This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",High,The user must allow JavaScript to execute in their browser,SKILL:To land and launch a script on victim's machine with appropriate footprinting logic for enumerating services and vulnerabilities in JavaScript:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Design: Use browser technologies that do not allow client side scripting.Implementation: Perform input validation for all remote content.
XSS Through HTTP Headers,"An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.",High,Target software must be a client that allows scripting communication from remote hosts.,"SKILL:To achieve a redirection and use of less trusted source, an adversary can simply edit HTTP Headers that are sent to client machine.:LEVEL:LowSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Disable scripting languages such as JavaScript in browserImplementation: Session tokens for specific hostImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
Forceful Browsing,"An attacker employs forceful browsing (direct URL entry) to access portions of a website that are otherwise unreachable. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.",High,The forcibly browseable pages or accessible resources must be discoverable and improperly protected.,SKILL:Forcibly browseable pages can be discovered by using a number of automated tools. Doing the same manually is tedious but by no means difficult.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context."
OS Command Injection,"In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",High,User controllable input used as part of commands to the underlying operating system.,"SKILL:The attacker needs to have knowledge of not only the application to exploit but also the exact nature of commands that pertain to the target operating system. This may involve, though not always, knowledge of specific assembly commands for the platform.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commandsAll application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them."
Pharming,"A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",High,Vulnerable DNS software or improperly protected hosts file or router that can be poisonedA website that handles sensitive information but does not use a secure connection and a certificate that is valid is also prone to pharming,"SKILL:The attacker needs to be able to poison the resolver - DNS entries or local hosts file or router entry pointing to a trusted DNS server - in order to successfully carry out a pharming attack. Setting up a fake website, identical to the targeted one, does not require special skills.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"All sensitive information must be handled over a secure connection.Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority."
Buffer Overflow in Local Command-Line Utilities,This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.,High,The target host exposes a command-line utility to the user.The command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited.,SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.Use a language or compiler that performs automatic bounds checking.Use an abstraction library to abstract away risky APIs. Not a complete solution.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Operational: Use OS-level preventative functionality. Not a complete solution.Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.Do not unnecessarily expose services."
Reflection Attack in Authentication Protocol,"An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",High,"The attacker must have direct access to the target server in order to successfully mount a reflection attack. An intermediate entity, such as a router or proxy, that handles these exchanges on behalf of the attacker inhibits the attackers' ability to attack the authentication protocol.",SKILL:The attacker needs to have knowledge of observing the protocol exchange and managing the required connections in order to issue and respond to challenges:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any furtherThe use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol"
Forced Integer Overflow,"This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",High,"The attacker can manipulate the value of an integer variable utilized by the target host.The target host does not do proper range checking on the variable before utilizing it.When the integer variable is incremented or decremented to an out of range value, it gets a very different value (e.g. very small or negative number)",SKILL:An attacker can simply overflow an integer by inserting an out of range value.:LEVEL:LowSKILL:Exploiting a buffer overflow by injecting malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,Use a language or compiler that performs automatic bounds checking.Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.Use an abstraction library to abstract away risky APIs. Not a complete solution.Always do bound checking before consuming user input data.
Log Injection-Tampering-Forging,"This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing them to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.",High,The target host is logging the action and data of the user.The target host insufficiently protects access to the logs or logging mechanisms.,SKILL:This attack can be as simple as adding extra characters to the logged data (e.g. username). Adding entries is typically easier than removing entries.:LEVEL:LowSKILL:A more sophisticated attack can try to defeat the input validation mechanism.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Carefully control access to physical log files.Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.Use synchronization to control the flow of execution.Use static analysis tools to identify log forging vulnerabilities.Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells."
Adversary in the Middle (AiTM),"An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.",High,There are two components communicating with each other.An attacker is able to identify the nature and mechanism of communication between the two target components.An attacker can eavesdrop on the communication between the target components.Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption.,SKILL:This attack can get sophisticated since the attack may use cryptography.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Ensure Public Keys are signed by a Certificate AuthorityEncrypt communications using cryptography (e.g., SSL/TLS)Use Strong mutual authentication to always fully authenticate both ends of any communications channel.Exchange public keys using a secure channel"
WSDL Scanning,"This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.",High,A client program connecting to a web service can read the WSDL to determine what functions are available on the server.The target host exposes vulnerable functions within its WSDL interface.,"SKILL:This attack can be as simple as reading WSDL and starting sending invalid request.:LEVEL:LowSKILL:This attack can be used to perform more sophisticated attacks (SQL injection, etc.):LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,It is important to protect WSDL file or provide limited access to it.Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.Validate the received messages against the WSDL Schema. Incomplete solution.
Block Access to Libraries,"An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. It is possible that the application does not handle situations properly where access to these libraries has been blocked. Depending on the error handling within the application, blocked access to libraries may leave the system in an insecure state that could be leveraged by an attacker.",Medium,An application requires access to external libraries.An attacker has the privileges to block application access to external libraries.,"SKILL:Knowledge of how to block access to libraries, as well as knowledge of how to leverage the resulting state of the application based on the failed call.:LEVEL:Low",SCOPE:Availability:TECHNICAL IMPACT:Alter Execution LogicSCOPE:Confidentiality:TECHNICAL IMPACT:OtherSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Ensure that application handles situations where access to APIs in external libraries is not available securely. If the application cannot continue its execution safely it should fail in a consistent and secure fashion.
Cryptanalysis,"Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).",Low,The target software utilizes some sort of cryptographic algorithm.An underlying weaknesses exists either in the cryptographic algorithm used or in the way that it was applied to a particular chunk of plaintext.The encryption algorithm is known to the attacker.An attacker has access to the ciphertext.,SKILL:Cryptanalysis generally requires a very significant level of understanding of mathematics and computation.:LEVEL:High,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:In most cases, if cryptanalysis is successful at all, an adversary will not be able to decrypt the entire message, but instead will only be able to deduce some information about the plaintext. However, that may be sufficient for an adversary, depending on the context of the attack.",Use proven cryptographic algorithms with recommended key sizes.Ensure that the algorithms are used properly. That means: 1. Not rolling out your own crypto; Use proven algorithms and implementations. 2. Choosing initialization vectors with sufficiently random numbers 3. Generating key material using good sources of randomness and avoiding known weak keys 4. Using proven protocols and their implementations. 5. Picking the most appropriate cryptographic algorithm for your usage context and data
Phishing,Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.,High,An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.,"SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind."
Overflow Buffers,"Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.",High,Targeted software performs buffer operations.Targeted software inadequately performs bounds-checking on buffer operations.Adversary has the capability to influence the input to buffer operations.,"SKILL:In most cases, overflowing a buffer does not require advanced skills beyond the ability to notice an overflow and stuff an input variable with content.:LEVEL:LowSKILL:In cases of directed overflows, where the motive is to divert the flow of the program or application as per the adversaries' bidding, high level skills are required. This may involve detailed knowledge of the target system architecture and kernel.:LEVEL:High",SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a language or compiler that performs automatic bounds checking.Use secure functions not vulnerable to buffer overflow.If you have to use dangerous functions, make sure that you do boundary checking.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution.Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software."
Server Side Include (SSI) Injection,"An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",High,A web server that supports server side includes and has them enabledUser controllable input that can carry include directives to the web server,"SKILL:The attacker needs to be aware of SSI technology, determine the nature of injection and be able to craft input that results in the SSI directives being executed.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need themAll user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directiveServer Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead"
HTTP Request Splitting,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",Medium,"An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.HTTP headers capable of being user-manipulated.HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.
Path Traversal,"An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or ) and/or dots (.)) to reach desired directories or files.",High,The attacker must be able to control the path that is requested of the target.The target must fail to adequately sanitize incoming paths,SKILL:Simple command line attacks or to inject the malicious payload in a web page.:LEVEL:LowSKILL:Customizing attacks to bypass non trivial filters in the application.:LEVEL:Medium,"SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.","Design: Configure the access control correctly.Design: Enforce principle of least privilege.Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.Implementation: Perform input validation for all remote content, including remote and user-generated content.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.Implementation: Use indirect references rather than actual file names.Implementation: Use possible permissions on file access when developing and deploying web applications.Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach."
LDAP Injection,"An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.",High,"The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.","SKILL:The attacker needs to have knowledge of LDAP, especially its query syntax.:LEVEL:Medium",SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.
Exponential Data Expansion,"An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",High,This type of attack requires that the target must receive input but either fail to provide an upper limit for entity expansion or provide a limit that is so large that it does not preclude significant resource consumption.,SKILL:Ability to craft nested data expansion messages.:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources."
XML Routing Detour Attacks,"An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",High,The targeted system must have multiple stages processing of XML content.,SKILL:To inject a bogus node in the XML routing table:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.Implementation: Use SSL for connections between all parties with mutual authentication.
Fingerprinting,"An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",High,A means by which to interact with the target system directly.,"SKILL:Some fingerprinting activity requires very specific knowledge of how different operating systems respond to various TCP/IP requests. Application fingerprinting can be as easy as envoking the application with the correct command line argument, or mouse clicking in the appropriate place on the screen.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible."
XML Injection,"An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.",High,XML queries used to process user input and retrieve information stored in XML documentsUser-controllable input not properly sanitized,SKILL:An attacker must have knowledge of XML syntax and constructs in order to successfully leverage XML Injection:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.
HTTP Response Smuggling,"An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server). See CanPrecede relationships for possible consequences.",Medium,"A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).Differences in the way the two HTTP agents parse and interpret HTTP responses and its headers.HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid charactersConfiguration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
HTTP Request Smuggling,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",Medium,"An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid charactersConfiguration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
HTTP Response Splitting,"An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site. See CanPrecede relationships for possible consequences.",Medium,"A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.HTTP headers capable of being user-manipulated.HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.","SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:MediumSKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:MediumSKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.Configuration: front-end HTTP agents notice ambiguous requests.Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.Configuration: Disable reuse of back-end connections.Configuration: Use HTTP/2 for back-end connections.Configuration: Use the same web server software for front-end and back-end server.Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.
Embedding NULL Bytes,An adversary embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).,High,The program does not properly handle postfix NULL terminators,SKILL:Directory traversal:LEVEL:MediumSKILL:Execution of arbitrary code:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.
Session Credential Falsification through Prediction,This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.,High,"The target host uses session IDs to keep track of the users.Session IDs are used to control access to resources.The session IDs used by the target host are predictable. For example, the session IDs are generated using predictable information (e.g., time).",SKILL:There are tools to brute force session ID. Those tools require a low level of knowledge.:LEVEL:LowSKILL:Predicting Session ID may require more computation work which uses advanced analysis such as statistical analysis.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a strong source of randomness to generate a session ID.Use adequate length session IDsDo not use information available to the user in order to generate session ID (e.g., time).Ideas for creating random numbers are offered by Eastlake [RFC1750]Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format."
Session Fixation,"The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.",Medium,Session identifiers that remain unchanged when the privilege levels change.Permissive session management mechanism that accepts random user-generated session identifiersPredictable session identifiers,SKILL:Only basic skills are required to determine and fixate session identifiers in a user's browser. Subsequent attacks may require greater skill levels depending on the attackers' motives.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult."
Cross-Site Scripting (XSS),"An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.",High,"Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.","SKILL:To achieve a redirection and use of less trusted source, an attacker can simply place a script in bulletin board, blog, wiki, or other user-generated content site that are echoed back to other client machines.:LEVEL:LowSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Session tokens for specific hostImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
SQL Injection,"This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.",High,"SQL queries used by the application to store, retrieve or modify data.User-controllable input that is not properly validated by the application as part of SQL queries.","SKILL:It is fairly simple for someone with basic SQL knowledge to perform SQL injection, in general. In certain instances, however, specific knowledge of the database employed may be required.:LEVEL:Low",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
XPath Injection,"An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",High,XPath queries used to retrieve information stored in XML documentsUser-controllable input not properly sanitized before being used as part of XPath queries,SKILL:XPath Injection shares the same basic premises with SQL Injection. An attacker must have knowledge of XPath syntax and constructs in order to successfully leverage XPath Injection:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
XQuery Injection,"This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",High,The XQL must execute unvalidated data,SKILL:Basic understanding of XQuery:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Design: Perform input allowlist validation on all XML inputImplementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.
Forceful Browsing,"An attacker employs forceful browsing (direct URL entry) to access portions of a website that are otherwise unreachable. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.",High,The forcibly browseable pages or accessible resources must be discoverable and improperly protected.,SKILL:Forcibly browseable pages can be discovered by using a number of automated tools. Doing the same manually is tedious but by no means difficult.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context."
OS Command Injection,"In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",High,User controllable input used as part of commands to the underlying operating system.,"SKILL:The attacker needs to have knowledge of not only the application to exploit but also the exact nature of commands that pertain to the target operating system. This may involve, though not always, knowledge of specific assembly commands for the platform.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commandsAll application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them."
Forced Integer Overflow,"This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",High,"The attacker can manipulate the value of an integer variable utilized by the target host.The target host does not do proper range checking on the variable before utilizing it.When the integer variable is incremented or decremented to an out of range value, it gets a very different value (e.g. very small or negative number)",SKILL:An attacker can simply overflow an integer by inserting an out of range value.:LEVEL:LowSKILL:Exploiting a buffer overflow by injecting malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,Use a language or compiler that performs automatic bounds checking.Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.Use an abstraction library to abstract away risky APIs. Not a complete solution.Always do bound checking before consuming user input data.
Wi-Fi Jamming,"In this attack scenario, the attacker actively transmits on the Wi-Fi channel to prevent users from transmitting or receiving data from the targeted Wi-Fi network. There are several known techniques to perform this attack – for example: the attacker may flood the Wi-Fi access point (e.g. the retransmission device) with deauthentication frames. Another method is to transmit high levels of noise on the RF band used by the Wi-Fi network.",Medium,Lack of anti-jam features in 802.11Lack of authentication on deauthentication/disassociation packets on 802.11-based networks,SKILL:This attack can be performed by low capability attackers with freely available tools. Commercial tools are also available that can target select networks or all WiFi networks within a range of several miles.:LEVEL:Low,"SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:A successful attack will deny the availability of the Wi-fi network to authorized users.SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:The attacker's goal is to prevent users from accessing the wireless network. Denying connectivity to the wireless network prevents the user from being able to transmit or receive any data, which also prevents VOIP calls, however this attack poses no threat to data confidentiality.","Countermeasures have been proposed for both disassociation flooding and RF jamming, however these countermeasures are not standardized and would need to be supported on both the retransmission device and the handset in order to be effective. Commercial products are not currently available that support jamming countermeasures for Wi-Fi."
Accessing Functionality Not Properly Constrained by ACLs,"In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",High,"The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.The various resources, or individual URLs, must be somehow discoverable by the attackerThe administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.","SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic."
Cause Web Server Misclassification,"An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.",Medium,Web server software must rely on file name or file extension for processing.The attacker must be able to make HTTP requests to the web server.,"SKILL:To modify file name or file extension:LEVEL:LowSKILL:To use misclassification to force the Web server to disclose configuration information, source, or binary data:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Implementation: Server routines should be determined by content not determined by filename or file extension.
Privilege Abuse,An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.,High,"The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources.",SKILL:Adversary can leverage privileged features they already have access to without additional effort or skill. Adversary is only required to have access to an account with improper priveleges.:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.
Directory Indexing,"An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",High,The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.The adversary must be able to control the path that is requested of the target.The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.The server version or patch level must not inherently prevent known directory listing attacks from working.,SKILL:To issue the request to URL without given a specific file name:LEVEL:LowSKILL:To bypass the access control of the directory of listings:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information Leakage,"1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message."
Subverting Environment Variable Values,The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.,High,An environment variable is accessible to the user.An environment variable used by the application can be tainted with user supplied data.Input data used in an environment variable is not validated properly.The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an adversary may attempt to manipulate that variable.,"SKILL:In a web based scenario, the client controls the data that it submitted to the server. So anybody can try to send malicious data and try to bypass the authentication mechanism.:LEVEL:LowSKILL:Some more advanced attacks may require knowledge about protocols and probing technique which help controlling a variable. The malicious user may try to understand the authentication mechanism in order to defeat it.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Accountability:TECHNICAL IMPACT:Hide Activities,Protect environment variables against unauthorized read and write access.Protect the configuration files which contain environment variables against illegitimate read and write access.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.
Symlink Attack,"An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.",Low,The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The adversary must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear.,SKILL:To create symlinks:LEVEL:LowSKILL:To identify the files and create the symlinks during the file operation time window:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information LeakageSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions."
Redirect Access to Libraries,"An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",High,The target must utilize external libraries and must fail to verify the integrity of these libraries before using them.,SKILL:To modify the entries in the configuration file pointing to malicious libraries:LEVEL:LowSKILL:To force symlink and timing issues for redirecting access to libraries:LEVEL:MediumSKILL:To reverse engineering the libraries and inject malicious code into the libraries:LEVEL:High,SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Implementation: Restrict the permission to modify the entries in the configuration file.Implementation: Check the integrity of the dynamically linked libraries before use them.Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.
Spear Phishing,"An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.",High,None. Any user can be targeted by a Spear Phishing attack.,"SKILL:Spear phishing attacks require specific knowledge of the victims being targeted, such as which bank is being used by the victims, or websites they commonly log into (Google, Facebook, etc).:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information LeakageSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges:NOTE:Privilege EscalationSCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:Data Modification,"Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind."
Footprinting,An adversary engages in probing and exploration activities to identify constituents and properties of the target.,High,"An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack.","SKILL:The adversary knows how to send HTTP request, run the scan tool.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Keep patches up to date by installing weekly or daily if possible.Shut down unnecessary services/ports.Change default passwords by choosing strong passwords.Curtail unexpected input.Encrypt and password-protect sensitive data.Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents."
Using Malicious Files,"An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.",High,System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."
Exploiting Incorrectly Configured Access Control Security Levels,"An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",High,"The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity..","SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,Design: Configure the access control correctly.
Embedding Scripts within Scripts,An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts.,High,"Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts.","SKILL:To load malicious script into open, e.g. world writable directory:LEVEL:LowSKILL:Executing remote scripts on host and collecting output:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use browser technologies that do not allow client side scripting.Utilize strict type, character, and encoding enforcement.Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Ensure all content that is delivered to client is sanitized against an acceptable content specification.Perform input validation for all remote content.Perform output validation for all remote content.Disable scripting languages such as JavaScript in browserSession tokens for specific hostPatching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode"
Session Credential Falsification through Forging,"An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.",Medium,The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers.,SKILL:Forge the session credential and reply the request.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes."
Inducing Account Lockout,"An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",High,The system has a lockout mechanism.An attacker must be able to reproduce behavior that would result in an account being locked.,SKILL:No programming skills or computer knowledge is needed. An attacker can easily use this attack pattern following the Execution Flow above.:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.When implementing security features, consider how they can be misused and made to turn on themselves."
Exploitation of Trusted Identifiers,"An adversary guesses, obtains, or rides a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.",High,Server software must rely on weak identifier proof and/or verification schemes.Identifiers must have long lifetimes and potential for reusability.Server software must allow concurrent sessions to exist.,"SKILL:To achieve a direct connection with the weak or non-existent server session access control, and pose as an authorized user:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.Implementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.Implementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted.Design: Use strong session identifiers that are protected in transit and at rest.Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.Implementation: Verify authenticity of all identifiers at runtime."
Forced Deadlock,"The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",Low,"The target host has a deadlock condition. There are four conditions for a deadlock to occur, known as the Coffman conditions. [REF-101]The target host exposes an API to the user.",SKILL:This type of attack may be sophisticated and require knowledge about the system's resources and APIs.:LEVEL:Medium,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful forced deadlock attack compromises the availability of the system by exhausting its available resources.,"Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).For competing actions, use well-known libraries which implement synchronization."
Leverage Alternate Encoding,An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.,High,"The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host.",SKILL:An adversary can inject different representation of a filtered character in a different encoding.:LEVEL:LowSKILL:An adversary may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service,"Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input."
Hijacking a Privileged Thread of Execution,"An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",Low,"The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal usersIn order to feasibly execute this class of attacks, the adversary must have the ability to hijack a privileged thread. This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or calling native OS calls that can suspend and alter process memory. This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.","SKILL:Hijacking a thread involves knowledge of how processes and threads function on the target platform, the design of the target application as well as the ability to identify the primitives to be used or manipulated to hijack the thread.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope."
Accessing/Intercepting/Modifying HTTP Cookies,"This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.",High,"Target server software must be a HTTP daemon that relies on cookies.The cookies must contain sensitive information.The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply.","SKILL:To overwrite session cookie data, and submit targeted attacks via HTTP:LEVEL:LowSKILL:Exploiting a remote buffer overflow generated by attack:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Use input validation for cookiesDesign: Generate and validate MAC for cookiesImplementation: Use SSL/TLS to protect cookie in transitImplementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software."
Leverage Executable Code in Non-Executable Files,An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.,High,The attacker must have the ability to modify non-executable files consumed by the target software.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute."
Leveraging/Manipulating Configuration File Search Paths,"This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",High,The attacker must be able to write to redirect search paths on the victim host.,SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Enforce principle of least privilegeDesign: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the programImplementation: Host integrity monitoring"
Pretexting,"An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",Medium,The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the pretext that would influence the actions of the specific target.,SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low,"SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Depending on the adversary's intentions and the specific nature their actions/requests, a successful pretexting attack can result in the compromise to the confidentiality of sensitive information in a variety of contexts.","An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks."
Contradictory Destinations in Traffic Routing Schemes,"Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",Medium,"An adversary must be aware that their message will be routed using a CDN, and that both of the contradictory domains are served from that CDN.If the purpose of the Domain Fronting is to hide redirected C2 traffic, the C2 server must have been created in the CDN.",SKILL:The adversary must have some knowledge of how messages are routed.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data,"Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names."
Password Brute Forcing,"An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.",Medium,An adversary needs to know a username to target.The system uses password based authentication as the one factor authentication mechanism.An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical.,SKILL:A brute force attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
Task Impersonation,"An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.",Medium,The adversary must already have access to the target system via some means.A legitimate task must exist that an adversary can impersonate to glean credentials.The user's privileges allow them to execute certain tasks with elevated privileges.,"SKILL:Once an adversary has gained access to the target system, impersonating a task is trivial.:LEVEL:Low",SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges,"The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help."
XML Flood,"An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.",Low,The target must receive and process XML transactions.An adverssary must possess the ability to generate a large amount of XML based messages to send to the target service.,SKILL:Denial of service:LEVEL:Low,SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption,Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.Implementation: Provide for network flow control and traffic shaping to control access to the resources.
Rainbow Table Password Cracking,"An attacker gets access to the database table where hashes of passwords are stored. They then use a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.",Medium,"Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).The system uses one factor password based authentication.",SKILL:A variety of password cracking tools are available that can leverage a rainbow table. The more difficult part is to obtain the password hash(es) in the first place.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it."
Use of Known Domain Credentials,An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.,High,"The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.","SKILL:Once an adversary obtains a known credential, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.Create a strong password policy and ensure that your system enforces this policy.Ensure users are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse local administrator account credentials across systems.Deny remote use of local admin credentials to log into domain systems.Do not allow accounts to be a local administrator on more than one system.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Monitor system and domain logs for abnormal credential access."
Password Spraying,"In a Password Spraying attack, an adversary tries a small list (e.g. 3-5) of common or expected passwords, often matching the target's complexity policy, against a known list of user accounts to gain valid credentials. The adversary tries a particular password for each user account, before moving onto the next password in the list. This approach assists the adversary in remaining undetected by avoiding rapid or frequent account lockouts. The adversary may then reattempt the process with additional passwords, once enough time has passed to prevent inducing a lockout.",High,The system/application uses one factor password based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts on the target system/application.,SKILL:A Password Spraying attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Create a strong password policy and ensure that your system enforces this policy.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.
Utilizing REST's Trust in the System Resource to Obtain Sensitive Data,This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.,Medium,Opportunity to intercept must exist beyond the point where SSL is terminated.The adversary must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.,SKILL:To insert a network sniffer or other listener into the communication stream:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Implementation: Implement message level security such as HMAC in the HTTP communicationDesign: Utilize defense in depth, do not rely on a single security mechanism like SSLDesign: Enforce principle of least privilege"
System Footprinting,An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.,Low,The adversary must have logical access to the target network and system.,SKILL:The adversary needs to know basic linux commands.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Keep patches up to date by installing weekly or daily if possible.Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.
Session Hijacking,This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.,High,An application that leverages sessions to perform authentication.,SKILL:Exploiting a poorly protected identity token is a well understood attack with many helpful resources available.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful attack can enable an adversary to gain unauthorized access to an application.,"Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated."
Reusing Session IDs (aka Session Replay),This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.,High,The target host uses session IDs to keep track of the users.Session IDs are used to control access to resources.The session IDs used by the target host are not well protected from session theft.,"SKILL:If an attacker can steal a valid session ID, they can then try to be authenticated with that stolen session ID.:LEVEL:LowSKILL:More sophisticated attack can be used to hijack a valid session from a user and spoof a legitimate user by reusing their valid session ID.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Always invalidate a session ID after the user logout.Setup a session time out for the session IDs.Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate adversary in the middle attacks (CAPEC-94).Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.Encrypt the session data associated with the session ID.Use multifactor authentication."
Credential Stuffing,"An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.",High,"The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.",SKILL:A Credential Stuffing attack is very straightforward.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.Create a strong password policy and ensure that your system enforces this policy.Ensure users are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse local administrator account credentials across systems.Deny remote use of local admin credentials to log into domain systems.Do not allow accounts to be a local administrator on more than one system.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Monitor system and domain logs for abnormal credential access."
Probe Audio and Video Peripherals,"The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system.",Low,Knowledge of the target device's or application’s vulnerabilities that can be capitalized on with malicious code. The adversary must be able to place the malicious code on the target device.,SKILL:To deploy a hidden process or malware on the system to automatically collect audio and video data.:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Prevent unknown code from executing on a system through the use of an allowlist policy.Patch installed applications as soon as new updates become available.
Collect Data from Clipboard,"The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",Low,"The adversary must have a means (i.e., a pre-installed tool or background process) by which to collect data from the clipboard and store it. That is, when the target copies data to the clipboard (e.g., to paste into another application), the adversary needs some means of capturing that data in a third location.",SKILL:To deploy a hidden process or malware on the system to automatically collect clipboard data.:LEVEL:High,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern."
Altered Component Firmware,"An adversary exploits systems features and/or improperly protected firmware of hardware components, such as Hard Disk Drives (HDD), with the goal of executing malicious code from within the component's Master Boot Record (MBR). Conducting this type of attack entails the adversary infecting the target with firmware altering malware, using known tools, and a payload. Once this malware is executed, the MBR is modified to include instructions to execute the payload at desired intervals and when the system is booted up. A successful attack will obtain persistence within the victim system even if the operating system is reinstalled and/or if the component is formatted or has its data erased.",Low,Advanced knowledge about the target component's firmwareAdvanced knowledge about Master Boot Records (MBR)Advanced knowledge about tools used to insert firmware altering malware.Advanced knowledge about component shipments to the target organization.,SKILL:Ability to access and reverse engineer hardware component firmware.:LEVEL:HighSKILL:Ability to intercept components in transit.:LEVEL:HighSKILL:Ability to create malicious payload to be executed from MBR.:LEVEL:MediumSKILL:Ability to leverage known malware tools to infect target system and insert firmware altering malware/payload:LEVEL:Low,SCOPE:Authentication:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data,Leverage hardware components known to not be susceptible to these types of attacks.Implement hardware RAID infrastructure.
Inclusion of Code in Existing Process,"The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, function hooking, reflective code loading, and more.",Low,The targeted application fails to verify the integrity of the running process that allows an adversary to execute arbitrary code.,"SKILL:Knowledge of how to load malicious code into the memory space of a running process, as well as the ability to have the running process execute this code. For example, with DLL injection, the adversary must know how to load a DLL into the memory space of another running process, and cause this process to execute the code inside of the DLL.:LEVEL:High",SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Read Data,"Prevent unknown or malicious software from loading through using an allowlist policy.Properly restrict the location of the software being used.Leverage security kernel modules providing advanced access control and process restrictions like SELinux.Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.Monitor API calls like SetWindowsHookEx and SetWinEventHook which install hook procedures for Windows.Monitor processes and command-line arguments for unknown behavior related to code injection."
DLL Side-Loading,"An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",Low,The target must fail to verify the integrity of the DLL before using them.,SKILL:Trick the operating system in loading a malicious DLL instead of a legitimate DLL.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Bypass Protection Mechanism,Prevent unknown DLLs from loading through using an allowlist policy.Patch installed applications as soon as new updates become available.Properly restrict the location of the software being used.Use of sxstrace.exe on Windows as well as manual inspection of the manifests.Require code signing and avoid using relative paths for resources.
Identify Shared Files/Directories on System,"An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.",Medium,"The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).","SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line. The adversary, or their malware, can simply employ a set of commands that search for shared drives on the system (e.g., net view remote system or net share).:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is potentially able to identify the location of sensitive information or lateral pathways through the network.,"Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools."
Use of Captured Hashes (Pass The Hash),An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.,Medium,The system/application is connected to the Windows domain.The system/application leverages the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.The adversary possesses known Windows credential hash value pairs that exist on the target domain.,"SKILL:Once an adversary obtains a known Windows credential hash value pair, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.Monitor system and domain logs for abnormal credential access.Create a strong password policy and ensure that your system enforces this policy.Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.
Use of Captured Tickets (Pass The Ticket),"An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",Low,The adversary needs physical access to the victim system.The use of a third-party credential harvesting tool.,SKILL:Determine if Kerberos authentication is used on the server.:LEVEL:LowSKILL:The adversary uses a third-party tool to obtain the necessary tickets to execute the attack.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Gain Privileges,Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.Monitor system and domain logs for abnormal access.
Collect Data from Registries,"An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",Medium,"The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).The adversary must have capability to navigate the operating system to peruse the registry.","SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to read sensitive information about the system in the registry.,"Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern."
Collect Data from Screen Capture,"An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",Medium,"The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).","SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only to leverage the relevant command for screen capture.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to capture potentially sensitive information and processes as they appear on the screen.,"Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature."
Sniff Application Code,"An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",Low,"The attacker must have the ability to place themself in the communication path between the client and server.The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.The attacker must be able to employ a sniffer on the network without being detected.","SKILL:The attacker needs to setup a sniffer for a sufficient period of time so as to capture meaningful quantities of code. The presence of the sniffer should not be detected on the network. Also if the attacker plans to employ an adversary-in-the-middle attack (CAPEC-94), the client or server must not realize this. Finally, the attacker needs to regenerate source code from binary code if the need be.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Encrypt all communication between the client and server.Implementation: Use SSL, SSH, SCP.Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network."
Use of Known Kerberos Credentials,"An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.",Medium,"The system/application leverages Kerberos authentication.The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication for Kerberos service accounts.The system/application does not have a sound password policy that is being enforced for Kerberos service accounts.The system/application does not implement an effective password throttling mechanism for authenticating to Kerberos service accounts.The targeted network allows for network sniffing attacks to succeed.","SKILL:Once an adversary obtains a known Kerberos credential, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse Kerberos service account credentials across systems.Deny remote use of Kerberos service account credentials to log into domain systems.Do not allow Kerberos service accounts to be a local administrator on more than one system.Enable at least AES Kerberos encryption for tickets.Monitor system and domain logs for abnormal credential access."
Credential Prompt Impersonation,"An adversary, through a previously installed malicious application, impersonates a credential prompt in an attempt to steal a user's credentials.",Medium,The adversary must already have access to the target system via some means.A legitimate task must exist that an adversary can impersonate to glean credentials.,"SKILL:Once an adversary has gained access to the target system, impersonating a credential prompt is not difficult.:LEVEL:Low",SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges,"The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help."
Root/Jailbreak Detection Evasion via Hooking,"An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to hook code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.",Medium,The targeted application must be non-restricted to allow code hooking.,SKILL:Knowledge about Root/Jailbreak detection and evasion techniques.:LEVEL:HighSKILL:Knowledge about code hooking.:LEVEL:Medium,"SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through Root/Jailbreak Detection Evasion via Hooking, the adversary compromises the integrity of the application.SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:NOTE:An adversary may leverage Root/Jailbreak Detection Evasion via Hooking in order to obtain sensitive information.","Ensure mobile applications are signed appropriately to avoid code inclusion via hooking.Inspect the application's memory for suspicious artifacts, such as shared objects/JARs or dylibs, after other Root/Jailbreak detection methods.Inspect the application's stack trace for suspicious method calls.Allow legitimate native methods, and check for non-allowed native methods during Root/Jailbreak detection methods.For iOS applications, ensure application methods do not originate from outside of Apple's SDK."
Adversary in the Browser (AiTB),"An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints.",High,"The adversary must install or convince a user to install a Trojan.There are two components communicating with each other.An attacker is able to identify the nature and mechanism of communication between the two target components.Strong mutual authentication is not used between the two target components yielding opportunity for adversarial interposition.For browser pivoting, the SeDebugPrivilege and a high-integrity process must both exist to execute this attack.","SKILL:Tricking the victim into installing the Trojan is often the most difficult aspect of this attack. Afterwards, the remainder of this attack is fairly trivial.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Ensure software and applications are only downloaded from legitimate and reputable sources, in addition to conducting integrity checks on the downloaded component.Leverage anti-malware tools, which can detect Trojan Horse malware.Use strong, out-of-band mutual authentication to always fully authenticate both ends of any communications channel.Limit user permissions to prevent browser pivoting.Ensure browser sessions are regularly terminated and when their effective lifetime ends."
Exploitation of Thunderbolt Protection Flaws,"An adversary leverages a firmware weakness within the Thunderbolt protocol, on a computing device to manipulate Thunderbolt controller firmware in order to exploit vulnerabilities in the implementation of authorization and verification schemes within Thunderbolt protection mechanisms. Upon gaining physical access to a target device, the adversary conducts high-level firmware manipulation of the victim Thunderbolt controller SPI (Serial Peripheral Interface) flash, through the use of a SPI Programing device and an external Thunderbolt device, typically as the target device is booting up. If successful, this allows the adversary to modify memory, subvert authentication mechanisms, spoof identities and content, and extract data and memory from the target device. Currently 7 major vulnerabilities exist within Thunderbolt protocol with 9 attack vectors as noted in the Execution Flow.",Low,"The adversary needs at least a few minutes of physical access to a system with an open Thunderbolt port, version 3 or lower, and an external thunderbolt device controlled by the adversary with maliciously crafted software and firmware, via an SPI Programming device, to exploit weaknesses in security protections.","SKILL:Detailed knowledge on various system motherboards, PCI Express Domain, SPI, and Thunderbolt Protocol in order to interface with internal system components via external devices.:LEVEL:HighSKILL:Detailed knowledge on OS/Kernel memory address space, Direct Memory Access (DMA) mapping, Input-Output Memory Management Units (IOMMUs), and vendor memory protections for data leakage.:LEVEL:HighSKILL:Detailed knowledge on scripting and SPI programming in order to configure and modify Thunderbolt controller firmware and software configurations.:LEVEL:High",SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,Implementation: Kernel Direct Memory Access ProtectionConfiguration: Enable UEFI option USB Passthrough mode - Thunderbolt 3 system port operates as USB 3.1 Type C interfaceConfiguration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interfaceConfiguration: Enable UEFI option Mixed USB/DisplayPort mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface with support for DP modeConfiguration: Set Security Level to SL3 for Thunderbolt 2 system portConfiguration: Disable PCIe tunneling to set Security Level to SL3Configuration: Disable Boot Camp upon MacOS systems
BlueSmacking,An adversary uses Bluetooth flooding to transfer large packets to Bluetooth enabled devices over the L2CAP protocol with the goal of creating a DoS. This attack must be carried out within close proximity to a Bluetooth enabled device.,Medium,The system/application has Bluetooth enabled.,"SKILL:An adversary only needs a Linux machine along with a Bluetooth adapter, which is extremely common.:LEVEL:Low",SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption,"Disable Bluetooth when not being used.When using Bluetooth, set it to hidden or non-discoverable mode."
Key Negotiation of Bluetooth Attack (KNOB),"An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",Low,Person in the Middle network setup.,SKILL:Ability to modify packets.:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.
Alteration of a Software Update,"An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",Medium,An adversary would need to have penetrated an organization’s software update infrastructure including gaining access to components supporting the configuration management of software versions and updates related to the software maintenance of customer systems.,"SKILL:Skills required include the ability to infiltrate the organization’s software update infrastructure either from the Internet or from within the organization, including subcontractors, and be able to change software being delivered to customer/user systems in an undetected manner.:LEVEL:High",SCOPE:Access Control:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.Require elevated privileges for distribution of software and software updates."
Software Development Tools Maliciously Altered,"An adversary with the ability to alter tools used in a development environment causes software to be developed with maliciously modified tools. Such tools include requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools. The adversary then carries out malicious acts once the software is deployed including malware infection of other systems to support further compromises.",Low,"An adversary would need to have access to a targeted developer’s development environment and in particular to tools used to design, create, test and manage software, where the adversary could ensure malicious code is included in software packages built through alteration or substitution of tools in the environment used in the development of software.","SKILL:Ability to leverage common delivery mechanisms (e.g., email attachments, removable media) to infiltrate a development environment to gain access to software development tools for the purpose of malware insertion into an existing tool or replacement of an existing tool with a maliciously altered copy.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Access Control:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Read Data,"Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.Avoid giving elevated privileges to developers."
Requirements for ASIC Functionality Maliciously Altered,"An adversary with access to functional requirements for an application specific integrated circuit (ASIC), a chip designed/customized for a singular particular use, maliciously alters requirements derived from originating capability needs. In the chip manufacturing process, requirements drive the chip design which, when the chip is fully manufactured, could result in an ASIC which may not meet the user’s needs, contain malicious functionality, or exhibit other anomalous behaviors thereby affecting the intended use of the ASIC.",Low,"An adversary would need to have access to a foundry’s or chip maker’s requirements management system that stores customer requirements for ASICs, requirements upon which the design of the ASIC is based.",SKILL:An adversary would need experience in designing chips based on functional requirements in order to manipulate requirements in such a way that deviations would not be detected in subsequent stages of ASIC manufacture and where intended malicious functionality would be available to the adversary once integrated into a system and fielded.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for hardware requirements and design.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Malicious Code Implanted During Chip Programming,"During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",Low,"An adversary would need to have access to a foundry’s or chip maker’s development/production environment where programs for specific chips are developed, managed and uploaded into targeted chips prior to distribution or sale.","SKILL:An adversary needs to be skilled in microprogramming, manipulation of configuration management systems, and in the operation of tools used for the uploading of programs into chips during manufacture. Uploading can be for individual chips or performed on a large scale basis.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Developer Signing Maliciously Altered Software,"Software produced by a reputable developer is clandestinely infected with malicious code and then digitally signed by the unsuspecting developer, where the software has been altered via a compromised software development or build process prior to being signed. The receiver or user of the software has no reason to believe that it is anything but legitimate and proceeds to deploy it to organizational systems. This attack differs from CAPEC-206, since the developer is inadvertently signing malicious code they believe to be legitimate and which they are unware of any malicious modifications.",Medium,"An adversary would need to have access to a targeted developer’s software development environment, including to their software build processes, where the adversary could ensure code maliciously tainted prior to a build process is included in software packages built.","SKILL:The adversary must have the skills to infiltrate a developer’s software development/build environment and to implant malicious code in developmental software code, a build server, or a software repository containing dependency code, which would be referenced to be included during the software build process.:LEVEL:High",SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Execute Unauthorized Commands,"Have a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools.Employ intrusion detection and malware detection capabilities on IDE systems where feasible."
Design for FPGA Maliciously Altered,"An adversary alters the functionality of a field-programmable gate array (FPGA) by causing an FPGA configuration memory chip reload in order to introduce a malicious function that could result in the FPGA performing or enabling malicious functions on a host system. Prior to the memory chip reload, the adversary alters the program for the FPGA by adding a function to impact system operation.",Low,An adversary would need to have access to FPGA programming/configuration-related systems in a chip maker’s development environment where FPGAs can be initially configured prior to delivery to a customer or have access to such systems in a customer facility where end-user FPGA configuration/reconfiguration can be performed.,"SKILL:An adversary would need to be skilled in FPGA programming in order to create/manipulate configurations in such a way that when loaded into an FPGA, the end user would be able to observe through testing all user-defined required functions but would be unaware of any additional functions the adversary may have introduced.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Retrieve Data from Decommissioned Devices,"An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",Medium,"An adversary needs to have access to electronic data processing equipment being recycled or disposed of (e.g., laptops, servers) at a collection location and the ability to take control of it for the purpose of exploiting its content.","SKILL:An adversary may need the ability to mount printed circuit boards and target individual chips for exploitation.:LEVEL:HighSKILL:An adversary needs the technical skills required to extract solid state drives, hard disk drives, and other storage media to host on a compatible system or harness to gain access to digital content.:LEVEL:Medium",SCOPE:Accountability:TECHNICAL IMPACT:Bypass Protection Mechanism,"Backup device data before erasure to retain intellectual property and inside knowledge.Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.Use a secure erase software.Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.Physically destroy memory and SIM cards for mobile devices not intended to be reused.Ensure that the user account has been terminated or switched to a new device before destroying."
Subvert Code-signing Facilities,Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.,Low,"A framework-based language that supports code signing (such as, and most commonly, Java or .NET)Deployed code that has been signed by its authoring vendor, or a partner.The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated.","SKILL:Subverting code signing is not a trivial activity. Most code signing and verification schemes are based on use of cryptography and the attacker needs to have an understanding of these cryptographic operations in good detail. Additionally the attacker also needs to be aware of the way memory is assigned and accessed by the container since, often, the only way to subvert code signing would be to patch the code in memory. Finally, a knowledge of the platform specific mechanisms of signing and verifying code is a must.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable."
Spoof Open-Source Software Metadata,"An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.",Medium,Identification of a popular open-source component whose metadata is to be spoofed.,SKILL:Ability to spoof a variety of software metadata to convince victims the source is trusted.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Within package managers, look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source software from reputable hosting sites or package managers.Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.After downloading open-source software, ensure integrity values have not changed.Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
System Location Discovery,"An adversary collects information about the target system in an attempt to identify the system's geographical location. Information gathered could include keyboard layout, system language, and timezone. This information may benefit an adversary in confirming the desired target and/or tailoring further attacks.",High,The adversary must have some level of access to the system and have a basic understanding of the operating system in order to query the appropriate sources for relevant information.,SKILL:The adversary must know how to query various system sources of information respective of the system's operating system to obtain the relevant information.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation."
Repo Jacking,An adversary takes advantage of the redirect property of directly linked Version Control System (VCS) repositories to trick users into incorporating malicious code into their applications.,Medium,Identification of a popular repository that may be directly referenced in numerous software applicationsA repository owner/maintainer who has recently changed their username or deleted their account,SKILL:Ability to create an account on a VCS hosting site and recreate an existing directory structure.:LEVEL:LowSKILL:Ability to create malware that can exploit various software applications.:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Leverage dedicated package managers instead of directly linking to VCS repositories.Utilize version pinning and lock files to prevent use of maliciously modified repositories.Implement vendoring (i.e., including third-party dependencies locally) and leverage automated testing techniques (e.g., static analysis) to determine if the software behaves maliciously.Leverage automated tools, such as Checkmarx's ChainJacking tool, to determine susceptibility to Repo Jacking attacks."
DHCP Spoofing,"An adversary masquerades as a legitimate Dynamic Host Configuration Protocol (DHCP) server by spoofing DHCP traffic, with the goal of redirecting network traffic or denying service to DHCP.",Low,The adversary must have access to a machine within the target LAN which can send DHCP offers to the target.,SKILL:The adversary must identify potential targets for DHCP Spoofing and craft network configurations to obtain the desired results.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read DataSCOPE:Integrity:SCOPE:Access Control:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Availability:TECHNICAL IMPACT:Resource Consumption,Design: MAC-Forced ForwardingImplementation: Port Security and DHCP snoopingImplementation: Network-based Intrusion Detection Systems
Install Malicious Extension,"An adversary directly installs or tricks a user into installing a malicious extension into existing trusted software, with the goal of achieving a variety of negative technical impacts.",Medium,"The adversary must craft malware based on the type of software and system(s) they intend to exploit.If the adversary intends to install the malicious extension themself, they must first compromise the target machine via some other means.",SKILL:Ability to create malicious extensions that can exploit specific software applications and systems.:LEVEL:MediumSKILL:Optional: Ability to exploit target system(s) via other means in order to gain entry.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read DataSCOPE:Integrity:SCOPE:Access Control:TECHNICAL IMPACT:Modify DataSCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Only install extensions/plugins from official/verifiable sources.Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.Implement an extension/plugin allow list, based on the given security policy.If applicable, confirm extensions/plugins are properly signed by the official developers.For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background."
Try Common or Default Usernames and Passwords,"An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. secret or password) that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.",Medium,The system uses one factor password based authentication.The adversary has the means to interact with the system.,"SKILL:An adversary just needs to gain access to common default usernames/passwords specific to the technologies used by the system. Additionally, a brute force attack leveraging common passwords can be easily realized if the user name is known.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Delete all default account credentials that may be put in by the product vendor.Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
Network Boundary Bridging,"An adversary which has gained elevated access to network boundary devices may use these devices to create a channel to bridge trusted and untrusted networks. Boundary devices do not necessarily have to be on the network’s edge, but rather must serve to segment portions of the target network the adversary wishes to cross into.",Medium,The adversary must have control of a network boundary device.,SKILL:The adversary must understand how to manage the target network device to create or edit policies which will bridge networks.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Hide Activities,"Design: Ensure network devices are storing credentials in encrypted storesDesign: Follow the principle of least privilege and restrict administrative duties to as few accounts as possible. Ensure these privileged accounts are secured with strong credentials which do not overlap with other network devices.Configuration: When possible, configure network boundary devices to use MFA.Configuration: Change the default configuration for network devices to harden their security profiles. Default configurations are often enabled with insecure features to allow ease of installation and management. However, these configurations can be easily discovered and exploited by adversaries.Implementation: Perform integrity checks on audit logs for network device management and review them to identify abnormalities in configurations.Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering."
Adversary in the Middle (AiTM),"An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.",High,There are two components communicating with each other.An attacker is able to identify the nature and mechanism of communication between the two target components.An attacker can eavesdrop on the communication between the target components.Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption.,SKILL:This attack can get sophisticated since the attack may use cryptography.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Ensure Public Keys are signed by a Certificate AuthorityEncrypt communications using cryptography (e.g., SSL/TLS)Use Strong mutual authentication to always fully authenticate both ends of any communications channel.Exchange public keys using a secure channel"
Phishing,Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.,High,An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.,"SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind."
Buffer Overflow via Environment Variables,"This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",High,The application uses environment variables.An environment variable exposed to the user is vulnerable to a buffer overflow.The vulnerable environment variable uses untrusted data.Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.,SKILL:An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.:LEVEL:LowSKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High,SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,Do not expose environment variable to the user.Do not use untrusted data in your environment variables.Use a language or compiler that performs automatic bounds checkingThere are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.
Overflow Buffers,"Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.",High,Targeted software performs buffer operations.Targeted software inadequately performs bounds-checking on buffer operations.Adversary has the capability to influence the input to buffer operations.,"SKILL:In most cases, overflowing a buffer does not require advanced skills beyond the ability to notice an overflow and stuff an input variable with content.:LEVEL:LowSKILL:In cases of directed overflows, where the motive is to divert the flow of the program or application as per the adversaries' bidding, high level skills are required. This may involve detailed knowledge of the target system architecture and kernel.:LEVEL:High",SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a language or compiler that performs automatic bounds checking.Use secure functions not vulnerable to buffer overflow.If you have to use dangerous functions, make sure that you do boundary checking.Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.Use OS-level preventative functionality. Not a complete solution.Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software."
Server Side Include (SSI) Injection,"An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",High,A web server that supports server side includes and has them enabledUser controllable input that can carry include directives to the web server,"SKILL:The attacker needs to be aware of SSI technology, determine the nature of injection and be able to craft input that results in the SSI directives being executed.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need themAll user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directiveServer Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead"
Clickjacking,"An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.",Medium,"The victim is communicating with the target application via a web based UI and not a thick clientThe victim's browser security policies allow at least one of the following JavaScript, Flash, iFrames, ActiveX, or CSS.The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser)The victim has an active session with the target system.The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system",SKILL:Crafting the proper malicious site and luring the victim to this site are not trivial tasks.:LEVEL:High,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,"If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.Turn off JavaScript, Flash and disable CSS.When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks."
Cross Site Tracing,Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to a destination system's web server.,Medium,HTTP TRACE is enabled on the web serverThe destination system is susceptible to XSS or an adversary can leverage some other weakness to bypass the same origin policyScripting is enabled in the client's browserHTTP is used as the communication protocol between the server and the client,SKILL:Understanding of the HTTP protocol and an ability to craft a malicious script:LEVEL:Medium,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.Patch web browser against known security origin policy bypass exploits.
Path Traversal,"An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or ) and/or dots (.)) to reach desired directories or files.",High,The attacker must be able to control the path that is requested of the target.The target must fail to adequately sanitize incoming paths,SKILL:Simple command line attacks or to inject the malicious payload in a web page.:LEVEL:LowSKILL:Customizing attacks to bypass non trivial filters in the application.:LEVEL:Medium,"SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.","Design: Configure the access control correctly.Design: Enforce principle of least privilege.Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.Implementation: Perform input validation for all remote content, including remote and user-generated content.Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.Implementation: Use indirect references rather than actual file names.Implementation: Use possible permissions on file access when developing and deploying web applications.Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach."
Format String Injection,"An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",High,"The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.","SKILL:In order to discover format string vulnerabilities it takes only low skill, however, converting this discovery into a working exploit requires advanced knowledge on the part of the adversary.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism,Limit the usage of formatting string functions.Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.
LDAP Injection,"An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.",High,"The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.","SKILL:The attacker needs to have knowledge of LDAP, especially its query syntax.:LEVEL:Medium",SCOPE:Availability:TECHNICAL IMPACT:Unreliable ExecutionSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.
Embedding NULL Bytes,An adversary embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).,High,The program does not properly handle postfix NULL terminators,SKILL:Directory traversal:LEVEL:MediumSKILL:Execution of arbitrary code:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.
DOM-Based XSS,"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.",High,An application that leverages a client-side web browser with scripting enabled.An application that manipulates the DOM via client-side scripting.An application that failS to adequately sanitize or encode untrusted input.,SKILL:Requires the ability to write scripts of some complexity and to inject it through user controlled fields in the system.:LEVEL:Medium,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful DOM-based XSS attack can enable an adversary to exfiltrate sensitive information from the application.SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful DOM-based XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful DOM-based XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful DOM-based XSS attack can allow an adversary to tamper with application data.",Use browser technologies that do not allow client-side scripting.Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.Ensure that all user-supplied input is validated before use.
Session Credential Falsification through Prediction,This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.,High,"The target host uses session IDs to keep track of the users.Session IDs are used to control access to resources.The session IDs used by the target host are predictable. For example, the session IDs are generated using predictable information (e.g., time).",SKILL:There are tools to brute force session ID. Those tools require a low level of knowledge.:LEVEL:LowSKILL:Predicting Session ID may require more computation work which uses advanced analysis such as statistical analysis.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a strong source of randomness to generate a session ID.Use adequate length session IDsDo not use information available to the user in order to generate session ID (e.g., time).Ideas for creating random numbers are offered by Eastlake [RFC1750]Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format."
Session Hijacking,This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.,High,An application that leverages sessions to perform authentication.,SKILL:Exploiting a poorly protected identity token is a well understood attack with many helpful resources available.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful attack can enable an adversary to gain unauthorized access to an application.,"Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated."
Credential Stuffing,"An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.",High,"The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.",SKILL:A Credential Stuffing attack is very straightforward.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.Create a strong password policy and ensure that your system enforces this policy.Ensure users are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse local administrator account credentials across systems.Deny remote use of local admin credentials to log into domain systems.Do not allow accounts to be a local administrator on more than one system.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Monitor system and domain logs for abnormal credential access."
Session Fixation,"The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.",Medium,Session identifiers that remain unchanged when the privilege levels change.Permissive session management mechanism that accepts random user-generated session identifiersPredictable session identifiers,SKILL:Only basic skills are required to determine and fixate session identifiers in a user's browser. Subsequent attacks may require greater skill levels depending on the attackers' motives.:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult."
Cross-Site Scripting (XSS),"An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.",High,"Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.","SKILL:To achieve a redirection and use of less trusted source, an attacker can simply place a script in bulletin board, blog, wiki, or other user-generated content site that are echoed back to other client machines.:LEVEL:LowSKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High",SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Design: Use browser technologies that do not allow client side scripting.Design: Utilize strict type, character, and encoding enforcementDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.Implementation: Perform input validation for all remote content.Implementation: Perform output validation for all remote content.Implementation: Session tokens for specific hostImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
SQL Injection,"This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.",High,"SQL queries used by the application to store, retrieve or modify data.User-controllable input that is not properly validated by the application as part of SQL queries.","SKILL:It is fairly simple for someone with basic SQL knowledge to perform SQL injection, in general. In certain instances, however, specific knowledge of the database employed may be required.:LEVEL:Low",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
Adversary in the Browser (AiTB),"An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints.",High,"The adversary must install or convince a user to install a Trojan.There are two components communicating with each other.An attacker is able to identify the nature and mechanism of communication between the two target components.Strong mutual authentication is not used between the two target components yielding opportunity for adversarial interposition.For browser pivoting, the SeDebugPrivilege and a high-integrity process must both exist to execute this attack.","SKILL:Tricking the victim into installing the Trojan is often the most difficult aspect of this attack. Afterwards, the remainder of this attack is fairly trivial.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Ensure software and applications are only downloaded from legitimate and reputable sources, in addition to conducting integrity checks on the downloaded component.Leverage anti-malware tools, which can detect Trojan Horse malware.Use strong, out-of-band mutual authentication to always fully authenticate both ends of any communications channel.Limit user permissions to prevent browser pivoting.Ensure browser sessions are regularly terminated and when their effective lifetime ends."
Blind SQL Injection,"Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",High,"SQL queries used by the application to store, retrieve or modify data.User-controllable input that is not properly validated by the application as part of SQL queries.","SKILL:Determining the database type and version, as well as the right number and type of parameters to the query being injected in the absence of error messages requires greater skill than reverse-engineering database error messages.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code,"Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear."
Using Unicode Encoding to Bypass Validation Logic,An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.,Medium,Filtering is performed on data that has not be properly canonicalized.,SKILL:An attacker needs to understand Unicode encodings and have an idea (or be able to find out) what system components may not be Unicode aware.:LEVEL:Medium,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.Ensure that filtering or input validation is applied to canonical data.Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.
XPath Injection,"An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",High,XPath queries used to retrieve information stored in XML documentsUser-controllable input not properly sanitized before being used as part of XPath queries,SKILL:XPath Injection shares the same basic premises with SQL Injection. An attacker must have knowledge of XPath syntax and constructs in order to successfully leverage XPath Injection:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
Forceful Browsing,"An attacker employs forceful browsing (direct URL entry) to access portions of a website that are otherwise unreachable. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.",High,The forcibly browseable pages or accessible resources must be discoverable and improperly protected.,SKILL:Forcibly browseable pages can be discovered by using a number of automated tools. Doing the same manually is tedious but by no means difficult.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism,"Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context."
Adversary in the Middle (AiTM),"An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.",High,There are two components communicating with each other.An attacker is able to identify the nature and mechanism of communication between the two target components.An attacker can eavesdrop on the communication between the target components.Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption.,SKILL:This attack can get sophisticated since the attack may use cryptography.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Ensure Public Keys are signed by a Certificate AuthorityEncrypt communications using cryptography (e.g., SSL/TLS)Use Strong mutual authentication to always fully authenticate both ends of any communications channel.Exchange public keys using a secure channel"
Cryptanalysis,"Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).",Low,The target software utilizes some sort of cryptographic algorithm.An underlying weaknesses exists either in the cryptographic algorithm used or in the way that it was applied to a particular chunk of plaintext.The encryption algorithm is known to the attacker.An attacker has access to the ciphertext.,SKILL:Cryptanalysis generally requires a very significant level of understanding of mathematics and computation.:LEVEL:High,"SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:In most cases, if cryptanalysis is successful at all, an adversary will not be able to decrypt the entire message, but instead will only be able to deduce some information about the plaintext. However, that may be sufficient for an adversary, depending on the context of the attack.",Use proven cryptographic algorithms with recommended key sizes.Ensure that the algorithms are used properly. That means: 1. Not rolling out your own crypto; Use proven algorithms and implementations. 2. Choosing initialization vectors with sufficiently random numbers 3. Generating key material using good sources of randomness and avoiding known weak keys 4. Using proven protocols and their implementations. 5. Picking the most appropriate cryptographic algorithm for your usage context and data
Exploitation of Transient Instruction Execution,"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.",Low,The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU.,"SKILL:Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations.:LEVEL:HighSKILL:Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,Implementation: DAWG (Dynamically Allocated Way Guard) - processor cache properly divided between different programs/processes that don't share resourcesImplementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tablesConfiguration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order executionConfiguration: Disable SharedArrayBuffer for Web BrowsersConfiguration: Disable Copy-on-Write between Cloud VMsConfiguration: Privilege Checks on Cache Flush InstructionsImplementation: Non-inclusive Cache Memories to prevent Flush+Reload Attacks
Alteration of a Software Update,"An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",Medium,An adversary would need to have penetrated an organization’s software update infrastructure including gaining access to components supporting the configuration management of software versions and updates related to the software maintenance of customer systems.,"SKILL:Skills required include the ability to infiltrate the organization’s software update infrastructure either from the Internet or from within the organization, including subcontractors, and be able to change software being delivered to customer/user systems in an undetected manner.:LEVEL:High",SCOPE:Access Control:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.Require elevated privileges for distribution of software and software updates."
Software Development Tools Maliciously Altered,"An adversary with the ability to alter tools used in a development environment causes software to be developed with maliciously modified tools. Such tools include requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools. The adversary then carries out malicious acts once the software is deployed including malware infection of other systems to support further compromises.",Low,"An adversary would need to have access to a targeted developer’s development environment and in particular to tools used to design, create, test and manage software, where the adversary could ensure malicious code is included in software packages built through alteration or substitution of tools in the environment used in the development of software.","SKILL:Ability to leverage common delivery mechanisms (e.g., email attachments, removable media) to infiltrate a development environment to gain access to software development tools for the purpose of malware insertion into an existing tool or replacement of an existing tool with a maliciously altered copy.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized CommandsSCOPE:Access Control:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Read Data,"Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.Avoid giving elevated privileges to developers."
Requirements for ASIC Functionality Maliciously Altered,"An adversary with access to functional requirements for an application specific integrated circuit (ASIC), a chip designed/customized for a singular particular use, maliciously alters requirements derived from originating capability needs. In the chip manufacturing process, requirements drive the chip design which, when the chip is fully manufactured, could result in an ASIC which may not meet the user’s needs, contain malicious functionality, or exhibit other anomalous behaviors thereby affecting the intended use of the ASIC.",Low,"An adversary would need to have access to a foundry’s or chip maker’s requirements management system that stores customer requirements for ASICs, requirements upon which the design of the ASIC is based.",SKILL:An adversary would need experience in designing chips based on functional requirements in order to manipulate requirements in such a way that deviations would not be detected in subsequent stages of ASIC manufacture and where intended malicious functionality would be available to the adversary once integrated into a system and fielded.:LEVEL:High,SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for hardware requirements and design.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Malicious Code Implanted During Chip Programming,"During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",Low,"An adversary would need to have access to a foundry’s or chip maker’s development/production environment where programs for specific chips are developed, managed and uploaded into targeted chips prior to distribution or sale.","SKILL:An adversary needs to be skilled in microprogramming, manipulation of configuration management systems, and in the operation of tools used for the uploading of programs into chips during manufacture. Uploading can be for individual chips or performed on a large scale basis.:LEVEL:Medium",SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Developer Signing Maliciously Altered Software,"Software produced by a reputable developer is clandestinely infected with malicious code and then digitally signed by the unsuspecting developer, where the software has been altered via a compromised software development or build process prior to being signed. The receiver or user of the software has no reason to believe that it is anything but legitimate and proceeds to deploy it to organizational systems. This attack differs from CAPEC-206, since the developer is inadvertently signing malicious code they believe to be legitimate and which they are unware of any malicious modifications.",Medium,"An adversary would need to have access to a targeted developer’s software development environment, including to their software build processes, where the adversary could ensure code maliciously tainted prior to a build process is included in software packages built.","SKILL:The adversary must have the skills to infiltrate a developer’s software development/build environment and to implant malicious code in developmental software code, a build server, or a software repository containing dependency code, which would be referenced to be included during the software build process.:LEVEL:High",SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify DataSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Execute Unauthorized Commands,"Have a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools.Employ intrusion detection and malware detection capabilities on IDE systems where feasible."
Design for FPGA Maliciously Altered,"An adversary alters the functionality of a field-programmable gate array (FPGA) by causing an FPGA configuration memory chip reload in order to introduce a malicious function that could result in the FPGA performing or enabling malicious functions on a host system. Prior to the memory chip reload, the adversary alters the program for the FPGA by adding a function to impact system operation.",Low,An adversary would need to have access to FPGA programming/configuration-related systems in a chip maker’s development environment where FPGAs can be initially configured prior to delivery to a customer or have access to such systems in a customer facility where end-user FPGA configuration/reconfiguration can be performed.,"SKILL:An adversary would need to be skilled in FPGA programming in order to create/manipulate configurations in such a way that when loaded into an FPGA, the end user would be able to observe through testing all user-defined required functions but would be unaware of any additional functions the adversary may have introduced.:LEVEL:High",SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic,"Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips.Require that provenance of COTS microelectronic components be known whenever procured.Conduct detailed vendor assessment before acquiring COTS hardware."
Retrieve Data from Decommissioned Devices,"An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",Medium,"An adversary needs to have access to electronic data processing equipment being recycled or disposed of (e.g., laptops, servers) at a collection location and the ability to take control of it for the purpose of exploiting its content.","SKILL:An adversary may need the ability to mount printed circuit boards and target individual chips for exploitation.:LEVEL:HighSKILL:An adversary needs the technical skills required to extract solid state drives, hard disk drives, and other storage media to host on a compatible system or harness to gain access to digital content.:LEVEL:Medium",SCOPE:Accountability:TECHNICAL IMPACT:Bypass Protection Mechanism,"Backup device data before erasure to retain intellectual property and inside knowledge.Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.Use a secure erase software.Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.Physically destroy memory and SIM cards for mobile devices not intended to be reused.Ensure that the user account has been terminated or switched to a new device before destroying."
Metadata Spoofing,"An adversary alters the metadata of a resource (e.g., file, directory, repository, etc.) to present a malicious resource as legitimate/credible.",Medium,Identification of a resource whose metadata is to be spoofed,SKILL:Ability to spoof a variety of metadata to convince victims the source is trusted:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,"Validate metadata of resources such as authors, timestamps, and statistics.Confirm the pedigree of open source packages and ensure the code being downloaded does not originate from another source.Even if the metadata is properly checked and a user believes it to be legitimate, there may still be a chance that they've been duped. Therefore, leverage automated testing techniques to determine where malicious areas of the code may exist."
Spoof Open-Source Software Metadata,"An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.",Medium,Identification of a popular open-source component whose metadata is to be spoofed.,SKILL:Ability to spoof a variety of software metadata to convince victims the source is trusted.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Within package managers, look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source software from reputable hosting sites or package managers.Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.After downloading open-source software, ensure integrity values have not changed.Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
Spoof Version Control System Commit Metadata,"An adversary spoofs metadata pertaining to a Version Control System (VCS) (e.g., Git) repository's commits to deceive users into believing that the maliciously provided software is frequently maintained and originates from a trusted source.",Medium,Identification of a popular open-source repository whose metadata is to be spoofed.,SKILL:Ability to spoof a variety of repository metadata to convince victims the source is trusted.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source software from reputable hosting sites or package managers.Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.After downloading open-source software, ensure integrity values have not changed.Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
StarJacking,An adversary spoofs software popularity metadata to deceive users into believing that a maliciously provided package is widely used and originates from a trusted source.,Medium,Identification of a popular open-source package whose popularity metadata is to be used for the malicious package.,SKILL:Ability to provide a package to a package manager and associate a popular package's source code repository URL.:LEVEL:Low,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source packages, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source packages from reputable package managers.After downloading open-source packages, ensure integrity values have not changed.Before executing or incorporating the package, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
Load Value Injection,"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",Low,The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU.The CPU incorrectly transiently forwards values from microarchitectural buffers after faulting or assisted loadsThe adversary needs the ability to induce page faults or microcode assists on the target system.Code gadgets exist that allow the adversary to hijack transient execution and encode secrets into the microarchitectural state.,"SKILL:Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations.:LEVEL:HighSKILL:Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage.:LEVEL:HighSKILL:The ability to provoke faulting or assisted loads in legitimate execution.:LEVEL:High",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,"Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.Insert explicit “lfence” speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded."
Accessing Functionality Not Properly Constrained by ACLs,"In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",High,"The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.The various resources, or individual URLs, must be somehow discoverable by the attackerThe administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.","SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic."
Spear Phishing,"An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.",High,None. Any user can be targeted by a Spear Phishing attack.,"SKILL:Spear phishing attacks require specific knowledge of the victims being targeted, such as which bank is being used by the victims, or websites they commonly log into (Google, Facebook, etc).:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information LeakageSCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges:NOTE:Privilege EscalationSCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:Data Modification,"Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind."
Footprinting,An adversary engages in probing and exploration activities to identify constituents and properties of the target.,High,"An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack.","SKILL:The adversary knows how to send HTTP request, run the scan tool.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Keep patches up to date by installing weekly or daily if possible.Shut down unnecessary services/ports.Change default passwords by choosing strong passwords.Curtail unexpected input.Encrypt and password-protect sensitive data.Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents."
Exploiting Incorrectly Configured Access Control Security Levels,"An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",High,"The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity..","SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low",SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary CodeSCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection MechanismSCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution,Design: Configure the access control correctly.
Task Impersonation,"An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.",Medium,The adversary must already have access to the target system via some means.A legitimate task must exist that an adversary can impersonate to glean credentials.The user's privileges allow them to execute certain tasks with elevated privileges.,"SKILL:Once an adversary has gained access to the target system, impersonating a task is trivial.:LEVEL:Low",SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges,"The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help."
Use of Known Domain Credentials,An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.,High,"The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.The system/application does not have a sound password policy that is being enforced.The system/application does not implement an effective password throttling mechanism.The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.","SKILL:Once an adversary obtains a known credential, leveraging it is trivial.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.Create a strong password policy and ensure that your system enforces this policy.Ensure users are not reusing username/password combinations for multiple systems, applications, or services.Do not reuse local administrator account credentials across systems.Deny remote use of local admin credentials to log into domain systems.Do not allow accounts to be a local administrator on more than one system.Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.Monitor system and domain logs for abnormal credential access."
Utilizing REST's Trust in the System Resource to Obtain Sensitive Data,This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.,Medium,Opportunity to intercept must exist beyond the point where SSL is terminated.The adversary must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.,SKILL:To insert a network sniffer or other listener into the communication stream:LEVEL:Low,SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Implementation: Implement message level security such as HMAC in the HTTP communicationDesign: Utilize defense in depth, do not rely on a single security mechanism like SSLDesign: Enforce principle of least privilege"
System Footprinting,An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.,Low,The adversary must have logical access to the target network and system.,SKILL:The adversary needs to know basic linux commands.:LEVEL:Low,SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,Keep patches up to date by installing weekly or daily if possible.Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.
Collect Data from Screen Capture,"An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",Medium,"The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).","SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only to leverage the relevant command for screen capture.:LEVEL:Low",SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to capture potentially sensitive information and processes as they appear on the screen.,"Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature."
Sniff Application Code,"An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",Low,"The attacker must have the ability to place themself in the communication path between the client and server.The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.The attacker must be able to employ a sniffer on the network without being detected.","SKILL:The attacker needs to setup a sniffer for a sufficient period of time so as to capture meaningful quantities of code. The presence of the sniffer should not be detected on the network. Also if the attacker plans to employ an adversary-in-the-middle attack (CAPEC-94), the client or server must not realize this. Finally, the attacker needs to regenerate source code from binary code if the need be.:LEVEL:Medium",SCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Design: Encrypt all communication between the client and server.Implementation: Use SSL, SSH, SCP.Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network."
Metadata Spoofing,"An adversary alters the metadata of a resource (e.g., file, directory, repository, etc.) to present a malicious resource as legitimate/credible.",Medium,Identification of a resource whose metadata is to be spoofed,SKILL:Ability to spoof a variety of metadata to convince victims the source is trusted:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands,"Validate metadata of resources such as authors, timestamps, and statistics.Confirm the pedigree of open source packages and ensure the code being downloaded does not originate from another source.Even if the metadata is properly checked and a user believes it to be legitimate, there may still be a chance that they've been duped. Therefore, leverage automated testing techniques to determine where malicious areas of the code may exist."
Spoof Open-Source Software Metadata,"An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.",Medium,Identification of a popular open-source component whose metadata is to be spoofed.,SKILL:Ability to spoof a variety of software metadata to convince victims the source is trusted.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Within package managers, look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source software from reputable hosting sites or package managers.Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.After downloading open-source software, ensure integrity values have not changed.Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
Spoof Version Control System Commit Metadata,"An adversary spoofs metadata pertaining to a Version Control System (VCS) (e.g., Git) repository's commits to deceive users into believing that the maliciously provided software is frequently maintained and originates from a trusted source.",Medium,Identification of a popular open-source repository whose metadata is to be spoofed.,SKILL:Ability to spoof a variety of repository metadata to convince victims the source is trusted.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Accountability:TECHNICAL IMPACT:Hide ActivitiesSCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges,"Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.Reference vulnerability databases to determine if the software contains known vulnerabilities.Only download open-source software from reputable hosting sites or package managers.Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.After downloading open-source software, ensure integrity values have not changed.Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
Try Common or Default Usernames and Passwords,"An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. secret or password) that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.",Medium,The system uses one factor password based authentication.The adversary has the means to interact with the system.,"SKILL:An adversary just needs to gain access to common default usernames/passwords specific to the technologies used by the system. Additionally, a brute force attack leveraging common passwords can be easily realized if the user name is known.:LEVEL:Low",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges,"Delete all default account credentials that may be put in by the product vendor.Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
Adversary in the Middle (AiTM),"An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.",High,There are two components communicating with each other.An attacker is able to identify the nature and mechanism of communication between the two target components.An attacker can eavesdrop on the communication between the target components.Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption.,SKILL:This attack can get sophisticated since the attack may use cryptography.:LEVEL:Medium,SCOPE:Integrity:TECHNICAL IMPACT:Modify DataSCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read Data,"Ensure Public Keys are signed by a Certificate AuthorityEncrypt communications using cryptography (e.g., SSL/TLS)Use Strong mutual authentication to always fully authenticate both ends of any communications channel.Exchange public keys using a secure channel"
Phishing,Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.,High,An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.,"SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium",SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain PrivilegesSCOPE:Confidentiality:TECHNICAL IMPACT:Read DataSCOPE:Integrity:TECHNICAL IMPACT:Modify Data,"Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind."
