Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
Accessing Functionality Not Properly Constrained by ACLs,Standard,Draft,"In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",,High,High,::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey] The attacker surveys the target application, possibly as a valid and authenticated user:TECHNIQUE:Spidering web sites for all available links:TECHNIQUE:Brute force guessing of resource names:TECHNIQUE:Brute force guessing of user names / credentials:TECHNIQUE:Brute force guessing of function names / actions::STEP:2:PHASE:Explore:DESCRIPTION:[Identify Functionality] At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actions:TECHNIQUE:Use the web inventory of all forms and inputs and apply attack data to those inputs.:TECHNIQUE:Use a packet sniffer to capture and record network traffic:TECHNIQUE:Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment.::STEP:3:PHASE:Experiment:DESCRIPTION:[Iterate over access capabilities] Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.:TECHNIQUE:Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters)::","::The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.::The various resources, or individual URLs, must be somehow discoverable by the attacker::The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.::","::SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low::",::None: No specialized resources are required to execute this type of attack.::,,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::","::Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a Single front controller pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets. If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted.::",::276::285::434::693::732::1191::1193::1220::1297::1311::1314::1315::1318::1320::1321::1327::,TAXONOMY NAME:ATTACK:ENTRY ID:1574.010:ENTRY NAME:Hijack Execution Flow: ServicesFile Permissions Weakness::,
Overflow Buffers,Standard,Draft,"Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.",,High,Very High,::NATURE:ChildOf:CAPEC ID:123::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.:TECHNIQUE:Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary injects the crafted overflow content into the buffer.::",::Targeted software performs buffer operations.::Targeted software inadequately performs bounds-checking on buffer operations.::Adversary has the capability to influence the input to buffer operations.::,"::SKILL:In most cases, overflowing a buffer does not require advanced skills beyond the ability to notice an overflow and stuff an input variable with content.:LEVEL:Low::SKILL:In cases of directed overflows, where the motive is to divert the flow of the program or application as per the adversaries' bidding, high level skills are required. This may involve detailed knowledge of the target system architecture and kernel.:LEVEL:High::",::None: No specialized resources are required to execute this type of attack. Detecting and exploiting a buffer overflow does not require any resources beyond knowledge of and access to the target system.::,"::An attack designed to leverage a buffer overflow and redirect execution as per the adversary's bidding is fairly difficult to detect. An attack aimed solely at bringing the system down is usually preceded by a barrage of long inputs that make no sense. In either case, it is likely that the adversary would have resorted to a few hit-or-miss attempts that will be recorded in the system event logs, if they exist.::",::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::Use a language or compiler that performs automatic bounds checking.::Use secure functions not vulnerable to buffer overflow.::If you have to use dangerous functions, make sure that you do boundary checking.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software.::","::The most straightforward example is an application that reads in input from the user and stores it in an internal buffer but does not check that the size of the input data is less than or equal to the size of the buffer. If the user enters excessive length data, the buffer may overflow leading to the application crashing, or worse, enabling the user to cause execution of injected code.::Many web servers enforce security in web applications through the use of filter plugins. An example is the SiteMinder plugin used for authentication. An overflow in such a plugin, possibly through a long URL or redirect parameter, can allow an adversary not only to bypass the security checks but also execute arbitrary code on the target web server in the context of the user that runs the web server process.::",::120::119::131::129::805::680::,TAXONOMY NAME:WASC:ENTRY ID:07:ENTRY NAME:Buffer Overflow::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Buffer overflow attack::,
Clickjacking,Standard,Draft,"An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.",,Medium,High,::NATURE:ChildOf:CAPEC ID:173::,"::STEP:1:PHASE:Experiment:DESCRIPTION:[Craft a clickjacking page] The adversary utilizes web page layering techniques to try to craft a malicious clickjacking page:TECHNIQUE:The adversary leveraged iframe overlay capabilities to craft a malicious clickjacking page:TECHNIQUE:The adversary leveraged Flash file overlay capabilities to craft a malicious clickjacking page:TECHNIQUE:The adversary leveraged Silverlight overlay capabilities to craft a malicious clickjacking page:TECHNIQUE:The adversary leveraged cross-frame scripting to craft a malicious clickjacking page::STEP:2:PHASE:Exploit:DESCRIPTION:[Adversary lures victim to clickjacking page] Adversary utilizes some form of temptation, misdirection or coercion to lure the victim to loading and interacting with the clickjacking page in a way that increases the chances that the victim will click in the right areas.:TECHNIQUE:Lure the victim to the malicious site by sending the victim an e-mail with a URL to the site.:TECHNIQUE:Lure the victim to the malicious site by manipulating URLs on a site trusted by the victim.:TECHNIQUE:Lure the victim to the malicious site through a cross-site scripting attack.::STEP:3:PHASE:Exploit:DESCRIPTION:[Trick victim into interacting with the clickjacking page in the desired manner] The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.:TECHNIQUE:Hide action controls over very commonly used functionality.:TECHNIQUE:Hide action controls over very psychologically tempting content.::","::The victim is communicating with the target application via a web based UI and not a thick client::The victim's browser security policies allow at least one of the following JavaScript, Flash, iFrames, ActiveX, or CSS.::The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser)::The victim has an active session with the target system.::The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system::",::SKILL:Crafting the proper malicious site and luring the victim to this site are not trivial tasks.:LEVEL:High::,::None: No specialized resources are required to execute this type of attack.::,,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::,"::If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.::Turn off JavaScript, Flash and disable CSS.::When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.::","::A victim has an authenticated session with a site that provides an electronic payment service to transfer funds between subscribing members. At the same time, the victim receives an e-mail that appears to come from an online publication to which they subscribe with links to today's news articles. The victim clicks on one of these links and is taken to a page with the news story. There is a screen with an advertisement that appears on top of the news article with the 'skip this ad' button. Eager to read the news article, the user clicks on this button. Nothing happens. The user clicks on the button one more time and still nothing happens. In reality, the victim activated a hidden action control located in a transparent layer above the 'skip this ad' button. The ad screen blocking the news article made it likely that the victim would click on the 'skip this ad' button. Clicking on the button, actually initiated the transfer of $1000 from the victim's account with an electronic payment service to an adversary's account. Clicking on the 'skip this ad' button the second time (after nothing seemingly happened the first time) confirmed the transfer of funds to the electronic payment service.::",::1021::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Clickjacking::,
Cross Zone Scripting,Standard,Draft,An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security.,,Medium,High,::NATURE:ChildOf:CAPEC ID:233::,::STEP:1:PHASE:Explore:DESCRIPTION:[Find systems susceptible to the attack] Find systems that contain functionality that is accessed from both the internet zone and the local zone. There needs to be a way to supply input to that functionality from the internet zone and that original input needs to be used later on a page from a local zone.:TECHNIQUE:Leverage knowledge of common local zone functionality on targeted platforms to guide attempted injection of code through relevant internet zone mechanisms. In some cases this may be due to standard system configurations enabling shared functionality between internet and local zones. The attacker can search for indicators that these standard configurations are in place.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find the insertion point for the payload] The attacker first needs to find some system functionality or possibly another weakness in the system (e.g. susceptibility to cross site scripting) that would provide the attacker with a mechanism to deliver the payload (i.e. the code to be executed) to the user. The location from which this code is executed in the user's browser needs to be within the local machine zone.:TECHNIQUE:Finding weaknesses in functionality used by both privileged and unprivileged users.::STEP:3:PHASE:Exploit:DESCRIPTION:[Craft and inject the payload] Develop the payload to be executed in the higher privileged zone in the user's browser. Inject the payload and attempt to lure the victim (if possible) into executing the functionality which unleashes the payload.:TECHNIQUE:The attacker makes it as likely as possible that the vulnerable functionality into which they have injected the payload has a high likelihood of being used by the victim.:TECHNIQUE:Leverage cross-site scripting vulnerability to inject payload.::,::The target must be using a zone-aware browser.::,::SKILL:Ability to craft malicious scripts or find them elsewhere and ability to identify functionality that is running web controls in the local zone and to find an injection vector into that functionality:LEVEL:Medium::,::None: No specialized resources are required to execute this type of attack.::,,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::,::Disable script execution.::Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone::Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone::Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum::Ensure proper HTML output encoding before writing user supplied data to the page::,"::There was a cross zone scripting vulnerability discovered in Skype that allowed one user to upload a video with a maliciously crafted title that contains a script. Subsequently, when the victim attempts to use the add video to chat feature on attacker's video, the script embedded in the title of the video runs with local zone privileges. Skype is using IE web controls to render internal and external HTML pages. Add video to chat uses these web controls and they are running in the Local Zone. Any user who searched for the video in Skype with the same keywords as in the title field, would have the attackers' code executing in their browser with local zone privileges to their host machine (e.g. applications on the victim's host system could be executed).::",::250::638::285::116::20::,,
JSON Hijacking (aka JavaScript Hijacking),Standard,Draft,An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.,,High,High,::NATURE:ChildOf:CAPEC ID:212::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Understand How to Request JSON Responses from the Target System] An attacker first explores the target system to understand what URLs need to be provided to it in order to retrieve JSON objects that contain information of interest to the attacker.:TECHNIQUE:An attacker creates an account with the target system and observes requests and the corresponding JSON responses from the server. Understanding how to properly elicit responses from the server is crucial to the attackers' ability to craft the exploit.::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft a malicious website]The attacker crafts a malicious website to which they plan to lure the victim who is using the vulnerable target system. The malicious website does two things: 1. Contains a hook that intercepts incoming JSON objects, reads their contents and forwards the contents to the server controlled by the attacker (via a new XMLHttpRequest). 2. Uses the script tag with a URL in the source that requests a JSON object from the vulnerable target system. Once the JSON object is transmitted to the victim's browser, the malicious code (as described in step 1) intercepts that JSON object, steals its contents, and forwards to the attacker. This attack step leverages the fact that the same origin policy in the browser does not protect JavaScript originating from one domain from setting up an environment to intercept and access JSON objects arriving from a completely different domain.::STEP:3:PHASE:Exploit:DESCRIPTION:[Launch JSON hijack] An attacker lures the victim to the malicious website or leverages other means to get their malicious code executing in the victim's browser. Once that happens, the malicious code makes a request to the victim target system to retrieve a JSON object with sensitive information. The request includes the victim's session cookie if the victim is logged in.:TECHNIQUE:An attacker employs a myriad of standard techniques to get the victim to visit their malicious site or by some other means get the attackers' malicious code executing in the victim's browser.::",::JSON is used as a transport mechanism between the client and the server::The target server cannot differentiate real requests from forged requests::The JSON object returned from the server can be accessed by the attackers' malicious code via a script tag::,"::SKILL:Once this attack pattern is developed and understood, creating an exploit is not very complex.The attacker needs to have knowledge of the URLs that need to be accessed on the target system to request the JSON objects.:LEVEL:Medium::",::None: No specialized resources are required to execute this type of attack.::,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,"::Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.::On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).::Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.::Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario.::","::Gmail service was found to be vulnerable to a JSON Hijacking attack that enabled an attacker to get the contents of the victim's address book. An attacker could send an e-mail to the victim's Gmail account (which ensures that the victim is logged in to Gmail when they receive it) with a link to the attackers' malicious site. If the victim clicked on the link, a request (containing the victim's authenticated session cookie) would be sent to the Gmail servers to fetch the victim's address book. This functionality is typically used by the Gmail service to get this data on the fly so that the user can be provided a list of contacts from which to choose the recipient of the e-mail. When the JSON object with the contacts came back, it was loaded into the JavaScript space via a script tag on the attackers' malicious page. Since the JSON object was never assigned to a local variable (which would have prevented a script from a different domain accessing it due to the browser's same origin policy), another mechanism was needed to access the data that it contained. That mechanism was overwriting the internal array constructor with the attackers' own constructor in order to gain access to the JSON object's contents. These contents could then be transferred to the site controlled by the attacker.::",::345::346::352::,,
Choosing Message Identifier,Standard,Draft,"This pattern of attack is defined by the selection of messages distributed via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.",,High,High,::NATURE:PeerOf:CAPEC ID:21::NATURE:ChildOf:CAPEC ID:216::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Nature of Messages] Determine the nature of messages being transported as well as the identifiers to be used as part of the attack::STEP:2:PHASE:Experiment:DESCRIPTION:[Authenticate] If required, authenticate to the distribution channel::STEP:3:PHASE:Experiment:DESCRIPTION:[Identify Known Client Identifiers] If any particular client's information is available through a control channel available to all users, the adversary will discover particular identifiers for targeted clients by observing this channel, or requesting client information through this channel.::STEP:4:PHASE:Experiment:DESCRIPTION:[Change Message Identifier] Adversaries with client access connecting to output channels could change their channel identifier and see someone else's (perhaps more privileged) data.::","::Information and client-sensitive (and client-specific) data must be present through a distribution channel available to all users.::Distribution means must code (through channel, message identifiers, or convention) message destination in a manner visible within the distribution means itself (such as a control channel) or in the messages themselves.::",::SKILL:All the adversary needs to discover is the format of the messages on the channel/distribution means and the particular identifier used within the messages.:LEVEL:Low::,::The adversary needs the ability to control source code or application configuration responsible for selecting which message/channel id is absorbed from the public distribution means.::,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::Associate some ACL (in the form of a token) with an authenticated user which they provide middleware. The middleware uses this token as part of its channel/message selection for that client, or part of a discerning authorization decision for privileged channels/messages. The purpose is to architect the system in a way that associates proper authentication/authorization with each channel/message.::Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them.::","::A certain B2B interface on a large application codes for messages passed over an MQSeries queue, on a single Partners channel. Messages on that channel code for their client destination based on a partner_ID field, held by each message. That field is a simple integer. Adversaries having access to that channel, perhaps a particularly nosey partner, can simply choose to store messages of another partner's ID and read them as they desire. Note that authentication does not prevent a partner from leveraging this attack on other partners. It simply disallows adversaries without partner status from conducting this attack.::",::201::306::,,
Exploit Non-Production Interfaces,Standard,Stable,"An adversary exploits a sample, demonstration, test, or debug interface that is unintentionally enabled on a production system, with the goal of gleaning information or leveraging functionality that would otherwise be unavailable.",,Low,High,::NATURE:ChildOf:CAPEC ID:113::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Vulnerable Interface] An adversary explores a target system for sample or test interfaces that have not been disabled by a system administrator and which may be exploitable by the adversary.:TECHNIQUE:If needed, the adversary explores an organization's network to determine if any specific systems of interest exist.::STEP:2:PHASE:Exploit:DESCRIPTION:[Leverage Test Interface to Execute Attacks] Once an adversary has discovered a system with a non-production interface, the interface is leveraged to exploit the system and/or conduct various attacks.:TECHNIQUE:The adversary can leverage the sample or test interface to conduct several types of attacks such as Adversary-in-the-Middle attacks (CAPEC-94), keylogging, Cross Site Scripting (XSS), hardware manipulation attacks, and more.::",::The target must have configured non-production interfaces and failed to secure or remove them when brought into a production environment.::,::SKILL:Exploiting non-production interfaces requires significant skill and knowledge about the potential non-production interfaces left enabled in production.:LEVEL:High::,"::For some interfaces, the adversary will need that appropriate client application or hardware that interfaces with the interface. Other non-production interfaces can be executed using simple tools, such as web browsers or console windows. In some cases, an adversary may need to be able to authenticate to the target before it can access the vulnerable interface.::",,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Access Control:SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Alter Execution Logic::,::Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.::,"::Some software applications include application programming interfaces (APIs) that are intended to allow an administrator to test and refine their domain. These APIs are typically disabled once a system enters a production environment, but may be left in an insecure state due to a configuration error or mismanagement.::Many hardware systems leverage bits typically reserved for future functionality for testing and debugging purposes. If these reserved bits remain enabled in a production environment, it could allow an adversary to induce unwanted/unsupported behavior in the hardware.::",::489::1209::1259::1267::1270::1294::1295::1296::1302::1313::,,
Path Traversal,Standard,Draft,"An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or ) and/or dots (.)) to reach desired directories or files.",::TERM:Directory Traversal:DESCRIPTION:::,High,Very High,::NATURE:ChildOf:CAPEC ID:153::NATURE:CanPrecede:CAPEC ID:664::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Fingerprinting of the operating system] In order to perform a valid path traversal, the attacker needs to know what the underlying OS is so that the proper file seperator is used.:TECHNIQUE:Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.:TECHNIQUE:TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.:TECHNIQUE:Induce errors to find informative error messages::STEP:2:PHASE:Explore:DESCRIPTION:[Survey the Application to Identify User-controllable Inputs] The attacker surveys the target application to identify all user-controllable file inputs::STEP:3:PHASE:Experiment:DESCRIPTION:[Vary inputs, looking for malicious results] Depending on whether the application being exploited is a remote or local one, the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application::STEP:4:PHASE:Exploit:DESCRIPTION:[Manipulate files accessible by the application] The attacker may steal information or directly manipulate files (delete, copy, flush, etc.)::",::The attacker must be able to control the path that is requested of the target.::The target must fail to adequately sanitize incoming paths::,::SKILL:Simple command line attacks or to inject the malicious payload in a web page.:LEVEL:Low::SKILL:Customizing attacks to bypass non trivial filters in the application.:LEVEL:Medium::,::The ability to manually manipulate path information either directly through a client application relative to the service or application or via a proxy application.::,,"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.::","::Design: Configure the access control correctly.::Design: Enforce principle of least privilege.::Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.::Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.::Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.::Implementation: Perform input validation for all remote content, including remote and user-generated content.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::Implementation: Use indirect references rather than actual file names.::Implementation: Use possible permissions on file access when developing and deploying web applications.::Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.::","::An example of using path traversal to attack some set of resources on a web server is to use a standard HTTP request http://example/../../../../../etc/passwd From an attacker point of view, this may be sufficient to gain access to the password file on a poorly protected system. If the attacker can list directories of critical resources then read only access is not sufficient to protect the system.::",::22::,TAXONOMY NAME:WASC:ENTRY ID:33:ENTRY NAME:Path Traversal::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Path Traversal::,
Integer Attacks,Standard,Draft,"An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats.",,,Medium,::NATURE:ChildOf:CAPEC ID:153::,,::The target application must have an integer variable for which only some of the possible integer values are expected by the application and where there are no checks on the value of the variable before use.::The attacker must be able to manipulate the targeted integer variable such that normal operations result in non-standard values due to the storage structure of integers.::,,::None: No specialized resources are required to execute this type of attack.::,,,,,::682::,,
Try All Common Switches,Standard,Draft,"An attacker attempts to invoke all common switches and options in the target application for the purpose of discovering weaknesses in the target. For example, in some applications, adding a --debug switch causes debugging information to be displayed, which can sometimes reveal sensitive processing or configuration information to an attacker. This attack differs from other forms of API abuse in that the attacker is indiscriminately attempting to invoke options in the hope that one of them will work rather than specifically targeting a known option. Nonetheless, even if the attacker is familiar with the published options of a targeted application this attack method may still be fruitful as it might discover unpublicized functionality.",,,Medium,::NATURE:ChildOf:CAPEC ID:113::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify application] Discover an application of interest by exploring service registry listings or by connecting on a known port or some similar means.:TECHNIQUE:Search via internet for known, published applications that allow option switches.:TECHNIQUE:Use automated tools to scan known ports to identify applications that might be accessible::STEP:2:PHASE:Explore:DESCRIPTION:[Authenticate to application] Authenticate to the application, if required, in order to explore it.:TECHNIQUE:Use published credentials to access system.:TECHNIQUE:Find unpublished credentails to access service.:TECHNIQUE:Use other attack pattern or weakness to bypass authentication.::STEP:3:PHASE:Experiment:DESCRIPTION:[Try all common switches] Using manual or automated means, attempt to run the application with many different known common switches. Observe the output to see if any switches seemed to put the application in a non production mode that might give more information.:TECHNIQUE:Manually execute the application with switches such as --debug, --test, --development, --verbose, etc.:TECHNIQUE:Use automated tools to run the application with common switches and observe the output::STEP:4:PHASE:Exploit:DESCRIPTION:[Use sensitive processing or configuration information] Once extra information is observed from an application through the use of a common switch, this information is used to aid other attacks on the application:TECHNIQUE:Using application information, formulate an attack on the application::",::The attacker must be able to control the options or switches sent to the target.::,,::None: No specialized resources are required to execute this type of attack. The only requirement is the ability to send requests to the target.::,,,::Design: Minimize switch and option functionality to only that necessary for correct function of the command.::Implementation: Remove all debug and testing options from production code.::,,::912::,,
Email Injection,Standard,Draft,An adversary manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol.,,,Medium,::NATURE:ChildOf:CAPEC ID:137::,,"::The target application must allow the user to send email to some recipient, to specify the content at least one header field in the message, and must fail to sanitize against the injection of command separators.::The adversary must have the ability to access the target mail application.::",,::None: No specialized resources are required to execute this type of attack.::,,,,,::150::,TAXONOMY NAME:WASC:ENTRY ID:30:ENTRY NAME:Mail Command Injection::,
Format String Injection,Standard,Draft,"An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",,High,High,::NATURE:ChildOf:CAPEC ID:137::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey application] The adversary takes an inventory of the entry points of the application.:TECHNIQUE:Spider web sites for all available links:TECHNIQUE:List parameters, external variables, configuration files variables, etc. that are possibly used by the application.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine user-controllable input susceptible to format string injection] Determine the user-controllable input susceptible to format string injection. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.:TECHNIQUE:Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters.::STEP:3:PHASE:Exploit:DESCRIPTION:[Try to exploit the Format String Injection vulnerability] After determining that a given input is vulnerable to format string injection, hypothesize what the underlying usage looks like and the associated constraints.:TECHNIQUE:Insert various formatting characters to read or write the memory, e.g. overwrite return address, etc.::","::The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.::","::SKILL:In order to discover format string vulnerabilities it takes only low skill, however, converting this discovery into a working exploit requires advanced knowledge on the part of the adversary.:LEVEL:High::",::None: No specialized resources are required to execute this type of attack.::,,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::,::Limit the usage of formatting string functions.::Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.::,"::Untrusted search path vulnerability in the add_filename_to_string function in intl/gettext/loadmsgcat.c for Elinks 0.11.1 allows local users to cause Elinks to use an untrusted gettext message catalog (.po file) in a ../po directory, which can be leveraged to conduct format string attacks. See also: CVE-2007-2027::",::134::20::74::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Format string attack::,
LDAP Injection,Standard,Draft,"An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.",,High,High,::NATURE:ChildOf:CAPEC ID:248::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey application] The attacker takes an inventory of the entry points of the application.:TECHNIQUE:Spider web sites for all available links:TECHNIQUE:Sniff network communications with application using a utility such as WireShark.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine user-controllable input susceptible to LDAP injection] For each user-controllable input that the attacker suspects is vulnerable to LDAP injection, attempt to inject characters that have special meaning in LDAP (such as a single quote character, etc.). The goal is to create a LDAP query with an invalid syntax:TECHNIQUE:Use web browser to inject input through text fields or through HTTP GET parameters:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.:TECHNIQUE:Use modified client (modified by reverse engineering) to inject input.::STEP:3:PHASE:Experiment:DESCRIPTION:[Try to exploit the LDAP injection vulnerability] After determining that a given input is vulnerable to LDAP Injection, hypothesize what the underlying query looks like. Possibly using a tool, iteratively try to add logic to the query to extract information from the LDAP, or to modify or delete information in the LDAP.:TECHNIQUE:Add logic to the LDAP query to change the meaning of that command. Automated tools could be used to generate the LDAP injection strings.:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.::","::The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.::","::SKILL:The attacker needs to have knowledge of LDAP, especially its query syntax.:LEVEL:Medium::",,,::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::,::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.::,"::PowerDNS before 2.9.18, when running with an LDAP backend, does not properly escape LDAP queries, which allows remote attackers to cause a denial of service (failure to answer ldap questions) and possibly conduct an LDAP injection attack. See also: CVE-2005-2301::",::77::90::20::,TAXONOMY NAME:WASC:ENTRY ID:29:ENTRY NAME:LDAP Injection::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:LDAP Injection::,
Reflection Injection,Standard,Draft,"An adversary supplies a value to the target application which is then used by reflection methods to identify a class, method, or field. For example, in the Java programming language the reflection libraries permit an application to inspect, load, and invoke classes and their components by name. If an adversary can control the input into these methods including the name of the class/method/field or the parameters passed to methods, they can cause the targeted application to invoke incorrect methods, read random fields, or even to load and utilize malicious classes that the adversary created. This can lead to the application revealing sensitive information, returning incorrect results, or even having the adversary take control of the targeted application.",,,Very High,::NATURE:ChildOf:CAPEC ID:137::,,"::The target application must utilize reflection libraries and allow users to directly control the parameters to these methods. If the adversary can host classes where the target can invoke them, more powerful variants of this attack are possible.::The target application must accept a string as user input, fail to sanitize characters that have a special meaning in the parameter encoding, and insert the user-supplied string in an encoding which is then processed.::",,::None: No specialized resources are required to execute this type of attack.::,,,,,::470::,,
Bypassing of Intermediate Forms in Multiple-Form Sets,Standard,Draft,"Some web applications require users to submit information through an ordered sequence of web forms. This is often done if there is a very large amount of information being collected or if information on earlier forms is used to pre-populate fields or determine which additional information the application needs to collect. An attacker who knows the names of the various forms in the sequence may be able to explicitly type in the name of a later form and navigate to it without first going through the previous forms. This can result in incomplete collection of information, incorrect assumptions about the information submitted by the attacker, or other problems that can impair the functioning of the application.",,,Medium,::NATURE:ChildOf:CAPEC ID:74::,,::The target must collect information from the user in a series of forms where each form has its own URL that the attacker can anticipate and the application must fail to detect attempts to access intermediate forms without first filling out the previous forms.::,,::None: No specialized resources are required to execute this type of attack.::,,,,,::372::,,
Cache Poisoning,Standard,Draft,"An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.",,High,High,::NATURE:ChildOf:CAPEC ID:161::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify and explore caches] Use tools to sniff traffic and scan a network in order to locate application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache) that may have vulnerabilities. Look for poisoning point in cache table entries.:TECHNIQUE:Run tools that check available entries in the cache.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause specific data to be cached] An attacker sends bogus request to the target, and then floods responses that trick a cache to remember malicious responses, which are wrong answers of queries.:TECHNIQUE:Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect users to malicious website] As the attacker succeeds in exploiting the vulnerability, they are able to manipulate and interpose malicious response data to targeted victim queries.:TECHNIQUE:Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).:TECHNIQUE:Adversary-in-the-Middle attacks (CAPEC-94) intercept secure communication between two parties.::",::The attacker must be able to modify the value stored in a cache to match a desired value.::The targeted application must not be able to detect the illicit modification of the cache and must trust the cache value in its calculations.::,::SKILL:To overwrite/modify targeted cache:LEVEL:Medium::,,,,"::Configuration: Disable client side caching.::Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.::","::In this example, an attacker sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7. Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the attacker floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.::",::348::345::349::346::,TAXONOMY NAME:ATTACK:ENTRY ID:1557.002:ENTRY NAME:Adversary-in-the-Middle: ARP Cache Poisoning::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cache Poisoning::,
Command Delimiters,Standard,Draft,"An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",,High,High,::NATURE:ChildOf:CAPEC ID:137::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Assess Target Runtime Environment] In situations where the runtime environment is not implicitly known, the attacker makes connections to the target system and tries to determine the system's runtime environment. Knowing the environment is vital to choosing the correct delimiters.:TECHNIQUE:Port mapping using network connection-based software (e.g., nmap, nessus, etc.):TECHNIQUE:Port mapping by exploring the operating system (netstat, sockstat, etc.):TECHNIQUE:TCP/IP Fingerprinting:TECHNIQUE:Induce errors to find informative error messages::STEP:2:PHASE:Explore:DESCRIPTION:[Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated user:TECHNIQUE:Spidering web sites for all available links:TECHNIQUE:Inventory all application inputs::STEP:3:PHASE:Experiment:DESCRIPTION:[Attempt delimiters in inputs] The attacker systematically attempts variations of delimiters on known inputs, observing the application's response each time.:TECHNIQUE:Inject command delimiters using network packet injection tools (netcat, nemesis, etc.):TECHNIQUE:Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.):TECHNIQUE:Enter command delimiters directly in input fields.::STEP:4:PHASE:Exploit:DESCRIPTION:[Use malicious command delimiters] The attacker uses combinations of payload and carefully placed command delimiters to attack the software.::",::Software's input validation or filtering must not detect and block presence of additional malicious command.::,"::SKILL:The attacker has to identify injection vector, identify the specific commands, and optionally collect the output, i.e. from an interactive session.:LEVEL:Medium::","::Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::",,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,"::Design: Perform allowlist validation against a positive specification for command length, type, and parameters.::Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account::Implementation: Perform input validation for all remote content.::Implementation: Use type conversions such as JDBC prepared statements.::","::By appending special characters, such as a semicolon or other commands that are executed by the target process, the attacker is able to execute a wide variety of malicious commands in the target process space, utilizing the target's inherited permissions, against any resource the host has access to. The possibilities are vast including injection attacks against RDBMS (SQL Injection), directory servers (LDAP Injection), XML documents (XPath and XQuery Injection), and command line shells. In many injection attacks, the results are converted back to strings and displayed to the client process such as a web browser without tripping any security alarms, so the network firewall does not log any out of the ordinary behavior. LDAP servers house critical identity assets such as user, profile, password, and group information that is used to authenticate and authorize users. An attacker that can query the directory at will and execute custom commands against the directory server is literally working with the keys to the kingdom in many enterprises. When user, organizational units, and other directory objects are queried by building the query string directly from user input with no validation, or other conversion, then the attacker has the ability to use any LDAP commands to query, filter, list, and crawl against the LDAP server directly in the same manner as SQL injection gives the ability to the attacker to run SQL commands on the database.::",::146::77::184::78::185::93::140::157::138::154::697::,,
Collect Data from Common Resource Locations,Standard,Draft,"An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.",,,Medium,::NATURE:ChildOf:CAPEC ID:116::,,"::The targeted applications must either expect files to be located at a specific location or, if the location of the files can be configured by the user, the user either failed to move the files from the default location or placed them in a conventional location for files of the given type.::",,"::None: No specialized resources are required to execute this type of attack. In some cases, the attacker need not even have direct access to the locations on the target computer where the targeted resources reside.::",,,,"::An adversary can use a technique called Bluesnarfing to retrieve data from Bluetooth enabled devices in which they know where the data is located. This is done by connecting to the device’s Object Exchange (OBEX) Push Profile and making OBEX GET requests for known filenames (contact lists, photos, recent calls). Bluesnarfing was patched shortly after its discovery in 2003 and will only work on devices created before or during this time.::",::552::1239::1258::1266::1272::1323::1330::,TAXONOMY NAME:ATTACK:ENTRY ID:1003:ENTRY NAME:OS Credential Dumping::::TAXONOMY NAME:ATTACK:ENTRY ID:1119:ENTRY NAME:Automated Collection::::TAXONOMY NAME:ATTACK:ENTRY ID:1213:ENTRY NAME:Data from Information Repositories::::TAXONOMY NAME:ATTACK:ENTRY ID:1530:ENTRY NAME:Data from Cloud Storage Object::::TAXONOMY NAME:ATTACK:ENTRY ID:1555:ENTRY NAME:Credentials from Password Stores::::TAXONOMY NAME:ATTACK:ENTRY ID:1602:ENTRY NAME:Data from Configuration Repository::,
Sniffing Attacks,Standard,Draft,"In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.",,,Medium,::NATURE:ChildOf:CAPEC ID:117::NATURE:CanPrecede:CAPEC ID:652::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Communication Mechanism] The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.:TECHNIQUE:Look for application documentation that might describe a communication mechanism used by a target.::STEP:2:PHASE:Experiment:DESCRIPTION:[Position In Between Targets] The adversary positions themselves somewhere in the middle of the two components. If the communication is encrypted, the adversary will need to act as a proxy and route traffic between the components, exploiting a flaw in the encryption mechanism. Otherwise, the adversary can just observe the communication at either end.:TECHNIQUE:Use Wireshark or some other packet capturing tool to capture traffic on a network.:TECHNIQUE:Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client.:TECHNIQUE:Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL.::STEP:3:PHASE:Exploit:DESCRIPTION:[Listen to Communication] The adversary observes communication, but does not alter or block it. The adversary gains access to sensitive information and can potentially utilize this information in a malicious way.::",::The target data stream must be transmitted on a medium to which the adversary has access.::,,"::The adversary must be able to intercept the transmissions containing the data of interest. Depending on the medium of transmission and the path the data takes between the sender and recipient, the adversary may require special equipment and/or require that this equipment be placed in specific locations (e.g., a network sniffing tool)::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,::Encrypt sensitive information when transmitted on insecure mediums to prevent interception.::,,::311::,,
Redirect Access to Libraries,Standard,Stable,"An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",,High,Very High,::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:185::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target] The adversary identifies the target application and determines what libraries are being used.:TECHNIQUE:Find public source code and identify library dependencies.:TECHNIQUE:Gain access to the system hosting the application and look for libraries in common locations.::STEP:2:PHASE:Experiment:DESCRIPTION:[Deploy Malicious Libraries] The adversary crafts malicious libraries and deploys them on the system where the application is running, or in a remote location that can be loaded by the application.::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect Library Calls to Malicious Library] Once the malicious library crafted by the adversary is deployed, the adversary will manipulate the flow of the application such that it calls the malicious library. This can be done in a variety of ways based on how the application is loading and calling libraries.:TECHNIQUE:Poison the DNS cache of the system so that it loads a malicious library from a remote location hosted by the adversary instead of the legitimate location:TECHNIQUE:Create a symlink that tricks the application into thinking that a malicious library is the legitimate library.:TECHNIQUE:Use DLL side-loading to place a malicious verison of a DLL in the windows directory.::",::The target must utilize external libraries and must fail to verify the integrity of these libraries before using them.::,::SKILL:To modify the entries in the configuration file pointing to malicious libraries:LEVEL:Low::SKILL:To force symlink and timing issues for redirecting access to libraries:LEVEL:Medium::SKILL:To reverse engineering the libraries and inject malicious code into the libraries:LEVEL:High::,,,::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::,::Implementation: Restrict the permission to modify the entries in the configuration file.::Implementation: Check the integrity of the dynamically linked libraries before use them.::Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.::,"::In this example, the attacker using ELF infection that redirects the Procedure Linkage Table (PLT) of an executable allowing redirection to be resident outside of the infected executable. The algorithm at the entry point code is as follows... • mark the text segment writeable • save the PLT(GOT) entry • replace the PLT(GOT) entry with the address of the new lib call The algorithm in the new library call is as follows... • do the payload of the new lib call • restore the original PLT(GOT) entry • call the lib call • save the PLT(GOT) entry again (if its changed) • replace the PLT(GOT) entry with the address of the new lib call::",::706::,TAXONOMY NAME:ATTACK:ENTRY ID:1574.008:ENTRY NAME:Hijack Execution Flow:Path Interception by Search Order Hijacking::,
Exploit Script-Based APIs,Standard,Draft,"Some APIs support scripting instructions as arguments. Methods that take scripted instructions (or references to scripted instructions) can be very flexible and powerful. However, if an attacker can specify the script that serves as input to these methods they can gain access to a great deal of functionality. For example, HTML pages support <script> tags that allow scripting languages to be embedded in the page and then interpreted by the receiving web browser. If the content provider is malicious, these scripts can compromise the client application. Some applications may even execute the scripts under their own identity (rather than the identity of the user providing the script) which can allow attackers to perform activities that would otherwise be denied to them.",,,Medium,::NATURE:ChildOf:CAPEC ID:113::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify API] Discover an API of interest by exploring application documentation or observing responses to API calls:TECHNIQUE:Search via internet for known, published APIs that support scripting instructions as arguments::STEP:2:PHASE:Experiment:DESCRIPTION:[Test simple script] Adversaries will attempt to give a smaller script as input to the API, such as simply printing to the console, to see if the attack is viable.:TECHNIQUE:Create a general script to be taken as input by the API::STEP:3:PHASE:Exploit:DESCRIPTION:[Give malicious scripting instructions to API] Adversaries will now craft custom scripts to do malicious behavior. Depending on the setup of the application this script could be run with user or admin level priveleges.:TECHNIQUE:Crafting a malicious script to be run on a system based on priveleges and capabilities of the system::",::The target application must include the use of APIs that execute scripts.::The target application must allow the attacker to provide some or all of the arguments to one of these script interpretation methods and must fail to adequately filter these arguments for dangerous or unwanted script commands.::,,::None: No specialized resources are required to execute this type of attack.::,,,,,::346::,,
Force the System to Reset Values,Standard,Draft,"An attacker forces the target into a previous state in order to leverage potential weaknesses in the target dependent upon a prior configuration or state-dependent factors. Even in cases where an attacker may not be able to directly control the configuration of the targeted application, they may be able to reset the configuration to a prior state since many applications implement reset functions.",,,Medium,::NATURE:ChildOf:CAPEC ID:161::,,::The targeted application must have a reset function that returns the configuration of the application to an earlier state.::The reset functionality must be inadequately protected against use.::,,"::None: No specialized resources are required to execute this type of attack. In some cases, the attacker may need special client applications in order to execute the reset functionality.::",,,,,::306::1221::1232::,,
White Box Reverse Engineering,Standard,Draft,"An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.",,,Medium,::NATURE:ChildOf:CAPEC ID:188::,,::Direct access to the object or software.::,,::Reverse engineering of software requires varying tools and methods that enable the decompiling of executable or other compiled objects.::,,,,,::1323::,,
Using Malicious Files,Standard,Draft,"An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.",,High,Very High,::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:233::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine File/Directory Configuration] The adversary looks for misconfigured files or directories on a system that might give executable access to an overly broad group of users.:TECHNIQUE:Through shell access to a system, use the command ls -l to view permissions for files and directories.::STEP:2:PHASE:Experiment:DESCRIPTION:[Upload Malicious Files] If the adversary discovers a directory that has executable permissions, they will attempt to upload a malicious file to execute.:TECHNIQUE:Upload a malicious file through a misconfigured FTP server.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute Malicious File] The adversary either executes the uploaded malicious file, or executes an existing file that has been misconfigured to allow executable access to the adversary.::",::System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.::,::SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low::,"::Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::",,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::Design: Enforce principle of least privilege::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::",::Consider a directory on a web server with the following permissions drwxrwxrwx 5 admin public 170 Nov 17 01:08 webroot This could allow an attacker to both execute and upload and execute programs' on the web server. This one vulnerability can be exploited by a threat to probe the system and identify additional vulnerabilities to exploit.::,::732::285::272::59::282::270::693::,TAXONOMY NAME:ATTACK:ENTRY ID:1574.005:ENTRY NAME:Hijack Execution Flow: Executable Installer File Permissions Weakness::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.010:ENTRY NAME:Hijack Execution Flow: Services File Permissions Weakness::,
Calling Micro-Services Directly,Standard,Draft,An attacker is able to discover and query Micro-services at a web location and thereby expose the Micro-services to further exploitation by gathering information about their implementation and function. Micro-services in web pages allow portions of a page to connect to the server and update content without needing to cause the entire page to update. This allows user activity to change portions of the page more quickly without causing disruptions elsewhere.,,,Medium,::NATURE:ChildOf:CAPEC ID:554::,,::The target site must use micro-services that interact with the server and one or more of these micro-services must be vulnerable to some other attack pattern.::,,::The attacker usually needs to be able to invoke micro-services directly in order to control the parameters that are used in their attack. The attacker may require other resources depending on the nature of the flaw in the targeted micro-service.::,,,,,,,
Exploiting Incorrectly Configured Access Control Security Levels,Standard,Draft,"An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",,High,Medium,::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey] The attacker surveys the target application, possibly as a valid and authenticated user.:TECHNIQUE:Spider the web site for all available links.:TECHNIQUE:Brute force to guess all function names/action with different privileges.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify weak points in access control configurations] The attacker probes the access control for functions and data identified in the Explore phase to identify potential weaknesses in how the access controls are configured.:TECHNIQUE:The attacker attempts authenticated access to targeted functions and data.:TECHNIQUE:The attacker attempts unauthenticated access to targeted functions and data.:TECHNIQUE:The attacker attempts indirect and side channel access to targeted functions and data.::STEP:3:PHASE:Exploit:DESCRIPTION:[Access the function or data bypassing the access control] The attacker executes the function or accesses the data identified in the Explore phase bypassing the access control.:TECHNIQUE:The attacker executes the function or accesses the data not authorized to them.::","::The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity..::","::SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low::",::None: No specialized resources are required to execute this type of attack.::,,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::,::Design: Configure the access control correctly.::,"::For example, an incorrectly configured Web server, may allow unauthorized access to it, thus threaten the security of the Web application.::",::732::1190::1191::1193::1220::1268::1280::1297::1311::1315::1318::1320::1321::,TAXONOMY NAME:ATTACK:ENTRY ID:1574.010:ENTRY NAME:Hijack Execution Flow: Services File Permissions Weaknesses::,
Flash Injection,Standard,Draft,"An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.",,High,Medium,::NATURE:ChildOf:CAPEC ID:137::NATURE:CanAlsoBe:CAPEC ID:248::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find Injection Entry Points] The attacker first takes an inventory of the entry points of the application.:TECHNIQUE:Spider the website for all available URLs that reference a Flash application.:TECHNIQUE:List all uninitialized global variables (such as _root.*, _global.*, _level0.*) in ActionScript, registered global variables in included files, load variables to external movies.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine the application's susceptibility to Flash injection] Determine the application's susceptibility to Flash injection. For each URL identified in the explore phase, the attacker attempts to use various techniques such as direct load asfunction, controlled evil page/host, Flash HTML injection, and DOM injection to determine whether the application is susceptible to Flash injection.:TECHNIQUE:Test the page using direct load asfunction, getURL,javascript:gotRoot()///d.jpg:TECHNIQUE:Test the page using controlled evil page/host, http://example.com/evil.swf:TECHNIQUE:Test the page using Flash HTML injection, '><img src='asfunction:getURL,javascript:gotRoot()//.jpg' >:TECHNIQUE:Test the page using DOM injection, (gotRoot(''))::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject malicious content into target] Inject malicious content into target utilizing vulnerable injection vectors identified in the Experiment phase::","::The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link.::","::SKILL:The attacker needs to have knowledge of Flash, especially how to insert content the executes commands.:LEVEL:Medium::",::None: No specialized resources are required to execute this type of attack. The attacker may need to be able to serve the injected Flash content.::,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::,::Implementation: remove sensitive information such as user name and password in the SWF file.::Implementation: use validation on both client and server side.::Implementation: remove debug information.::Implementation: use SSL when loading external data::Implementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.::,"::In the following example, the SWF file contains getURL('javascript:SomeFunc(someValue)','','GET') A request like http://example.com/noundef.swf?a=0:0;alert('XSS') becomes javascript:SomeFunc(someValue)?a=0:0;alert(123)::",::20::184::697::,,
IMAP/SMTP Command Injection,Standard,Draft,"An adversary exploits weaknesses in input validation on web-mail servers to execute commands on the IMAP/SMTP server. Web-mail servers often sit between the Internet and the IMAP or SMTP mail server. User requests are received by the web-mail servers which then query the back-end mail server for the requested information and return this response to the user. In an IMAP/SMTP command injection attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands.",,,Medium,::NATURE:ChildOf:CAPEC ID:248::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target Web-Mail Server] The adversary first identifies the web-mail server they wish to exploit.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify Vulnerable Parameters] Once the adversary has identified a web-mail server, they identify any vulnerable parameters by altering their values in requests. The adversary knows that the parameter is vulnerable if the web-mail server returns an error of any sort. Ideally, the adversary is looking for a descriptive error message.:TECHNIQUE:Assign a null value to a parameter being used by the web-mail server and observe the response.:TECHNIQUE:Assign a random value to a parameter being used by the web-mail server and observe the response.:TECHNIQUE:Add additional values to a parameter being used by the web-mail server and observe the response.:TECHNIQUE:Add non standard special characters (i.e.: , ', , @, #, !, |) to a parameter being used by the web-mail server and observe the response.:TECHNIQUE:Eliminate a parameter being used by the web-mail server and observe the response.::STEP:3:PHASE:Experiment:DESCRIPTION:[Determine Level of Injection] After identifying all vulnerable parameters, the adversary determines what level of injection is possible.:TECHNIQUE:Evaluate error messages to determine what IMAP/SMTP command is being executed for the vulnerable parameter. Sometimes the actually query will be placed in the error message.:TECHNIQUE:If there aren't descriptive error messages, the adversary will analyze the affected functionality to deduce the possible commands that could be being used by the mail-server.::STEP:4:PHASE:Exploit:DESCRIPTION:[Inject IMAP/SMTP Commands] The adversary manipulates the vulnerable parameters to inject an IMAP/SMTP command and execute it on the mail-server.:TECHNIQUE:Structure the injection as a header, body, and footer. The header contains the ending of the expected message, the body contains the injection of the new command, and the footer contains the beginning of the expected command.:TECHNIQUE:Each part of the injection payload needs to be terminated with the CRLF (%0d%0a) sequence.::",::The target environment must consist of a web-mail server that the attacker can query and a back-end mail server. The back-end mail server need not be directly accessible to the attacker.::The web-mail server must fail to adequately sanitize fields received from users and passed on to the back-end mail server.::The back-end mail server must not be adequately secured against receiving malicious commands from the web-mail server.::,,"::None: No specialized resources are required to execute this type of attack. However, in most cases, the attacker will need to be a recognized user of the web-mail server.::",,,,,::77::,,
Malicious Software Download,Standard,Draft,An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack.,,,Very High,::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:662::,,,,,,,,,::494::,,
Malicious Software Update,Standard,Draft,An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.,,,High,::NATURE:ChildOf:CAPEC ID:184::NATURE:CanFollow:CAPEC ID:98::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target] The adversary must first identify what they want their target to be. Because malicious software updates can be carried out in a variety of ways, the adversary will first not only identify a target program, but also what users they wish to target. This attack can be targeted (a particular user or group of users) or untargeted (many different users).::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft a deployment mechanism based on the target] The adversary must craft a deployment mechanism to deploy the malicious software update. This mechanism will differ based on if the attack is targeted or untargeted.:TECHNIQUE:Targeted attack: hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization's users requesting that they manually download and install the malicious software update.:TECHNIQUE:Targeted attack: Instant Messaging virus payload, which harvests the names from a user's contact list and sends instant messages to those users to download and apply the update:TECHNIQUE:Untargeted attack: Spam the malicious update to as many users as possible through unsolicited email, instant messages, or social media messages.:TECHNIQUE:Untargeted attack: Send phishing emails to as many users as possible and pretend to be a legitimate source suggesting to download an important software update.:TECHNIQUE:Untargeted attack: Use trojans/botnets to aid in either of the two untargeted attacks.::STEP:3:PHASE:Exploit:DESCRIPTION:[Deploy malicious software update] Using the deployment mechanism from the previous step, the adversary gets a user to install the malicious software update.::",,::SKILL:This attack requires advanced cyber capabilities:LEVEL:High::,::Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the adversary to host a payload and then trigger the installation of the payload code.::,,"::SCOPE:Access Control:SCOPE:Availability:SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Utilize the built-in software update mechanisms of the commercial components to deliver software that could compromise security credentials, enable a denial-of-service attack, or enable tracking.::",::Validate software updates before installing.::,::Using an automated process to download and install dangerous code was key part of the NotPeyta attack [REF-697]::,::494::,TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::,"TYPE:Other:NOTE:Other class of attacks focus on firmware, where malicious updates are made to the core system firmware or BIOS. Since this occurs outside the controls of the operating system, the OS detection and prevention mechanisms do not aid, thus allowing an adversary to evade defenses as well as gain persistence on the target's system.::"
Black Box Reverse Engineering,Standard,Draft,"An adversary discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs. Black Box Reverse Engineering also refers to gathering physical side effects of a hardware device, such as electromagnetic radiation or sounds.",,,Low,::NATURE:ChildOf:CAPEC ID:188::,,,,"::Black box methods require (at minimum) the ability to interact with the functional boundaries where the software communicates with a larger processing environment, such as inter-process communication on a host operating system, or via networking protocols.::",,,,,::203::1255::1300::,,
Embedding Scripts within Scripts,Standard,Stable,An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts.,,High,High,::NATURE:ChildOf:CAPEC ID:242::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Spider] Using a browser or an automated tool, an adversary records all entry points for inputs that happen to be reflected in a client-side script element. These script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.:TECHNIQUE:Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.:TECHNIQUE:Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.:TECHNIQUE:Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.:TECHNIQUE:Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.:TECHNIQUE:Use a proxy tool to record results of the created requests.::STEP:3:PHASE:Exploit:DESCRIPTION:[Steal session IDs, credentials, page content, etc.] As the adversary succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the adversary.:TECHNIQUE:Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute appropriately.::STEP:4:PHASE:Exploit:DESCRIPTION:[Forceful browsing] When the adversary targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site:TECHNIQUE:Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).::STEP:5:PHASE:Exploit:DESCRIPTION:[Content spoofing] By manipulating the content, the adversary targets the information that the user would like to get from the website.:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes adversary-modified invalid information to the user on the current web page.::","::Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts.::","::SKILL:To load malicious script into open, e.g. world writable directory:LEVEL:Low::SKILL:Executing remote scripts on host and collecting output:LEVEL:Medium::",,,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::Use browser technologies that do not allow client side scripting.::Utilize strict type, character, and encoding enforcement.::Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.::Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Perform input validation for all remote content.::Perform output validation for all remote content.::Disable scripting languages such as JavaScript in browser::Session tokens for specific host::Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode::","::Ajax applications enable rich functionality for browser based web applications. Applications like Google Maps deliver unprecedented ability to zoom in and out, scroll graphics, and change graphic presentation through Ajax. The security issues that an adversary may exploit in this instance are the relative lack of security features in JavaScript and the various browser's implementation of JavaScript, these security gaps are what XSS and a host of other client side vulnerabilities are based on. While Ajax may not open up new security holes, per se, due to the conversational aspects between client and server of Ajax communication, attacks can be optimized. A single zoom in or zoom out on a graphic in an Ajax application may round trip to the server dozens of times. One of the first steps many adversarys take is frequently footprinting an environment, this can include scanning local addresses like 192.*.*.* IP addresses, checking local directories, files, and settings for known vulnerabilities, and so on. <IMG SRC=javascript:alert('XSS')> The XSS script that is embedded in a given IMG tag can be manipulated to probe a different address on every click of the mouse or other motions that the Ajax application is aware of. In addition the enumerations allow for the adversary to nest sequential logic in the attacks. While Ajax applications do not open up brand new attack vectors, the existing attack vectors are more than adequate to execute attacks, and now these attacks can be optimized to sequentially execute and enumerate host environments.::~/.bash_profile and ~/.bashrc are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. ~/.bash_profile is executed for login shells and ~/.bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), ~/.bash_profile is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, ~/.bashrc is executed. This allows users more fine grained control over when they want certain commands executed. These files are meant to be written to by the local user to configure their own environment; however, adversaries can also insert code into these files to gain persistence each time a user logs in or opens a new shell.::",::284::,TAXONOMY NAME:ATTACK:ENTRY ID:1027.009:ENTRY NAME:Obfuscated Files or Information: Embedded Payloads::::TAXONOMY NAME:ATTACK:ENTRY ID:1546.004:ENTRY NAME:Event Triggered Execution:.bash_profile and .bashrc::::TAXONOMY NAME:ATTACK:ENTRY ID:1546.016:ENTRY NAME:Event Triggered Execution: Installer Packages::,
Fake the Source of Data,Standard,Stable,"An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified From field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.",,,Medium,::NATURE:ChildOf:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:657::NATURE:CanPrecede:CAPEC ID:667::,,"::This attack is only applicable when a vulnerable entity associates data or services with an identity. Without such an association, there would be no reason to fake the source.::",,"::Resources required vary depending on the nature of the attack. Possible tools needed by an attacker could include tools to create custom network packets, specific client software, and tools to capture network traffic. Many variants of this attack require no attacker resources, however.::",,"::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic:NOTE:By faking the source of data or services, an adversary can cause a target to make incorrect decisions about how to proceed.::SCOPE:Integrity:TECHNICAL IMPACT:Gain Privileges:NOTE:By impersonating identities that have an increased level of access, an adversary gain privilege that they many not have otherwise had.::SCOPE:Integrity:TECHNICAL IMPACT:Hide Activities:NOTE:Faking the source of data or services can be used to create a false trail in logs as the target will associate any actions with the impersonated identity instead of the adversary.::",,,::287::,TAXONOMY NAME:WASC:ENTRY ID:38:ENTRY NAME:URL Redirector Abuse::,
Principal Spoof,Standard,Draft,"A Principal Spoof is a form of Identity Spoofing where an adversary pretends to be some other person in an interaction. This is often accomplished by crafting a message (either written, verbal, or visual) that appears to come from a person other than the adversary. Phishing and Pharming attacks often attempt to do this so that their attempts to gather sensitive information appear to come from a legitimate source. A Principal Spoof does not use stolen or spoofed authentication credentials, instead relying on the appearance and content of the message to reflect identity.",,,Medium,::NATURE:ChildOf:CAPEC ID:151::,,::The target must associate data or activities with a person's identity and the adversary must be able to modify this identity without detection.::,,::None: No specialized resources are required to execute this type of attack.::,,,,,,,
Session Credential Falsification through Forging,Standard,Draft,"An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.",,Medium,Medium,::NATURE:CanPrecede:CAPEC ID:384::NATURE:CanPrecede:CAPEC ID:61::NATURE:ChildOf:CAPEC ID:21::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Analyze and Understand Session IDs] The attacker finds that the targeted application use session credentials to identify legitimate users.:TECHNIQUE:An attacker makes many anonymous connections and records the session IDs.:TECHNIQUE:An attacker makes authorized connections and records the session tokens or credentials.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create Session IDs.] Attackers craft messages containing their forged credentials in GET, POST request, HTTP headers or cookies.:TECHNIQUE:The attacker manipulates the HTTP request message and adds their forged session IDs in to the requests or cookies.::STEP:3:PHASE:Exploit:DESCRIPTION:[Abuse the Victim's Session Credentials] The attacker fixates falsified session ID to the victim when victim access the system. Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the forged session identifier.:TECHNIQUE:The attacker loads the predefined or predicted session ID into their browser and browses to protected data or functionality.:TECHNIQUE:The attacker loads the predefined or predicted session ID into their software and utilizes functionality with the rights of the victim.::",::The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers.::,::SKILL:Forge the session credential and reply the request.:LEVEL:Medium::,"::Attackers may require tools to craft messages containing their forged credentials, and ability to send HTTP request to a web application.::",,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::,"::Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.::Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.::","::This example uses client side scripting to set session ID in the victim's browser. The JavaScript code document.cookie=sessionid=0123456789 fixates a falsified session credential into victim's browser, with the help of crafted a URL link. http://www.example.com/<script>document.cookie=sessionid=0123456789;</script> A similar example uses session ID as an argument of the URL. http://www.example.com/index.php/sessionid=0123456789 Once the victim clicks the links, the attacker may be able to bypass authentication or piggy-back off some other authenticated victim's session.::",::384::664::,TAXONOMY NAME:ATTACK:ENTRY ID:1134.002:ENTRY NAME:Access Token Manipulation: Create Process with Token::::TAXONOMY NAME:ATTACK:ENTRY ID:1134.003:ENTRY NAME:Access Token Manipulation: Make and Impersonate Token::::TAXONOMY NAME:ATTACK:ENTRY ID:1606:ENTRY NAME:Forge Web Credentials::,
Inducing Account Lockout,Standard,Draft,"An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",,High,Medium,::NATURE:ChildOf:CAPEC ID:212::,"::STEP:1:PHASE:Experiment:DESCRIPTION:[Investigate account lockout behavior of system] Investigate the security features present in the system that may trigger an account lockout:TECHNIQUE:Analyze system documentation to find list of events that could potentially cause account lockout:TECHNIQUE:Obtain user account in system and attempt to lock it out by sending malformed or incorrect data repeatedly:TECHNIQUE:Determine another user's login ID, and attempt to brute force the password (or other credentials) for it a predetermined number of times, or until the system provides an indication that the account is locked out.::STEP:2:PHASE:Experiment:DESCRIPTION:[Obtain list of user accounts to lock out] Generate a list of valid user accounts to lock out:TECHNIQUE:Obtain list of authorized users using another attack pattern, such as SQL Injection.:TECHNIQUE:Attempt to create accounts if possible; system should indicate if a user ID is already taken.:TECHNIQUE:Attempt to brute force user IDs if system reveals whether a given user ID is valid or not upon failed login attempts.::STEP:3:PHASE:Exploit:DESCRIPTION:[Lock Out Accounts] Perform lockout procedure for all accounts that the attacker wants to lock out.:TECHNIQUE:For each user ID to be locked out, perform the lockout procedure discovered in the first step.::",::The system has a lockout mechanism.::An attacker must be able to reproduce behavior that would result in an account being locked.::,::SKILL:No programming skills or computer knowledge is needed. An attacker can easily use this attack pattern following the Execution Flow above.:LEVEL:Low::,::Computer with access to the login portion of the target system::,,::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::,"::Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.::When implementing security features, consider how they can be misused and made to turn on themselves.::","::A famous example of this type an attack is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.::",::645::,TAXONOMY NAME:ATTACK:ENTRY ID:1531:ENTRY NAME:Account Access Removal::,
Encryption Brute Forcing,Standard,Draft,"An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.",,Low,Low,::NATURE:ChildOf:CAPEC ID:112::NATURE:CanPrecede:CAPEC ID:668::,"::STEP:1:PHASE:Explore:DESCRIPTION:Determine the ciphertext and the encryption algorithm.::STEP:2:PHASE:Experiment:DESCRIPTION:Perform an exhaustive brute force search of the key space, producing candidate plaintexts and observing if they make sense.::",::Ciphertext is known.::Encryption algorithm and key size are known.::,::SKILL:Brute forcing encryption does not require much skill.:LEVEL:Low::,"::A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge). On average, for a binary key of size N, 2^(N/2) trials will be needed to find the key that would decrypt the ciphertext to obtain the original plaintext. Obviously as N gets large the brute force approach becomes infeasible.::",::None. This attack happens offline.::,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,"::Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.::In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months.::",::In 1997 the original DES challenge used distributed net computing to brute force the encryption key and decrypt the ciphertext to obtain the original plaintext. Each machine was given its own section of the key space to cover. The ciphertext was decrypted in 96 days.::,::326::327::693::1204::,,
Create Malicious Client,Standard,Draft,"An adversary creates a client application to interface with a target service where the client violates assumptions the service makes about clients. Services that have designated client applications (as opposed to services that use general client applications, such as IMAP or POP mail servers which can interact with any IMAP or POP client) may assume that the client will follow specific procedures.",,,Medium,::NATURE:ChildOf:CAPEC ID:22::,,"::The targeted service must make assumptions about the behavior of the client application that interacts with it, which can be abused by an adversary.::",,"::The adversary must be able to reverse engineer a client of the targeted service. However, the adversary does not need to reverse engineer all client functionality - they only need to recreate enough of the functionality to access the desired server functionality.::",,,,,::602::,,
Manipulate Registry Information,Standard,Stable,"An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.",,,Medium,::NATURE:ChildOf:CAPEC ID:176::,,"::The targeted application must rely on values stored in a registry.::The adversary must have a means of elevating permissions in order to access and modify registry content through either administrator privileges (e.g., credentialed access), or a remote access tool capable of editing a registry through an API.::",::SKILL:The adversary requires privileged credentials or the development/acquiring of a tailored remote access tool.:LEVEL:High::,::None: No specialized resources are required to execute this type of attack.::,,,"::Ensure proper permissions are set for Registry hives to prevent users from modifying keys.::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::",::Manipulating registration information can be undertaken in advance of a path traversal attack (inserting relative path modifiers) or buffer overflow attack (enlarging a registry value beyond an application's ability to store it).::,::15::,TAXONOMY NAME:ATTACK:ENTRY ID:1112:ENTRY NAME:Modify Registry::::TAXONOMY NAME:ATTACK:ENTRY ID:1647:ENTRY NAME:Plist Modification::,
Removing Important Client Functionality,Standard,Draft,An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.,,Medium,High,::NATURE:ChildOf:CAPEC ID:22::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Probing] The adversary probes, through brute-forcing, reverse-engineering or other similar means, the functionality on the client that server assumes to be present and trustworthy.:TECHNIQUE:The adversary probes by exploring an application's functionality and its underlying mapping to server-side components.:TECHNIQUE:The adversary reverse engineers client-side code to identify the functionality that the server relies on for the proper or secure operation.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine which functionality to disable or remove] The adversary tries to determine which functionality to disable or remove through reverse-engineering from the list of functionality identified in the Explore phase.:TECHNIQUE:The adversary reverse engineers the client-side code to determine which functionality to disable or remove.::STEP:3:PHASE:Exploit:DESCRIPTION:[Disable or remove the critical functionality from the client code] Once the functionality has been determined, the adversary disables or removes the critical functionality from the client code to perform malicious actions that the server believes are prohibited.:TECHNIQUE:The adversary disables or removes the functionality from the client-side code to perform malicious actions, such as sending of dangerous content (such as scripts) to the server.::","::The targeted server must assume the client performs important actions to protect the server or the server functionality. For example, the server may assume the client filters outbound traffic or that the client performs all price calculations correctly. Moreover, the server must fail to detect when these assumptions are violated by a client.::",::SKILL:To reverse engineer the client-side code to disable/remove the functionality on the client that the server relies on.:LEVEL:High::SKILL:The adversary installs a web tool that allows scripts or the DOM model of web-based applications to be modified before they are executed in a browser. GreaseMonkey and Firebug are two examples of such tools.:LEVEL:Low::,"::The adversary must have access to a client and be able to modify the client behavior, often through reverse engineering. If the server is assuming specific client functionality, this usually means the server only recognizes a specific client application, rather than a broad class of client applications. Reverse engineering tools would likely be necessary.::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::,"::Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.::Design: Ship client-side application with integrity checks (code signing) when possible.::Design: Use obfuscation and other techniques to prevent reverse engineering the client code.::","::The adversary reverse engineers a Java binary (by decompiling it) and identifies where license management code exists. Noticing that the license manager returns TRUE or FALSE as to whether or not the user is licensed, the adversary simply overwrites both branch targets to return TRUE, recompiles, and finally redeploys the binary.::The adversary uses click-through exploration of a Servlet-based website to map out its functionality, taking note of its URL-naming conventions and Servlet mappings. Using this knowledge and guessing the Servlet name of functionality they're not authorized to use, the adversary directly navigates to the privileged functionality around the authorizing single-front controller (implementing programmatic authorization checks).::",::602::,,
DEPRECATED: Directory Traversal,Standard,Deprecated,This attack pattern has been deprecated as it is a duplicate of the existing attack pattern CAPEC-126 : Path Traversal. Please refer to this other CAPEC going forward.,,,,,,,,,,,,,,,
Exploiting Incorrectly Configured SSL/TLS,Standard,Draft,An adversary takes advantage of incorrectly configured SSL/TLS communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.,,Low,,::NATURE:ChildOf:CAPEC ID:216::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine SSL/TLS Configuration] Determine the SSL/TLS configuration of either the server or client being targeted, preferably both. This is not a hard requirement, as the adversary can simply assume commonly exploitable configuration settings and indiscriminately attempt them.:TECHNIQUE:If the target is a webpage, some of the SSL/TLS configuration can be viewed through the browser's security information, such as the key sizes and cipher being used.::STEP:2:PHASE:Experiment:DESCRIPTION:[Intercept Communication] Provide controlled access to the server by the client, by either providing a link for the client to click on, or by positioning one's self at a place on the network to intercept and control the flow of data between client and server, e.g. AiTM (adversary in the middle - CAPEC-94).:TECHNIQUE:Create a malicious webpage that looks identical to the target webpage, but routes client traffic to the server such that the adversary can observe the traffic and perform an adverary in the middle attack.:TECHNIQUE:If the adversary has access to the network that either the client or server is on, the can attempt to use a packet sniffer to perform an adversary in the middle attack.:TECHNIQUE:Install a packet sniffer through malware directly to a client device that can intercept SSL/TLS traffic and perform an adversary in the middle attack.::STEP:3:PHASE:Exploit:DESCRIPTION:[Capture or Manipulate Sensitive Data] Once the adversary has the ability to intercept the secure communication, they exploit the incorrectly configured SSL to view the encrypted communication. The adversary can choose to just record the secure communication or manipulate the data to achieve a desired effect.:TECHNIQUE:Use known exploits for old SSL and TLS versions.:TECHNIQUE:Use known exploits for weak ciphers such as DES and RC4.::",::Access to the client/server stream.::,"::SKILL:The adversary needs real-time access to network traffic in such a manner that the adversary can grab needed information from the SSL stream, possibly influence the decided-upon encryption method and options, and perform automated analysis to decipher encrypted material recovered. Tools exist to automate part of the tasks, but to successfully use these tools in an attack scenario requires detailed understanding of the underlying principles.:LEVEL:High::","::The adversary needs the ability to sniff traffic, and optionally be able to route said traffic to a system where the sniffing of traffic can take place, and act upon the recovered traffic in real time.::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.::Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.::Configure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security.::","::Using MITM techniques, an adversary launches a blockwise chosen-boundary attack to obtain plaintext HTTP headers by taking advantage of an SSL session using an encryption protocol in CBC mode with chained initialization vectors (IV). This allows the adversary to recover session IDs, authentication cookies, and possibly other valuable data that can be used for further exploitation. Additionally this could allow for the insertion of data into the stream, allowing for additional attacks (CSRF, SQL inject, etc) to occur.::",::201::,,
XML Routing Detour Attacks,Standard,Draft,"An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",,High,Medium,::NATURE:ChildOf:CAPEC ID:94::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using command line or an automated tool, an attacker records all instances of web services to process XML requests.:TECHNIQUE:Use automated tool to record all instances to process XML requests or find exposed WSDL.:TECHNIQUE:Use tools to crawl WSDL::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify SOAP messages that have multiple state processing.] Inspect instance to see whether the XML processing has multiple stages or not.:TECHNIQUE:Inspect the SOAP message routing head to see whether the XML processing has multiple stages or not.::STEP:3:PHASE:Exploit:DESCRIPTION:[Launch an XML routing detour attack] The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message identified in the Explore phase. Thus, the attacker can route the XML message to the attacker controlled node (and access the message contents).:TECHNIQUE:The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message::",::The targeted system must have multiple stages processing of XML content.::,::SKILL:To inject a bogus node in the XML routing table:LEVEL:Low::,::The attacker must be able to insert or compromise a system into the processing path for the transaction.::,,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::,::Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.::Implementation: Use SSL for connections between all parties with mutual authentication.::,"::Here is an example SOAP call from a client, example1.com, to a target, example4.com, via 2 intermediaries, example2.com and example3.com. (note: The client here is not necessarily a 'end user client' but rather the starting point of the XML transaction). Example SOAP message with routing information in header: <S:Envelope><S:Header><m:path xmlns:m=http://schemas.example.com/rp/ S:actor=http://schemas.example.com/soap/actor S:mustUnderstand=1><m:action>http://example1.com/</m:action> <m:to>http://example4.com/router</m:to> <m:id>uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f</m:id> <m:fwd> <m:via>http://example2.com/router</m:via> </m:fwd> <m:rev /></m:path></S:Header> <S:Body>...</S:Body></S:Envelope> Add an additional node (example3.com/router) to the XML path in a WS-Referral message <r:ref xmlns:r=http://schemas.example.com/referral><r:for><r:prefix>http://example2.com/router</r:prefix></r:for> <r:if/> <r:go><r:via>http://example3.com/router</r:via></r:go></r:ref> Resulting in the following SOAP Header: <S:Envelope><S:Header><m:path xmlns:m=http://schemas.example.com/rp/ S:actor=http://schemas.example.com/soap/actor S:mustUnderstand=1><m:action>http://example1.com/</m:action> <m:to>http://example4.com/router</m:to> <m:id>uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f</m:id> <m:fwd><m:via>http://example2.com/router</m:via> <m:via>http://example3.com/router</m:via></m:fwd> <m:rev /></m:path></S:Header> <S:Body>...</S:Body></S:Envelope> Continuing with this example, the attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header but not access the message directly on the initiator/intermediary node that they have targeted. Example of WS-Referral based WS-Routing injection of the bogus node route: <r:ref xmlns:r=http://schemas.example.com/referral><r:for><r:prefix>http://example2.com/router</r:prefix></r:for> <r:if/> <r:go><r:via>http://evilsite1.com/router</r:via></r:go></r:ref> Resulting XML Routing Detour attack: <S:Envelope><S:Header><m:path xmlns:m=http://schemas.example.com/rp/ S:actor=http://schemas.example.com/soap/actor S:mustUnderstand=1><m:action>http://example_0.com/</m:action> <m:to>http://example_4.com/router</m:to> <m:id>uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f</m:id> <m:fwd><m:via>http://example2.com/router</m:via> <m:via>http://evilesite1.com/router</m:via> <m:via>http://example3.com/router</m:via></m:fwd> <m:rev /></m:path></S:Header> <S:Body>...</S:Body></S:Envelope> Thus, the attacker can route the XML message to the attacker controlled node (and access to the message contents).::",::441::610::,TAXONOMY NAME:WASC:ENTRY ID:32:ENTRY NAME:Routing Detour::::TAXONOMY NAME:WASC:ENTRY ID:44:ENTRY NAME:XML Entity Expansion::,
Client-Server Protocol Manipulation,Standard,Draft,"An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.",,,Medium,::NATURE:ChildOf:CAPEC ID:272::,,::The client and/or server must utilize a protocol that has a weakness allowing manipulation of the interaction.::,,::The adversary must be able to identify the weakness in the utilized protocol and exploit it. This may require a sniffing tool as well as packet creation abilities. The adversary will be aided if they can force the client and/or server to utilize a specific protocol known to contain exploitable weaknesses.::,,,,,::757::,,
File Content Injection,Standard,Draft,"An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.",,High,Very High,::NATURE:ChildOf:CAPEC ID:242::NATURE:CanAlsoBe:CAPEC ID:165::,,::The target software must consume files.::The adversary must have access to modify files that the target software will consume.::,"::SKILL:How to poison a file with malicious payload that will exploit a vulnerability when the file is opened. The adversary must also know how to place the file onto a system where it will be opened by an unsuspecting party, or force the file to be opened.:LEVEL:Medium::",,,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::,"::Design: Enforce principle of least privilege::Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)::Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.::Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.::Implementation: Virus scanning on host::Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.::","::PHP is a very popular language used for developing web applications. When PHP is used with global variables, a vulnerability may be opened that affects the file system. A standard HTML form that allows for remote users to upload files, may also place those files in a public directory where the adversary can directly access and execute them through a browser. This vulnerability allows remote adversaries to execute arbitrary code on the system, and can result in the adversary being able to erase intrusion evidence from system and application logs.::",::20::,,
Serialized Data with Nested Payloads,Standard,Draft,"Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.",::TERM:XML Denial of Service (XML DoS):DESCRIPTION:::,Medium,High,::NATURE:ChildOf:CAPEC ID:130::,::STEP:1:PHASE:Explore:DESCRIPTION:An adversary determines the input data stream that is being processed by a data parser that supports using substitution on the victim's side.::STEP:2:PHASE:Exploit:DESCRIPTION:An adversary crafts input data that may have an adverse effect on the operation of the parser when the data is parsed on the victim's system.::,::An application's user-controllable data is expressed in a language that supports subsitution.::An application does not perform sufficient validation to ensure that user-controllable data is not malicious.::,,,"::Bad data is passed to the data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.::",::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,::Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.::Perform validation on canonical data.::Pick a robust implementation of the data parser.::,,::112::20::674::770::,,
Oversized Serialized Data Payloads,Standard,Draft,An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.,::TERM:XML Denial of Service (XML DoS):DESCRIPTION:::,Medium,High,::NATURE:ChildOf:CAPEC ID:130::,::STEP:1:PHASE:Explore:DESCRIPTION:An adversary determines the input data stream that is being processed by an serialized data parser on the victim's side.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary crafts input data that may have an adverse effect on the operation of the data parser when the data is parsed on the victim's system.::,::An application uses an parser for serialized data to perform transformation on user-controllable data.::An application does not perform sufficient validation to ensure that user-controllable data is safe for a data parser.::,::SKILL:Denial of service:LEVEL:Low::SKILL:Arbitrary code execution:LEVEL:High::,,"::Bad data is passed to the serialized data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.::",::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,::Carefully validate and sanitize all user-controllable serialized data prior to passing it to the parser routine. Ensure that the resultant data is safe to pass to the parser.::Perform validation on canonical data.::Pick a robust implementation of the serialized data parser.::Validate data against a valid schema or DTD prior to parsing.::,,::112::20::674::770::,,"TYPE:Other:NOTE:In many cases this type of an attack will result in an XML Denial of Service (XDoS) or similar Denial of Service (DoS) due to an application becoming unstable, freezing, or crashing. However it is possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [REF-89].::::TYPE:Other:NOTE:The main weakness in serialized data related DoS is that the service provider generally must inspect, parse, and validate the data messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that DoS targets.::"
Hijacking a privileged process,Standard,Draft,"An adversary gains control of a process that is assigned elevated privileges in order to execute arbitrary code with those privileges. Some processes are assigned elevated privileges on an operating system, usually through association with a particular user, group, or role. If an attacker can hijack this process, they will be able to assume its level of privilege in order to execute their own code.",,,Medium,::NATURE:ChildOf:CAPEC ID:233::NATURE:CanFollow:CAPEC ID:242::NATURE:CanFollow:CAPEC ID:175::NATURE:CanFollow:CAPEC ID:100::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find process with elevated priveleges] The adversary probes for processes running with elevated privileges.:TECHNIQUE:On Windows, use the process explorer's security tab to see if a process is running with administror privileges.:TECHNIQUE:On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find vulnerability in running process] The adversary looks for a vulnerability in the running process that would allow for arbitrary code execution with the privilege of the running process.:TECHNIQUE:Look for improper input validation:TECHNIQUE:Look for a buffer overflow which may be exploited if an adversary can inject unvalidated data.:TECHNIQUE:Utilize system utilities that support process control that have been inadequately secured::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute arbitrary code] The adversary exploits the vulnerability that they have found and hijacks the running process.::",::The targeted process or operating system must contain a bug that allows attackers to hijack the targeted process.::,,::None: No specialized resources are required to execute this type of attack.::,,,,,::732::648::,,
DEPRECATED: Linux Terminal Injection,Standard,Deprecated,This attack pattern has been deprecated as it is covered by CAPEC-40 : Manipulating Writeable Terminal Devices. Please refer to this CAPEC going forward.,,,,,,,,,,,,,,,
XML Injection,Standard,Draft,"An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.",,High,,::NATURE:ChildOf:CAPEC ID:248::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the Target] Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XML queries:TECHNIQUE:Use an automated tool to record all instances of user-controllable input used to contruct XML queries.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes inputs.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine the Structure of Queries] Using manual or automated means, test inputs found for XML weaknesses.:TECHNIQUE:Use XML reserved characters or words, possibly with other input data to attempt to cause unexpected results and identify improper input validation.::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject Content into XML Queries] Craft malicious content containing XML expressions that is not validated by the application and is executed as part of the XML queries.:TECHNIQUE:Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker.::",::XML queries used to process user input and retrieve information stored in XML documents::User-controllable input not properly sanitized::,::SKILL:An attacker must have knowledge of XML syntax and constructs in order to successfully leverage XML Injection:LEVEL:Low::,::None: No specialized resources are required to execute this type of attack.::,::Too many exceptions generated by the application as a result of malformed queries::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::,::Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.::,::91::74::20::707::,TAXONOMY NAME:WASC:ENTRY ID:23:ENTRY NAME:XML Injection::,
Local Code Inclusion,Standard,Stable,"The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.",,,Medium,::NATURE:ChildOf:CAPEC ID:175::,,::The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture.::Some variants of this attack may require that old versions of some code files be present and in predictable locations.::,,"::The adversary needs to have enough access to the target application to control the identity of a locally included file. The attacker may also need to be able to upload arbitrary code files to the target machine, although any location for these files may be acceptable.::",,"::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through local code inclusion, the adversary compromises the integrity of the application.::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:An attacker may leverage local code inclusion in order to print sensitive data to a page, such as hidden configuration files or or password hashes.::","::Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.::",,::829::,TAXONOMY NAME:ATTACK:ENTRY ID:1055:ENTRY NAME:Process Injection::,
Remote Code Inclusion,Standard,Draft,"The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.",,,,::NATURE:ChildOf:CAPEC ID:175::NATURE:CanPrecede:CAPEC ID:664::,,::Target application server must allow remote files to be included.The malicious file must be placed on the remote machine previously.::,,,,,::Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.::,,::829::,TAXONOMY NAME:WASC:ENTRY ID:05:ENTRY NAME:Remote File Inclusion::,
DEPRECATED: Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Patching,Standard,Deprecated,This attack pattern has been deprecated as it is a duplicate of the existing attack pattern CAPEC-65 : Sniff Application Code. Please refer to this other CAPEC going forward.,,,,,,,,,,,,,,,
Leverage Alternate Encoding,Standard,Draft,An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.,,High,High,::NATURE:ChildOf:CAPEC ID:153::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and injects various payloads using a variety of different types of encodings to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Try to use different encodings of content in order to bypass validation routines.::","::The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host.::",::SKILL:An adversary can inject different representation of a filtered character in a different encoding.:LEVEL:Low::SKILL:An adversary may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.:LEVEL:Medium::,,,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::,"::Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::","::Microsoft Internet Explorer 5.01 SP4, 6, 6 SP1, and 7 does not properly handle unspecified encoding strings, which allows remote adversaries to bypass the Same Origin Policy and obtain sensitive information via a crafted web site, aka Post Encoding Information Disclosure Vulnerability. Related Vulnerabilities CVE-2010-0488::Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.::",::173::172::180::181::73::74::20::697::692::,TAXONOMY NAME:ATTACK:ENTRY ID:1027:ENTRY NAME:Obfuscated Files or Information::,
Audit Log Manipulation,Standard,Draft,"The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.",,,,::NATURE:ChildOf:CAPEC ID:161::,,::The target host is logging the action and data of the user.::The target host insufficiently protects access to the logs or logging mechanisms.::,,"::The attacker must understand how the logging mechanism works. Optionally, the attacker must know the location and the format of individual entries of the log files.::",,,,,::117::,TAXONOMY NAME:ATTACK:ENTRY ID:1070:ENTRY NAME:Indicator Removal on Host::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.002:ENTRY NAME:Impair Defenses: Disable Windows Event Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.003:ENTRY NAME:Impair Defenses: Impair Command History Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.008:ENTRY NAME:Impair Defenses: Disable Cloud Logs::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Log Injection::,
Schema Poisoning,Standard,Draft,"An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.",,Low,High,::NATURE:ChildOf:CAPEC ID:176::NATURE:CanFollow:CAPEC ID:94::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find target application and schema] The adversary first finds the application that they want to target. This application must use schemas in some way, so the adversary also needs to confirm that schemas are being used.:TECHNIQUE:Gain access to the system that the application is on and look for a schema.:TECHNIQUE:Observe HTTP traffic to the application and look for a schema being transmitted.::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain access to schema] The adversary gains access to the schema so that they can modify the contents.:TECHNIQUE:For a local scenario, the adversary needs access to the machine that the schema is located on and gain permissions to alter the contents of the schema file.:TECHNIQUE:For a remote scenario, the adversary needs to be able to perform an adversary in the middle attack on the HTTP traffic that contains a schema.::STEP:3:PHASE:Exploit:DESCRIPTION:[Poison schema] Once the adversary gains access to the schema, they will alter it to achieve a desired effect. Locally, they can just modify the file. For remote schemas, the adversary will alter the schema in transit by performing an adversary in the middle attack.:TECHNIQUE:Cause a denial of service by modifying the schema so that it does not contain required information for subsequent processing.:TECHNIQUE:Manipulation of the data types described in the schema may affect the results of calculations. For example, a float field could be changed to an int field.:TECHNIQUE:Change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might use a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B).::",::Some level of access to modify the target schema.::The schema used by the target application must be improperly secured against unauthorized modification and manipulation.::,,::Access to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema.::,,::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful schema poisoning attack can compromise the availability of the target system's service by exhausting its available resources.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,"::Design: Protect the schema against unauthorized modification.::Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.::Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.::","::In a JSON Schema Poisoning Attack, an adervary modifies the JSON schema to cause a Denial of Service (DOS) or to submit malicious input: { title: Contact, type: object, properties: { Name: { type: string }, Phone: { type: string }, Email: { type: string }, Address: { type: string } }, required: [Name, Phone, Email, Address] } If the 'name' attribute is required in all submitted documents and this field is removed by the adversary, the application may enter an unexpected state or record incomplete data. Additionally, if this data is needed to perform additional functions, a Denial of Service (DOS) may occur.::In a Database Schema Poisoning Attack, an adversary alters the database schema being used to modify the database in some way. This can result in loss of data, DOS, or malicious input being submitted. Assuming there is a column named name, an adversary could make the following schema change: ALTER TABLE Contacts MODIFY Name VARCHAR(65353); The Name field of the Conteacts table now allows the storing of names up to 65353 characters in length. This could allow the adversary to store excess data within the database to consume system resource or to execute a DOS.::",::15::,,
Inter-component Protocol Manipulation,Standard,Draft,"Inter-component protocols are used to communicate between different software and hardware modules within a single computer. Common examples are: interrupt signals and data pipes. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.",,,,::NATURE:ChildOf:CAPEC ID:272::,,,,,,,,,::707::,,
Data Interchange Protocol Manipulation,Standard,Draft,"Data Interchange Protocols are used to transmit structured data between entities. These protocols are often specific to a particular domain (B2B: purchase orders, invoices, transport logistics and waybills, medical records). They are often, but not always, XML-based. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.",,,,::NATURE:ChildOf:CAPEC ID:272::,,,,,,,,,::707::,,
Web Services Protocol Manipulation,Standard,Draft,"An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash.",,,,::NATURE:ChildOf:CAPEC ID:272::,,::The targeted application or service must rely on web service protocols in such a way that malicious manipulation of them can alter functionality.::,,::The attacker must be able to manipulate the communications to the targeted application or service.::,,,"::Design: Range, size and value and consistency verification for any arguments supplied to applications and services from external sources and devise appropriate error response.::Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them.::",,::707::,,
Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions,Standard,Draft,"This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",,High,High,::NATURE:ChildOf:CAPEC ID:26::,"::STEP:1:PHASE:Explore:DESCRIPTION:The adversary explores to gauge what level of access they have.::STEP:2:PHASE:Experiment:DESCRIPTION:The adversary confirms access to a resource on the target host. The adversary confirms ability to modify the targeted resource.::STEP:3:PHASE:Exploit:DESCRIPTION:The adversary decides to leverage the race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary can replace the resource and cause an escalation of privilege.::",::A resource is access/modified concurrently by multiple processes.::The adversary is able to modify resource.::A race condition exists while accessing a resource.::,::SKILL:This attack can get sophisticated since the attack has to occur within a short interval of time.:LEVEL:Medium::,,,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Alter Execution Logic::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::,"::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::","::The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057::The following code illustrates a file that is accessed multiple times by name in a publicly accessible directory. A race condition exists between the accesses where an adversary can replace the file referenced by the name. include <sys/types.h>include <fcntl.h>include <unistd.h> define FILE /tmp/myfiledefine UID 100 void test(char *str){int fd;fd = creat(FILE, 0644);if(fd == -1)return; chown(FILE, UID, -1); /* BAD */close(fd); } int main(int argc, char **argv){char *userstr;if(argc > 1) {userstr = argv[1];test(userstr); }return 0; } [REF-107]::",::367::368::366::370::362::662::691::663::665::,,
Host Discovery,Standard,Stable,"An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.",,,Low,::NATURE:ChildOf:CAPEC ID:169::,,::The adversary requires logical access to the target network in order to carry out host discovery.::,,::The resources required will differ based upon the type of host discovery being performed. Usually a network scanning tool or scanning script is required due to the volume of requests that must be generated.::,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,,,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1018:ENTRY NAME:Remote System Discovery::,
Hijacking a Privileged Thread of Execution,Standard,Draft,"An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",,Low,Very High,::NATURE:ChildOf:CAPEC ID:233::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target thread] The adversary determines the underlying system thread that is subject to user-control::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain handle to thread] The adversary then gains a handle to a process thread.:TECHNIQUE:Use the OpenThread API call in Windows on a known thread.:TECHNIQUE:Cause an exception in a java privileged block public function and catch it, or catch a normal signal. The thread is then hanging and the adversary can attempt to gain a handle to it.::STEP:3:PHASE:Experiment:DESCRIPTION:[Alter process memory] Once the adversary has a handle to the target thread, they will suspend the thread and alter the memory using native OS calls.:TECHNIQUE:On Windows, use SuspendThread followed by VirtualAllocEx, WriteProcessMemory, and SetThreadContext.::STEP:4:PHASE:Exploit:DESCRIPTION:[Resume thread execution] Once the process memory has been altered to execute malicious code, the thread is then resumed.:TECHNIQUE:On Windows, use ResumeThread.::","::The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal users::In order to feasibly execute this class of attacks, the adversary must have the ability to hijack a privileged thread. This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or calling native OS calls that can suspend and alter process memory. This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.::","::SKILL:Hijacking a thread involves knowledge of how processes and threads function on the target platform, the design of the target application as well as the ability to identify the primitives to be used or manipulated to hijack the thread.:LEVEL:High::","::None: No specialized resources are required to execute this type of attack. The adversary needs to be able to latch onto a privileged thread. The adversary does, however, need to be able to program, compile, and link to the victim binaries being executed so that it will turn control of a privileged thread over to the adversary's malicious code. This is the case even if the adversary conducts the attack remotely.::",,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::,"::Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.::Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.::","::Adversary targets an application written using Java's AWT, with the 1.2.2 era event model. In this circumstance, any AWTEvent originating in the underlying OS (such as a mouse click) would return a privileged thread (e.g., a system call). The adversary could choose to not return the AWT-generated thread upon consuming the event, but instead leveraging its privilege to conduct privileged operations.::",::270::,TAXONOMY NAME:ATTACK:ENTRY ID:1055.003:ENTRY NAME:Process Injection: Thread Execution Hijacking::,
Port Scanning,Standard,Stable,An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.,,,Low,::NATURE:ChildOf:CAPEC ID:169::,,::The adversary requires logical access to the target's network in order to carry out this type of attack.::,,"::The adversary requires a network mapping/scanning tool, or must conduct socket programming on the command line. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,,,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1046:ENTRY NAME:Network Service Scanning::,"TYPE:Other:NOTE:There are four types of port status that this type of attack aims to identify: 1) Open Port: The port is open and a firewall does not block access to the port, 2) Closed Port: The port is closed (i.e. no service resides there) and a firewall does not block access to the port, 3) Filtered Port: A firewall or ACL rule is blocking access to the port in some manner, although the presence of a listening service on the port cannot be verified, and 4) Unfiltered Port: A firewall or ACL rule is not blocking access to the port, although the presence of a listening service on the port cannot be verified.::"
Network Topology Mapping,Standard,Draft,"An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.",,,Low,::NATURE:ChildOf:CAPEC ID:169::NATURE:CanPrecede:CAPEC ID:664::,,::None::,,"::Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::,,,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1016:ENTRY NAME:System Network Configuration Discovery::::TAXONOMY NAME:ATTACK:ENTRY ID:1049:ENTRY NAME:System Network Connections Discovery::::TAXONOMY NAME:ATTACK:ENTRY ID:1590:ENTRY NAME:Gather Victim Network Information::,
DEPRECATED: OS Fingerprinting,Standard,Deprecated,"This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level patterns CAPEC-312 : Active OS Fingerprinting or CAPEC-313 : Passive OS Fingerprinting going forward, or to any of the detailed patterns that are children of them.",,,,,,,,,,,,,,,
Active OS Fingerprinting,Standard,Stable,"An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.",,Medium,Low,::NATURE:ChildOf:CAPEC ID:224::,,"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::",,"::Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges. A tool capable of sending and receiving packets from a remote system.::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Hide Activities::,,,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1082:ENTRY NAME:System Information Discovery::,
Passive OS Fingerprinting,Standard,Stable,"An adversary engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods, it is generally better able to evade detection.",,High,Low,::NATURE:ChildOf:CAPEC ID:224::,,"::The ability to monitor network communications.Access to at least one host, and the privileges to interface with the network interface card.::",,"::Any tool capable of monitoring network communications, like a packet sniffer (e.g., Wireshark)::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Hide Activities::,,,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1082:ENTRY NAME:System Information Discovery::,
DEPRECATED: IP Fingerprinting Probes,Standard,Deprecated,"This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level pattern CAPEC-312 : Active OS Fingerprinting going forward, or to any of the detailed patterns that children of CAPEC-312.",,,,,,,,,,,,,,,
DEPRECATED: TCP/IP Fingerprinting Probes,Standard,Deprecated,"This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level pattern CAPEC-312 : Active OS Fingerprinting going forward, or to any of the detailed patterns that are children of CAPEC-312.",,,,,,,,,,,,,,,
DEPRECATED: ICMP Fingerprinting Probes,Standard,Deprecated,"This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level pattern CAPEC-312 : Active OS Fingerprinting going forward, or to any of the detailed patterns that are children of CAPEC-312.",,,,,,,,,,,,,,,
Using Unpublished Interfaces or Functionality,Standard,Draft,"An adversary searches for and invokes interfaces or functionality that the target system designers did not intend to be publicly available. If interfaces fail to authenticate requests, the attacker may be able to invoke functionality they are not authorized for.",,Medium,High,::NATURE:ChildOf:CAPEC ID:113::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify services] Discover a service of interest by exploring service registry listings or by connecting on a known port or some similar means.:TECHNIQUE:Search via internet for known, published services.:TECHNIQUE:Use automated tools to scan known ports to identify internet-enabled services.:TECHNIQUE:Dump the code from the chip and then perform reverse engineering to analyze the code.::STEP:2:PHASE:Explore:DESCRIPTION:[Authenticate to service] Authenticate to the service, if required, in order to explore it.:TECHNIQUE:Use published credentials to access system.:TECHNIQUE:Find unpublished credentials to access service.:TECHNIQUE:Use other attack pattern or weakness to bypass authentication.::STEP:3:PHASE:Explore:DESCRIPTION:[Identify all interfaces] Determine the exposed interfaces by querying the registry as well as probably sniffing to expose interfaces that are not explicitly listed.:TECHNIQUE:For any published services, determine exposed interfaces via the documentation provided.:TECHNIQUE:For any services found, use error messages from poorly formed service calls to determine valid interfaces. In some cases, services will respond to poorly formed calls with valid ones.::STEP:4:PHASE:Experiment:DESCRIPTION:[Attempt to discover unpublished functions] Using manual or automated means, discover unpublished or undocumented functions exposed by the service.:TECHNIQUE:Manually attempt calls to the service using an educated guess approach, including the use of terms like' 'test', 'debug', 'delete', etc.:TECHNIQUE:Use automated tools to scan the service to attempt to reverse engineer exposed, but undocumented, features.::STEP:5:PHASE:Exploit:DESCRIPTION:[Exploit unpublished functions] Using information determined via experimentation, exploit the unpublished features of the service.:TECHNIQUE:Execute features that are not intended to be used by general system users.:TECHNIQUE:Craft malicious calls to features not intended to be used by general system users that take advantage of security flaws found in the functions.::","::The architecture under attack must publish or otherwise make available services that clients can attach to, either in an unauthenticated fashion, or having obtained an authentication token elsewhere. The service need not be 'discoverable', but in the event it isn't it must have some way of being discovered by an attacker. This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service.::","::SKILL:A number of web service digging tools are available for free that help discover exposed web services and their interfaces. In the event that a web service is not listed, the attacker does not need to know much more in addition to the format of web service messages that they can sniff/monitor for.:LEVEL:Low::",::None: No specialized resources are required to execute this type of attack. Web service digging tools may be helpful.::,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.::","::To an extent, Google services (such as Google Maps) are all well-known examples. Calling these services, or extending them for one's own (perhaps very different) purposes is as easy as knowing they exist. Their unencumbered public use, however, is a purposeful aspect of Google's business model. Most organizations, however, do not have the same business model. Organizations publishing services usually fall back on thoughts that Attackers will not know services exist and that even if they did, they wouldn't be able to access them because they're not on the local LAN. Simple threat modeling exercises usually uncovers simple attack vectors that can invalidate these assumptions.::",::306::693::695::1242::,,
Application API Message Manipulation via Man-in-the-Middle,Standard,Draft,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true Adversary-in-the-Middle attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.",,,Low,::NATURE:ChildOf:CAPEC ID:94::,,::Targeted software is utilizing application framework APIs::,,"::A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.::",,,,,::471::345::346::602::311::,,
Application API Navigation Remapping,Standard,Draft,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.",,,Medium,::NATURE:ChildOf:CAPEC ID:94::,,::Targeted software is utilizing application framework APIs::,,"::A software program that allows the use of adversary-in-the-middle (CAPEC-94) communications between the client and server, such as a man-in-the-middle proxy.::",,,,,::471::345::346::602::311::,,
Manipulating Opaque Client-based Data Tokens,Standard,Draft,"In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",,High,Medium,::NATURE:ChildOf:CAPEC ID:22::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Enumerate information passed to client side] The attacker identifies the parameters used as part of tokens to take business or security decisions:TECHNIQUE:Use WebScarab to reveal hidden fields while browsing.:TECHNIQUE:Use a sniffer to capture packets:TECHNIQUE:View source of web page to find hidden fields:TECHNIQUE:Examine URL to see if any opaque tokens are in it:TECHNIQUE:Disassemble or decompile client-side application:TECHNIQUE:Use debugging tools such as File Monitor, Registry Monitor, Debuggers, etc.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine protection mechanism for opaque token] The attacker determines the protection mechanism used to protect the confidentiality and integrity of these data tokens. They may be obfuscated or a full blown encryption may be used.:TECHNIQUE:Look for signs of well-known character encodings:TECHNIQUE:Look for cryptographic signatures:TECHNIQUE:Look for delimiters or other indicators of structure::STEP:3:PHASE:Experiment:DESCRIPTION:[Modify parameter/token values] Trying each parameter in turn, the attacker modifies the values:TECHNIQUE:Modify tokens logically:TECHNIQUE:Modify tokens arithmetically:TECHNIQUE:Modify tokens bitwise:TECHNIQUE:Modify structural components of tokens:TECHNIQUE:Modify order of parameters/tokens::STEP:4:PHASE:Experiment:DESCRIPTION:[Cycle through values for each parameter.] Depending on the nature of the application, the attacker now cycles through values of each parameter and observes the effects of this modification in the data returned by the server:TECHNIQUE:Use network-level packet injection tools such as netcat:TECHNIQUE:Use application-level data modification tools such as Tamper Data, WebScarab, TamperIE, etc.:TECHNIQUE:Use modified client (modified by reverse engineering):TECHNIQUE:Use debugging tools to modify data in client::","::An attacker already has some access to the system or can steal the client based data tokens from another user who has access to the system.::For an Attacker to viably execute this attack, some data (later interpreted by the application) must be held client-side in a way that can be manipulated without detection. This means that the data or tokens are not CRCd as part of their value or through a separate meta-data store elsewhere.::",::SKILL:If the client site token is obfuscated.:LEVEL:Medium::SKILL:If the client site token is encrypted.:LEVEL:High::,"::The Attacker needs no special hardware-based resources in order to conduct this attack. Software plugins, such as Tamper Data for Firefox, may help in manipulating URL- or cookie-based data.::",,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.::Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)::Make sure that all session tokens use a good source of randomness::Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.::","::With certain price watching websites, that aggregate products available prices, the user can buy items through whichever vendors has product availability, the best price, or other differentiator. Once a user selects an item, the site must broker the purchase of that item with the vendor. Because vendors sell the same product through different channel partners at different prices, token exchange between price watching sites and selling vendors will often contain pricing information. With some price watching sites, manipulating URL-data (which is encrypted) even opaquely yields different prices charged by the fulfilling vendor. If the manipulated price turns out higher, the Attacker can cancel purchase. If the Attacker succeeded in manipulating the token and creating a lower price, they proceed.::Upon successful authentication user is granted an encrypted authentication cookie by the server and it is stored on the client. One piece of information stored in the authentication cookie reflects the access level of the user (e.g. u for user). The authentication cookie is encrypted using the Electronic Code Book (ECB) mode, that naively encrypts each of the plaintext blocks to each of the ciphertext blocks separately. An attacker knows the structure of the cookie and can figure out what bits (encrypted) store the information relating to the access level of the user. An attacker modifies the authentication cookie and effectively substitutes u for a by flipping some of the corresponding bits of ciphertext (trial and error). Once the correct flip is found, when the system is accessed, the attacker is granted administrative privileges in the system. Note that in this case an attacker did not have to figure out the exact encryption algorithm or find the secret key, but merely exploit the weakness inherent in using the ECB encryption mode.::Archangel Weblog 0.90.02 allows remote attackers to bypass authentication by setting the ba_admin cookie to 1. See also: CVE-2006-0944::",::353::285::302::472::565::315::539::384::233::,,
Bypassing Physical Locks,Standard,Draft,"An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.",,,,::NATURE:ChildOf:CAPEC ID:390::,,,,,,,,,,,
Bypassing Electronic Locks and Access Controls,Standard,Draft,"An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.",,,,::NATURE:ChildOf:CAPEC ID:390::,,,,,,,,,,,
DEPRECATED: Bypassing Card or Badge-Based Systems,Standard,Deprecated,"This attack pattern has been deprecated as it a generalization of CAPEC-397: Cloning Magnetic Strip Cards, CAPEC-398: Magnetic Strip Card Brute Force Attacks, CAPEC-399: Cloning RFID Cards or Chips and CAPEC-400: RFID Chip Deactivation or Destruction. Please refer to these CAPECs going forward.",,,,,,,,,,,,,,,
Manipulating Writeable Terminal Devices,Standard,Draft,This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.,,High,Very High,::NATURE:ChildOf:CAPEC ID:248::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify attacker-writable terminals] Determine if users TTYs are writable by the attacker.:TECHNIQUE:Determine the permissions for the TTYs found on the system. Any that allow user write to the TTY may be vulnerable.:TECHNIQUE:Attempt to write to other user TTYs. This approach could leave a trail or alert a user.::STEP:2:PHASE:Exploit:DESCRIPTION:[Execute malicious commands] Using one or more vulnerable TTY, execute commands to achieve various impacts.:TECHNIQUE:Commands that allow reading or writing end user files can be executed.::",::User terminals must have a permissive access control such as world writeable that allows normal users to control data on other user's terminals.::,"::SKILL:Ability to discover permissions on terminal devices. Of course, brute force can also be used.:LEVEL:Low::",::Access to a terminal on the target network::,,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::,::Design: Ensure that terminals are only writeable by named owner user and/or administrator::Design: Enforce principle of least privilege::,"::Any system that allows other peers to write directly to its terminal process is vulnerable to this type of attack. If the terminals are available through being over-privileged (i.e. world-writable) or the attacker is an administrator, then a series of commands in this format can be used to echo commands out to victim terminals. $echo -e 033[30m033132 > /dev/ttyXX where XX is the tty number of the user under attack. This will paste the characters to another terminal (tty). Note this technique works only if the victim's tty is world writable (which it may not be). That is one reason why programs like write(1) and talk(1) in UNIX systems need to run setuid. [REF-1] If the victim continues to hit enter and execute the commands, there are an endless supply of vectors available to the attacker, copying files, open up network connections, ftp out to servers, and so on.::",::77::,,
Physically Hacking Hardware,Standard,Stable,An adversary exploits a weakness in access control to gain access to currently installed hardware and precedes to implement changes or secretly replace a hardware component which undermines the system's integrity for the purpose of carrying out an attack.,,Low,High,::NATURE:ChildOf:CAPEC ID:440::,,,,,,,,::A malicious subcontractor or subcontractor's employee that is responsible for system maintenance secretly replaces a hard drive with one containing malicious code that will allow for backdoor access once deployed.::,::1263::,,
Pretexting,Standard,Draft,"An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",,Medium,Low,::NATURE:ChildOf:CAPEC ID:416::NATURE:ChildOf:CAPEC ID:410::NATURE:CanPrecede:CAPEC ID:163::,,::The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the pretext that would influence the actions of the specific target.::,::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::,,,"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Depending on the adversary's intentions and the specific nature their actions/requests, a successful pretexting attack can result in the compromise to the confidentiality of sensitive information in a variety of contexts.::","::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::","::The adversary dresses up like a jogger and runs in place by the entrance of a building, pretending to look for their access card. Because the hood obscures their face, it may be possible to solicit someone inside the building to let them inside.::",,TAXONOMY NAME:ATTACK:ENTRY ID:1589:ENTRY NAME:Gather Victim Identity Information::,
Influence Perception,Standard,Stable,The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.,,High,Low,::NATURE:ChildOf:CAPEC ID:416::,,::The adversary must have the means and knowledge of how to communicate with the target in some manner.::,::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::,::There are no necessary resources required for this attack.::,,"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that influence the perception of the target can result in a wide variety of consequences and negatively affect potentially the confidentiality, availability, and/or integrity of an application or system.::","::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::",,,,
Target Influence via Framing,Standard,Draft,"An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word No and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.",,Low,Low,::NATURE:ChildOf:CAPEC ID:416::,,::The adversary must have the means and knowledge of how to communicate with the target in some manner.::,::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::,,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Successful attacks that influence the target via framing into performing an action or sharing sensitive information can result in a variety of consequences that negatively affect the confidentiality of an application or system.::,"::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication.::",,,,
Influence via Incentives,Standard,Stable,"The adversary incites a behavior from the target by manipulating something of influence. This is commonly associated with financial, social, or ideological incentivization. Examples include monetary fraud, peer pressure, and preying on the target's morals or ethics. The most effective incentive against one target might not be as effective against another, therefore the adversary must gather information about the target's vulnerability to particular incentives.",,Low,Low,::NATURE:ChildOf:CAPEC ID:416::,,::The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the incentives that would influence the actions of the specific target.::,::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::,,,"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that successfully incentivize the target into performing an action beneficial to the adversary can result in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.::","::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::",,,,
Influence via Psychological Principles,Standard,Draft,"The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.",,Low,Low,::NATURE:ChildOf:CAPEC ID:416::,,::The adversary must have the means and knowledge of how to communicate with the target in some manner.::,::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::,,,"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that successfully influence the target into performing an action via psychological principles can result in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.::","::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::",,,,
Infected Software,Standard,Stable,"An adversary adds malicious logic, often in the form of a computer virus, to otherwise benign software. This logic is often hidden from the user of the software and works behind the scenes to achieve negative impacts. Many times, the malicious logic is inserted into empty space between legitimate code, and is then called when the software is executed. This pattern of attack focuses on software already fielded and used in operation as opposed to software that is still under development and part of the supply chain.",,Medium,High,::NATURE:ChildOf:CAPEC ID:441::,,::Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.::,,,,::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::,::Leverage anti-virus products to detect and quarantine software with known virus.::,,::506::,TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Compromise Software Dependencies and Development Tools::::TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::,
Development Alteration,Standard,Stable,"An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.",,Medium,High,::NATURE:ChildOf:CAPEC ID:438::,,::Access to the system during the development phase to alter and/or modify software and hardware components. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.::,,,,::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic::,::Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.::,,,,
Design Alteration,Standard,Stable,"An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.",,Medium,High,::NATURE:ChildOf:CAPEC ID:438::,,::Access to system design documentation prior to the development phase. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.::Ability to forge web communications to deliver modified design documentation.::,,,,::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic::,::Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.::Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.::,,,,
DEPRECATED: Malware Propagation via USB U3 Autorun,Standard,Deprecated,This attack pattern has been deprecated as it is a duplicate of CAPEC-448 : Embed Virus into DLL. Please refer to this other pattern going forward.,,,,,,,,,,,,,,,
Infected Hardware,Standard,Stable,"An adversary inserts malicious logic into hardware, typically in the form of a computer virus or rootkit. This logic is often hidden from the user of the hardware and works behind the scenes to achieve negative impacts. This pattern of attack focuses on hardware already fielded and used in operation as opposed to hardware that is still under development and part of the supply chain.",,Medium,High,::NATURE:ChildOf:CAPEC ID:441::,,::Access to the hardware currently deployed at a victim location.::,,,,::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::,,,,,
DEPRECATED: Malicious Logic Insertion via Counterfeit Hardware,Standard,Deprecated,This attack pattern has been deprecated as it is a duplicate of CAPEC-452 : Malicious Logic Insertion into Product Hardware. Please refer to this other pattern going forward.,,,,,,,,,,,,,,,
Infected Memory,Standard,Stable,An adversary inserts malicious logic into memory enabling them to achieve a negative impact. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems that are still under development and part of the supply chain.,,Medium,High,::NATURE:ChildOf:CAPEC ID:441::,,,,,,::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::,::Leverage anti-virus products to detect stop operations with known virus.::,"::A USB Memory stick has malicious logic inserted before shipping of the product allowing for infection of the host machine once inserted into the USB port.::In 2007, approximately 1800 of Seagate's Maxtor Personal Storage 3200 drives were built under contract with an outside manufacturer and contained a virus that stole user passwords.::",::1257::1260::1274::1312::1316::,,
Web Services API Signature Forgery Leveraging Hash Function Extension Weakness,Standard,Draft,"An adversary utilizes a hash function extension/padding weakness, to modify the parameters passed to the web service requesting authentication by generating their own call in order to generate a legitimate signature hash (as described in the notes), without knowledge of the secret token sometimes provided by the web service.",,,High,::NATURE:ChildOf:CAPEC ID:115::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find a vulnerable web service] The adversary finds a web service that uses a vulnerable authentication scheme, where an authentication token is concatenated with the parameters of a request and then hashed:TECHNIQUE:Read application documentation to learn about authentication schemes being used:TECHNIQUE:Observe web service traffic to look for vulnerable authentication schemes::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt adding padding to parameters] An adversary tests if they can simply add padding to the parameters of a request such that the request is technically changed, with the hash remaining the same:TECHNIQUE:Exploit the hash function extension / padding weakness with only padding to test the weakness::STEP:3:PHASE:Exploit:DESCRIPTION:[Add malicious parameters to request] Add malicious parameters to a captured request in addition to what is already present. Do this by exploiting the padding weakness of the hash function and send the request to the web service so that it believes it is authenticated and acts on the extra parameters.:TECHNIQUE:Exploit the hash function extension / padding weakness by adding malicious parameters to a web service request such that it is still deemed authentic::",::Web services check the signature of the API calls::Authentication tokens / secrets are shared between the server and the legitimate client::The API call signature is generated by concatenating the parameter list with the shared secret and hashing the result.::An iterative hash function like MD5 and SHA1 is used.::An attacker is able to intercept or in some other way gain access to the information passed between the legitimate client and the server in order to retrieve the hash value and length of the original message.::The communication channel between the client and the server is not secured via channel security such as TLS::,"::SKILL:Medium level of cryptography knowledge, specifically how iterative hash functions work. This is needed to select proper padding.:LEVEL:Medium::","::Access to a function to produce a hash (e.g., MD5, SHA1) Tools that allow the attacker to intercept a message between the client and the server, specifically the hash that is the signature and the length of the original message concatenated with the secret bytes::",,,::Design: Use a secure message authentication code (MAC) function such as an HMAC-SHA1::,"::To leverage an attack against the has function extension / padding weakness, consider the message to be passed to the web service is M (this message includes the parameters passed to the web service concatenated with the secret token / key bytes). The message M is hashed and that hash is passed to the web service and is used for authentication. The attacker does not know M, but can see Hash (M) and Length (M). The attacker can then compute Hash (M || Padding (M) || M') for any M'. The attacker does not know the entire message M, specifically the attacker does not know the secret bytes, but that does not matter. The attacker is still able to sign their own message M' and make the called web service verify the integrity of the message without an error.::",::328::290::,,
Evercookie,Standard,Draft,"An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed. The cookie is stored on the victim's machine in over ten places. When the victim clears the cookie cache via traditional means inside the browser, that operation removes the cookie from certain places but not others. The malicious code then replicates the cookie from all of the places where it was not deleted to all of the possible storage locations once again. So the victim again has the cookie in all of the original storage locations. In other words, failure to delete the cookie in even one location will result in the cookie's resurrection everywhere. The evercookie will also persist across different browsers because certain stores (e.g., Local Shared Objects) are shared between different browsers.",,,Medium,::NATURE:ChildOf:CAPEC ID:554::,,::The victim's browser is not configured to reject all cookiesThe victim visits a website that serves the attackers' evercookie::,,::Evercookie source code::,,,"::Design: Browser's design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place.::Design: Safari browser's private browsing mode is currently effective against evercookies.::",,::359::,TAXONOMY NAME:ATTACK:ENTRY ID:1606.001:ENTRY NAME:Forge Web Credentials: Web Cookies::,
Transparent Proxy Abuse,Standard,Draft,A transparent proxy serves as an intermediate between the client and the internet at large. It intercepts all requests originating from the client and forwards them to the correct location. The proxy also intercepts all responses to the client and forwards these to the client. All of this is done in a manner transparent to the client.,,,Medium,::NATURE:ChildOf:CAPEC ID:554::,,"::Transparent proxy is usedVulnerable configuration of network topology involving the transparent proxy (e.g., no NAT happening between the client and the proxy)Execution of malicious Flash or Applet in the victim's browser::",::SKILL:Creating malicious Flash or Applet to open a cross-domain socket connection to a remote system:LEVEL:Medium::,,,,"::Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.::Configuration: Disable in the browser the execution of Java Script, Flash, SilverLight, etc.::",,::441::,TAXONOMY NAME:ATTACK:ENTRY ID:1090.001:ENTRY NAME:Proxy: Internal Proxy::,
Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy,Standard,Draft,"An attacker leverages an adversary in the middle attack (CAPEC-94) in order to bypass the same origin policy protection in the victim's browser. This active adversary in the middle attack could be launched, for instance, when the victim is connected to a public WIFI hot spot. An attacker is able to intercept requests and responses between the victim's browser and some non-sensitive website that does not use TLS.",,,Medium,::NATURE:ChildOf:CAPEC ID:94::,,"::The victim and the attacker are both in an environment where an active adversary in the middle attack is possible (e.g., public WIFI hot spot)The victim visits at least one website that does not use TLS / SSL::",::SKILL:Ability to intercept and modify requests / responses:LEVEL:Low::SKILL:Ability to create iFrame and JavaScript code that would initiate unauthorized requests to sensitive sites from the victim's browser:LEVEL:Medium::SKILL:Solid understanding of the HTTP protocol:LEVEL:Medium::,,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::,"::Design: Tunnel communications through a secure proxy::Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)::",,::300::,,
Generic Cross-Browser Cross-Domain Theft,Standard,Draft,An attacker makes use of Cascading Style Sheets (CSS) injection to steal data cross domain from the victim's browser. The attack works by abusing the standards relating to loading of CSS: 1. Send cookies on any load of CSS (including cross-domain) 2. When parsing returned CSS ignore all data that does not make sense before a valid CSS descriptor is found by the CSS parser.,,,Medium,::NATURE:ChildOf:CAPEC ID:242::,,::No new lines can be present in the injected CSS stringProper HTML or URL escaping of the and ' characters is not presentThe attacker has control of two injection points: pre-string and post-string::,::SKILL:Ability to craft a CSS injection:LEVEL:High::,::Attacker controlled site/page to render a page referencing the injected CSS string::,,,"::Design: Prior to performing CSS parsing, require the CSS to start with well-formed CSS when it is a cross-domain load and the MIME type is broken. This is a browser level fix.::Implementation: Perform proper HTML encoding and URL escaping::",,::707::149::177::838::,,
HTTP DoS,Standard,Draft,An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted.,,,Low,::NATURE:ChildOf:CAPEC ID:227::,,::HTTP protocol is usedWeb server used is vulnerable to denial of service via HTTP flooding::,,::Ability to issues hundreds of HTTP requests::,,,::Configuration: Configure web server software to limit the waiting period on opened HTTP sessions::Design: Use load balancing mechanisms::,,::770::772::,TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service: Service Exhaustion Flood::,
Signature Spoof,Standard,Draft,"An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.",,,,::NATURE:ChildOf:CAPEC ID:151::,,::The victim or victim system is dependent upon a cryptographic signature-based verification system for validation of one or more security events or actions.::The validation can be bypassed via an attacker-provided signature that makes it appear that the legitimate authoritative or reputable source provided the signature.::,::SKILL:Technical understanding of how signature verification algorithms work with data and applications:LEVEL:High::,,,::SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::,,"::An attacker provides a victim with a malicious executable disguised as a legitimate executable from an established software by signing the executable with a forged cryptographic key. The victim's operating system attempts to verify the executable by checking the signature, the signature is considered valid, and the attackers' malicious executable runs.::An attacker exploits weaknesses in a cryptographic algorithm to that allow a private key for a legitimate software vendor to be reconstructed, attacker-created malicious software is cryptographically signed with the reconstructed key, and is installed by the victim operating system disguised as a legitimate software update from the software vendor.::",::20::327::290::,TAXONOMY NAME:ATTACK:ENTRY ID:1036.001:ENTRY NAME:Masquerading: Invalid Code Signature::::TAXONOMY NAME:ATTACK:ENTRY ID:1553.002:ENTRY NAME:Subvert Trust Controls: Code Signing::,
Passing Local Filenames to Functions That Expect a URL,Standard,Draft,"This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",,High,High,::NATURE:ChildOf:CAPEC ID:212::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify web application URL inputs] Review application inputs to find those that are designed to be URLs.:TECHNIQUE:Manually navigate web site pages to identify URLs.:TECHNIQUE:Use automated tools to identify URLs.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify URL inputs allowing local access.] Execute test local commands via each URL input to determine which are successful.:TECHNIQUE:Manually execute a local command (such as 'pwd') via the URL inputs.:TECHNIQUE:Using an automated tool, test each URL input for weakness.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute malicious commands] Using the identified URL inputs that allow local command execution, execute malicious commands.:TECHNIQUE:Execute local commands via the URL input.::","::The victim's software must not differentiate between the location and type of reference passed the client software, e.g. browser::",::SKILL:Attacker identifies known local files to exploit:LEVEL:Medium::,,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::,::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::,"::J2EE applications frequently use .properties files to store configuration information including JDBC connections, LDAP connection strings, proxy information, system passwords and other system metadata that is valuable to attackers looking to probe the system or bypass policy enforcement points. When these files are stored in publicly accessible directories and are allowed to be read by the public user, then an attacker can list the directory identify a .properties file and simply load its contents in the browser listing its contents. A standard Hibernate properties file contains hibernate.connection.driver_class = org.postgresql.Driverhibernate.connection.url = jdbc:postgresql://localhost/mydatabasehibernate.connection.username = usernamehibernate.connection.password = passwordhibernate.c3p0.min_size=5hibernate.c3p0.max_size=20 Even if the attacker cannot write this file, there is plenty of information to leverage to gain further access.::",::241::706::,,
Escaping Virtualization,Standard,Draft,"An adversary gains access to an application, service, or device with the privileges of an authorized or privileged user by escaping the confines of a virtualized environment. The adversary is then able to access resources or execute unauthorized code within the host environment, generally with the privileges of the user running the virtualized process. Successfully executing an attack of this type is often the first step in executing more complex attacks.",,Low,Very High,::NATURE:ChildOf:CAPEC ID:115::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Probing] The adversary probes the target application, service, or device to find a possible weakness that would allow escaping the virtualized environment.:TECHNIQUE:Probing applications, services, or devices for virtualization weaknesses.::STEP:2:PHASE:Experiment:DESCRIPTION:[Verify the exploitable security weaknesses] Using the found weakness, the adversary attempts to escape the virtualized environment.:TECHNIQUE:Using an application weakness to escape a virtualized environment::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute more complex attacks] Once outside of the virtualized environment, the adversary attempts to perform other more complex attacks such as accessing system resources or executing unauthorized code within the host environment.:TECHNIQUE:Executing complex attacks when given higher permissions by escaping a virtualized environment::",,,,,::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::,::Ensure virtualization software is current and up-to-date.::Abide by the least privilege principle to avoid assigning users more privileges than necessary.::,,::693::,TAXONOMY NAME:ATTACK:ENTRY ID:1611:ENTRY NAME:Escape to Host::,
Contradictory Destinations in Traffic Routing Schemes,Standard,Draft,"Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",,Medium,High,::NATURE:ChildOf:CAPEC ID:161::,,"::An adversary must be aware that their message will be routed using a CDN, and that both of the contradictory domains are served from that CDN.::If the purpose of the Domain Fronting is to hide redirected C2 traffic, the C2 server must have been created in the CDN.::",::SKILL:The adversary must have some knowledge of how messages are routed.:LEVEL:Medium::,,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data::,"::Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.::",,::923::,TAXONOMY NAME:ATTACK:ENTRY ID:1090.004:ENTRY NAME:Proxy:Domain Fronting::,
TCP Flood,Standard,Draft,An adversary may execute a flooding attack using the TCP protocol with the intent to deny legitimate users access to a service. These attacks exploit the weakness within the TCP protocol where there is some state information for the connection the server needs to maintain. This often involves the use of TCP SYN messages.,,,,::NATURE:ChildOf:CAPEC ID:125::,,::This type of an attack requires the ability to generate a large amount of TCP traffic to send to the target port of a functioning server.::,,,,,"::To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack.::",,::770::,TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service: Direct Network Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1499.001:ENTRY NAME:Endpoint Denial of Service: OS Exhaustion Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service: Service Exhaustion Flood::,
DEPRECATED: XML Client-Side Attack,Standard,Deprecated,This attack pattern has been deprecated as it a generalization of CAPEC-230: XML Nested Payloads and CAPEC-231: XML Oversized Payloads. Please refer to these CAPECs going forward.,,,,,,,,,,,,,,,
UDP Flood,Standard,Draft,"An adversary may execute a flooding attack using the UDP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. Additionally, firewalls often open a port for each UDP connection destined for a service with an open UDP port, meaning the firewalls in essence save the connection state thus the high packet nature of a UDP flood can also overwhelm resources allocated to the firewall. UDP attacks can also target services like DNS or VoIP which utilize these protocols. Additionally, due to the session-less nature of the UDP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.",,,,::NATURE:ChildOf:CAPEC ID:125::,,::This type of an attack requires the ability to generate a large amount of UDP traffic to send to the desired port of a target service using UDP.::,,,,,"::To mitigate this type of an attack, modern firewalls drop UDP traffic destined for closed ports, and unsolicited UDP reply packets. A variety of other countermeasures such as universal reverse path forwarding and remote triggered black holing(RFC3704) along with modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.::",,::770::,,
ICMP Flood,Standard,Draft,"An adversary may execute a flooding attack using the ICMP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. A typical attack involves a victim server receiving ICMP packets at a high rate from a wide range of source addresses. Additionally, due to the session-less nature of the ICMP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.",,,,::NATURE:ChildOf:CAPEC ID:125::,,::This type of an attack requires the ability to generate a large amount of ICMP traffic to send to the target server.::,,,,,"::To mitigate this type of an attack, an organization can enable ingress filtering. Additionally modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.::",,::770::,,
HTTP Flood,Standard,Draft,An adversary may execute a flooding attack using the HTTP protocol with the intent to deny legitimate users access to a service by consuming resources at the application layer such as web services and their infrastructure. These attacks use legitimate session-based HTTP GET requests designed to consume large amounts of a server's resources. Since these are legitimate sessions this attack is very difficult to detect.,,,,::NATURE:ChildOf:CAPEC ID:125::,,::This type of an attack requires the ability to generate a large amount of HTTP traffic to send to a target server.::,,,,,"::Design: Use a Web Application Firewall (WAF) to help filter out malicious traffic. This can be setup with rules to block IP addresses found in IP reputation databases, which contains lists of known bad IP addresses. Analysts should also monitor when the traffic flow becomes abnormally large, and be able to add on-the-fly rules to block malicious traffic. Special care should be taken to ensure low false positive rates in block rules and functionality should be implemented to allow a legitimate user to resume sending traffic if they have been blocked.::Hire a third party provider to implement a Web Application Firewall (WAF) for your application. Third party providers have dedicated resources and expertise that could allow them to update rules and prevent HTTP Floods very quickly.::Design: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.::Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.::",,::770::,TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service:Service Exhaustion Flood::,
SSL Flood,Standard,Draft,"An adversary may execute a flooding attack using the SSL protocol with the intent to deny legitimate users access to a service by consuming all the available resources on the server side. These attacks take advantage of the asymmetric relationship between the processing power used by the client and the processing power used by the server to create a secure connection. In this manner the attacker can make a large number of HTTPS requests on a low provisioned machine to tie up a disproportionately large number of resources on the server. The clients then continue to keep renegotiating the SSL connection. When multiplied by a large number of attacking machines, this attack can result in a crash or loss of service to legitimate users.",,,,::NATURE:ChildOf:CAPEC ID:125::,,::This type of an attack requires the ability to generate a large amount of SSL traffic to send a target server.::,,,,,"::To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period.::",,::770::,TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service:Service Exhaustion Flood::,
Password Brute Forcing,Standard,Draft,"An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.",,Medium,High,::NATURE:ChildOf:CAPEC ID:112::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine application's/system's password policy] Determine the password policies of the target application/system.:TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).::STEP:2:PHASE:Exploit:DESCRIPTION:[Brute force password] Given the finite space of possible passwords dictated by the password policy determined in the previous step, try all possible passwords for a known user ID until application/system grants access.:TECHNIQUE:Manually or automatically enter all possible passwords through the application/system's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.:TECHNIQUE:Perform an offline dictionary attack or a rainbow table attack against a known password hash.::",::An adversary needs to know a username to target.::The system uses password based authentication as the one factor authentication mechanism.::An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical.::,::SKILL:A brute force attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low::,"::A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge).::",::Many incorrect login attempts are detected by the system.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::,"::Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.::Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.::Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.::","::A system does not enforce a strong password policy and the user picks a five letter password consisting of lower case English letters only. The system does not implement any password throttling mechanism. Assuming the adversary does not know the length of the users' password, an adversary can brute force this password in maximum 1+26+26^2+26^3+26^4+26^5 = 1 + 26 + 676 + 17576 + 456976 + 11,881,376 = 12,356,631 attempts, and half these tries (6,178,316) on average. Using modern hardware this attack is trivial. If the adversary were to assume that the user password could also contain upper case letters (and it was case sensitive) and/or numbers, than the number of trials would have been larger. An adversary's job would have most likely been even easier because many users who choose easy to brute force passwords like this are also likely to use a word that can be found in the dictionary. Since there are far fewer valid English words containing up to five letters than 12,356,631, an attack that tries each of the entries in the English dictionary would go even faster.::A weakness exists in the automatic password generation routine of Mailman prior to 2.1.5 that causes only about five million different passwords to be generated. This makes it easy to brute force the password for all users who decided to let Mailman automatically generate their passwords for them. Users who chose their own passwords during the sign up process would not have been affected (assuming that they chose strong passwords). See also: CVE-2004-1143::",::521::262::263::257::654::307::308::309::,TAXONOMY NAME:ATTACK:ENTRY ID:1110.001:ENTRY NAME:Brute Force:Password Guessing::,
Amplification,Standard,Draft,"An adversary may execute an amplification where the size of a response is far greater than that of the request that generates it. The goal of this attack is to use a relatively few resources to create a large amount of traffic against a target server. To execute this attack, an adversary send a request to a 3rd party service, spoofing the source address to be that of the target server. The larger response that is generated by the 3rd party service is then sent to the target server. By sending a large number of initial requests, the adversary can generate a tremendous amount of traffic directed at the target. The greater the discrepancy in size between the initial request and the final payload delivered to the target increased the effectiveness of this attack.",,,,::NATURE:ChildOf:CAPEC ID:125::,,::This type of an attack requires the existence of a 3rd party service that generates a response that is significantly larger than the request that triggers it.::,,,,,"::To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.::",,::770::,TAXONOMY NAME:ATTACK:ENTRY ID:1498.002:ENTRY NAME:Network Denial of Service:Reflection Amplification::,
Regular Expression Exponential Blowup,Standard,Draft,An adversary may execute an attack on a program that uses a poor Regular Expression(Regex) implementation by choosing input that results in an extreme situation for the Regex. A typical extreme situation operates at exponential time compared to the input size. This is due to most implementations using a Nondeterministic Finite Automaton(NFA) state machine to be built by the Regex algorithm since NFA allows backtracking and thus more complex regular expressions.,,,,::NATURE:ChildOf:CAPEC ID:130::,,"::This type of an attack requires the ability to identify hosts running a poorly implemented Regex, and the ability to send crafted input to exploit the regular expression.::",,,,,::Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.::,,::400::1333::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Regular expression Denial of Service - ReDoS::,
SOAP Array Blowup,Standard,Draft,"An adversary may execute an attack on a web service that uses SOAP messages in communication. By sending a very large SOAP array declaration to the web service, the attacker forces the web service to allocate space for the array elements before they are parsed by the XML parser. The attacker message is typically small in size containing a large array declaration of say 1,000,000 elements and a couple of array elements. This attack targets exhaustion of the memory resources of the web service.",,,,::NATURE:ChildOf:CAPEC ID:130::,,"::This type of an attack requires the attacker to know the endpoint of the web service, and be able to reach the endpoint with a malicious SOAP message.::",,,,,::Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.::,,::770::,,
TCP Fragmentation,Standard,Draft,"An adversary may execute a TCP Fragmentation attack against a target with the intention of avoiding filtering rules of network controls, by attempting to fragment the TCP packet such that the headers flag field is pushed into the second fragment which typically is not filtered.",,,,::NATURE:ChildOf:CAPEC ID:130::,,"::This type of an attack requires the target system to be running a vulnerable implementation of IP, and the adversary needs to ability to send TCP packets of arbitrary size with crafted data.::",,,,,::This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule IF FO=1 and PROTOCOL=TCP then DROP PACKET as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment.::,,::770::404::,,
UDP Fragmentation,Standard,Draft,An attacker may execute a UDP Fragmentation attack against a target server in an attempt to consume resources such as bandwidth and CPU. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. Typically the attacker will use large UDP packets over 1500 bytes of data which forces fragmentation as ethernet MTU is 1500 bytes. This attack is a variation on a typical UDP flood but it enables more network bandwidth to be consumed with fewer packets. Additionally it has the potential to consume server CPU resources and fill memory buffers associated with the processing and reassembling of fragmented packets.,,,,::NATURE:ChildOf:CAPEC ID:130::,,::This type of an attack requires the attacker to be able to generate fragmented IP traffic containing crafted data.::,,,,,::This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity.::,,::770::404::,,
ICMP Fragmentation,Standard,Draft,An attacker may execute a ICMP Fragmentation attack against a target with the intention of consuming resources or causing a crash. The attacker crafts a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message. The attacker these sends these messages to a target host which causes the host to become non-responsive. Another vector may be sending a fragmented ICMP message to a target host with incorrect sizes in the header which causes the host to hang.,,,,::NATURE:ChildOf:CAPEC ID:130::,,"::This type of an attack requires the target system to be running a vulnerable implementation of IP, and the attacker needs to ability to send arbitrary sized ICMP packets to the target.::",,,,,"::This attack may be mitigated through egress filtering based on ICMP payload so a network is a good neighbor to other networks. Bad IP implementations become patched, so using the proper version of a browser or OS is recommended.::",,::770::404::,,
File Discovery,Standard,Draft,"An adversary engages in probing and exploration activities to determine if common key files exists. Such files often contain configuration and security parameters of the targeted application, system or network. Using this knowledge may often pave the way for more damaging attacks.",,High,Very Low,::NATURE:ChildOf:CAPEC ID:169::,,::The adversary must know the location of these common key files.::,,,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,::Leverage file protection mechanisms to render these files accessible only to authorized parties.::,,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1083:ENTRY NAME:File and Directory Discovery::,
Android Intent Intercept,Standard,Draft,"An adversary, through a previously installed malicious application, intercepts messages from a trusted Android-based application in an attempt to achieve a variety of different objectives including denial of service, information disclosure, and data injection. An implicit intent sent from a trusted application can be received by any application that has declared an appropriate intent filter. If the intent is not protected by a permission that the malicious application lacks, then the attacker can gain access to the data contained within the intent. Further, the intent can be either blocked from reaching the intended destination, or modified and potentially forwarded along.",,,,::NATURE:ChildOf:CAPEC ID:117::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find an android application that uses implicit intents] Since this attack only works on android applications that use implicit intents, rather than explicit intents, an adversary must first identify an app that uses implicit intents. They must also determine what the contents of the intents being sent are such that a malicious application can get sent these intents.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create a malicious app] The adversary must create a malicious android app meant to intercept implicit intents from a target application:TECHNIQUE:Specify the type of intent wished to be intercepted in the malicious app's manifest file using an intent filter::STEP:3:PHASE:Experiment:DESCRIPTION:[Get user to download malicious app] The adversary must get a user using the targeted app to download the malicious app by any means necessary::STEP:4:PHASE:Exploit:DESCRIPTION:[Intercept Implicit Intents] Once the malicious app is downloaded, the android device will forward any implicit intents from the target application to the malicious application, allowing the adversary to gaina access to the contents of the intent. The adversary can proceed with any attack using the contents of the intent.:TECHNIQUE:Block the intent from reaching the desired location, causing a denial of service:TECHNIQUE:Gather sensitive information from the intercepted intent:TECHNIQUE:Modify the contents of the intent and forward along to another application::",::An adversary must be able install a purpose built malicious application onto the Android device and convince the user to execute it. The malicious application is used to intercept implicit intents.::,,,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::,"::To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.::",,::925::,,
Password Recovery Exploitation,Standard,Draft,An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure.,,Medium,High,::NATURE:ChildOf:CAPEC ID:212::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::,"::STEP:1:PHASE:Explore:DESCRIPTION:Understand the password recovery mechanism and how it works.::STEP:2:PHASE:Exploit:DESCRIPTION:Find a weakness in the password recovery mechanism and exploit it. For instance, a weakness may be that a standard single security question is used with an easy to determine answer.::",::The system allows users to recover their passwords and gain access back into the system.::Password recovery mechanism has been designed or implemented insecurely.::Password recovery mechanism relies only on something the user knows and not something the user has.::No third party intervention is required to use the password recovery mechanism.::,::SKILL:Brute force attack:LEVEL:Low::SKILL:Social engineering and more sophisticated technical attacks.:LEVEL:Medium::,"::For a brute force attack one would need a machine with sufficient CPU, RAM and HD.::",::Many incorrect attempts to answer the security question.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,::Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.::E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.::Ensure that your password recovery functionality is not vulnerable to an injection style attack.::,"::An attacker clicks on the forgot password and is presented with a single security question. The question is regarding the name of the first dog of the user. The system does not limit the number of attempts to provide the dog's name. An attacker goes through a list of 100 most popular dog names and finds the right name, thus getting the ability to reset the password and access the system.::phpBanner Exchange is a PHP script (using the mySQL database) that facilitates the running of a banner exchange without extensive knowledge of PHP or mySQL. A SQL injection was discovered in the password recovery module of the system that allows recovering an arbitrary user's password and taking over their account. The problem is due to faulty input sanitization in the phpBannerExchange, specifically the e-mail address of the user which is requested by the password recovery module. The e-mail address requested by the password recovery module on the resetpw.php page. That e-mail address is validated with the following regular expression: if(!eregi(^[_a-z0-9-]+(.[_a-z0-9-]+)*@[a-z0-9-]+(.[a-z0-9-]+)*(.[a-z]{2,3})$, $email)){ A bug in the implementation of eregi() allows to pass additional character using a null byte 0. Since eregi() is implemented in C, the variable $email is treated as a zero-terminated string. All characters following the Null Byte will not be recognized by the regular expression. So an e-mail address can be provided that includes the special character ' to break the SQL query below (and it will not be rejected by the regular expression because of the null byte trick). So a SQL injection becomes possible: $get_info=mysql_query(select * from banneruser whereemail='$email' ); This query will return a non-zero result set even though the email supplied (attacker's email) is not in the database. Then a new password for the user is generated and sent to the $email address, an e-mail address controlled by the attacker. An attacker can then log in into the system.See also: CVE-2006-3013::",::522::640::,,
Intent Spoof,Standard,Draft,"An adversary, through a previously installed malicious application, issues an intent directed toward a specific trusted application's component in an attempt to achieve a variety of different objectives including modification of data, information disclosure, and data injection. Components that have been unintentionally exported and made public are subject to this type of an attack. If the component trusts the intent's action without verififcation, then the target application performs the functionality at the adversary's request, helping the adversary achieve the desired negative technical impact.",,,,::NATURE:ChildOf:CAPEC ID:148::,,::An adversary must be able install a purpose built malicious application onto the Android device and convince the user to execute it. The malicious application will be used to issue spoofed intents.::,,,,,"::To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.::",,::284::,,
WebView Exposure,Standard,Draft,"An adversary, through a malicious web page, accesses application specific functionality by leveraging interfaces registered through WebView's addJavascriptInterface API. Once an interface is registered to WebView through addJavascriptInterface, it becomes global and all pages loaded in the WebView can call this interface.",,,,::NATURE:ChildOf:CAPEC ID:122::,,"::This type of an attack requires the adversary to convince the user to load the malicious web page inside the target application. Once loaded, the malicious web page will have the same permissions as the target application and will have access to all registered interfaces. Both the permission and the interface must be in place for the functionality to be exposed.::",,,,,"::To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.::",,::284::,,
Task Impersonation,Standard,Stable,"An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.",,Medium,High,::NATURE:ChildOf:CAPEC ID:173::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing sensitive information.:TECHNIQUE:Determine what tasks prompt a user for their credentials.:TECHNIQUE:Determine what tasks may prompt a user to authorize a process to execute with elevated privileges.::STEP:2:PHASE:Exploit:DESCRIPTION:[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials or to ride the user's privileges.:TECHNIQUE:Prompt a user for their credentials, while making the user believe the credential request is legitimate.:TECHNIQUE:Prompt a user to authorize a task to run with elevated privileges, while making the user believe the request is legitimate.::",::The adversary must already have access to the target system via some means.::A legitimate task must exist that an adversary can impersonate to glean credentials.::The user's privileges allow them to execute certain tasks with elevated privileges.::,"::SKILL:Once an adversary has gained access to the target system, impersonating a task is trivial.:LEVEL:Low::",::Malware or some other means to initially comprise the target system.::Additional malware to impersonate a legitimate task.::,::Credential or permission elevation prompts that appear illegitimate or unexpected.::,::SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::,"::The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.::","::An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.::An adversary prompts a user to authorize an elevation of privileges, implying that a background task needs additional permissions to execute. The user accepts the privilege elevation, allowing the adversary to execute additional malware or tasks with the user's privileges.::",::1021::,TAXONOMY NAME:ATTACK:ENTRY ID:1036.004:ENTRY NAME:Masquerading: Masquerade Task or Service::,
Tapjacking,Standard,Draft,"An adversary, through a previously installed malicious application, displays an interface that misleads the user and convinces them to tap on an attacker desired location on the screen. This is often accomplished by overlaying one screen on top of another while giving the appearance of a single interface. There are two main techniques used to accomplish this. The first is to leverage transparent properties that allow taps on the screen to pass through the visible application to an application running in the background. The second is to strategically place a small object (e.g., a button or text field) on top of the visible screen and make it appear to be a part of the underlying application. In both cases, the user is convinced to tap on the screen but does not realize the application that they are interacting with.",,Low,Low,::NATURE:ChildOf:CAPEC ID:173::,,::This pattern of attack requires the ability to execute a malicious application on the user's device. This malicious application is used to present the interface to the user and make the attack possible.::,,,,,,,::1021::,,
SaaS User Request Forgery,Standard,Draft,"An adversary, through a previously installed malicious application, performs malicious actions against a third-party Software as a Service (SaaS) application (also known as a cloud based application) by leveraging the persistent and implicit trust placed on a trusted user's session. This attack is executed after a trusted user is authenticated into a cloud service, piggy-backing on the authenticated session, and exploiting the fact that the cloud service believes it is only interacting with the trusted user. If successful, the actions embedded in the malicious application will be processed and accepted by the targeted SaaS application and executed at the trusted user's privilege level.",,High,Medium,::NATURE:ChildOf:CAPEC ID:21::,,::An adversary must be able install a purpose built malicious application onto the trusted user's system and convince the user to execute it while authenticated to the SaaS application.::,::SKILL:This attack pattern often requires the technical ability to modify a malicious software package (e.g. Zeus) to spider a targeted site and a way to trick a user into a malicious software download.:LEVEL:Medium::,,,,"::To limit one's exposure to this type of attack, tunnel communications through a secure proxy service.::Detection of this type of attack can be done through heuristic analysis of behavioral anomalies (a la credit card fraud detection) which can be used to identify inhuman behavioral patterns. (e.g., spidering)::",,::346::,,"TYPE:Other:NOTE:SaaS/Cloud applications are often accessed from unmanaged systems and devices, over untrusted networks that are outside corporate IT control. The likelihood of a cloud service being accessed by a trusted user though an untrusted device is high. Several instances of this style of attack have been found.::"
Malicious Hardware Component Replacement,Standard,Draft,"An adversary replaces legitimate hardware in the system with faulty counterfeit or tampered hardware in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.",,Low,High,::NATURE:ChildOf:CAPEC ID:439::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Target Hardware] The adversary must first identify a system that they wish to target, and a specific hardware component that they can swap out with a malicious replacement.:TECHNIQUE:Look for datasheets containing the system schematics that can help identify possible target hardware.:TECHNIQUE:Procure a system and inspect it manually, looking for possible hardware component targets. Search for manufacturer IDs on hardware chips or FCC IDs on wireless chips to determine their functionality.::STEP:2:PHASE:Explore:DESCRIPTION:[Discover Vulnerability in Supply Chain] The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.:TECHNIQUE:Procure a system and observe the steps it takes in the shipment process.:TECHNIQUE:Identify possible warehouses that systems are stored after manufacturing.::STEP:3:PHASE:Experiment:DESCRIPTION:[Test a Malicious Component Replacement] Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.:TECHNIQUE:Design a malicious hardware component that will perform the same functionality as the target component, but also contains additional functionality.:TECHNIQUE:Obtain already designed malicious components that just need to be placed into the system.::STEP:3:PHASE:Exploit:DESCRIPTION:[Substitute Components in the Supply Chain] Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary substitutes the malicious component for the targeted component. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks.::",::Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.::,::SKILL:Advanced knowledge of the design of the system.:LEVEL:High::SKILL:Hardware creation and manufacture of replacement components.:LEVEL:High::,,,,"::Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.::Prevent or detect tampering with critical hardware or firmware components while in transit through use of state-of-the-art anti-tamper devices.::Use tamper-resistant and tamper-evident packaging when shipping critical components (e.g., plastic coating for circuit boards, tamper tape, paint, sensors, and/or seals for cases and containers) and inspect received system components for evidence of tampering.::","::During shipment the adversary is able to intercept a system that has been purchased by the victim, and replaces a math processor card that functions just like the original, but contains advanced malicious capability. Once deployed, the system functions as normal, but allows for the adversary to remotely communicate with the system and use it as a conduit for additional compromise within the victim's environment.::",,TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::,
Malicious Software Implanted,Standard,Draft,"An attacker implants malicious software into the system in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.",,Low,High,::NATURE:ChildOf:CAPEC ID:439::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Entry Point] The adversary must first identify a system that they wish to target and search for an entry point they can use to install the malicious software. This could be a system which they have prior knowledge of, giving them insight into the software and environment.:TECHNIQUE:Use a JTAGulator to identify exposed JTAG and UART interfaces in smaller embedded systems.:TECHNIQUE:Identify exposed USB connectors that could be used to load software.::STEP:2:PHASE:Explore:DESCRIPTION:[Discover Vulnerability in Supply Chain] The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.:TECHNIQUE:Procure a system and observe the steps it takes in the shipment process.:TECHNIQUE:Identify possible warehouses that systems are stored after manufacturing.::STEP:3:PHASE:Experiment:DESCRIPTION:[Test Malicious Software] Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.:TECHNIQUE:Design malicious software that will give an adversary a backdoor into the system once it is deployed to the victim.:TECHNIQUE:Obtain already designed malicious software that just need to be placed into the system.::STEP:4:PHASE:Exploit:DESCRIPTION:[Implant Software in the Supply Chain] Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary implants the malicious software into the system. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks.::",::Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.::,::SKILL:Advanced knowledge of the design of the system and it's operating system components and subcomponents.:LEVEL:High::SKILL:Malicious software creation.:LEVEL:High::,,,,"::Deploy strong code integrity policies to allow only authorized apps to run.::Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.::Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.::Require SSL for update channels and implement certificate transparency based verification.::Sign everything, including configuration files, XML files and packages.::Develop an incident response process, disclose supply chain incidents and notify customers with accurate and timely information.::","::An attacker has created a piece of malicious software designed to function as a backdoor in a system that is to be deployed at the victim location. During shipment of the system, the attacker has physical access to the system at a loading dock of an integrator for a short time. The attacker unpacks and powers up the system and installs the malicious piece of software, and configures it to run upon system boot. The system is repackaged and returned to its place on the loading dock, and is shipped and installed at the victim location with the malicious software in place, allowing the attacker to bypass firewalls and remotely gain access to the victim's network for further malicious activities.::",,TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::,
Rogue Integration Procedures,Standard,Draft,An attacker alters or establishes rogue processes in an integration facility in order to insert maliciously altered components into the system. The attacker would then supply the malicious components. This would allow for malicious disruption or additional compromise when the system is deployed.,,Low,High,::NATURE:ChildOf:CAPEC ID:439::,,::Physical access to an integration facility that prepares the system before it is deployed at the victim location.::,::SKILL:Advanced knowledge of the design of the system.:LEVEL:High::SKILL:Hardware creation and manufacture of replacement components.:LEVEL:High::,,,,"::Deploy strong code integrity policies to allow only authorized apps to run.::Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.::Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.::Require SSL for update channels and implement certificate transparency based verification.::Sign everything, including configuration files, XML files and packages.::Develop an incident response process, disclose supply chain incidents and notify customers with accurate and timely information.::Maintain strong physical system access controls and monitor networks and physical facilities for insider threats.::","::An attacker gains access to a system integrator's documentation for the preparation of purchased systems designated for deployment at the victim's location. As a part of the preparation, the included 100 megabit network card is to be replaced with a 1 gigabit network card. The documentation is altered to reflect the type of 1 gigabit network card to use, and the attacker ensures that this type of network card is provided by the attacker's own supply. The card has additional malicious functionality which will allow for additional compromise by the attacker at the victim location once the system is deployed.::",,,
XML Flood,Standard,Draft,"An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.",::TERM:XML Denial of Service (XML DoS):DESCRIPTION:::,Low,Medium,::NATURE:ChildOf:CAPEC ID:125::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.:TECHNIQUE:Use an automated tool to record all instances of URLs to process XML requests.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes XML requests.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary crafts input data that may have an adverse effect on the operation of the web service when the XML data sent to the service.::STEP:3:PHASE:Exploit:DESCRIPTION:[Launch a resource depletion attack] The attacker delivers a large number of XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.:TECHNIQUE:Send a large number of crafted XML messages to the target URL.::",::The target must receive and process XML transactions.::An adverssary must possess the ability to generate a large amount of XML based messages to send to the target service.::,::SKILL:Denial of service:LEVEL:Low::,,::A large amount of data is passed to the XML parser possibly making it crash or otherwise unavailable to end users.::,::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::,::Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.::Implementation: Provide for network flow control and traffic shaping to control access to the resources.::,"::Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.::",::770::,TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service:Service Exhaustion Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service:Direct Network Flood::,
Malware-Directed Internal Reconnaissance,Standard,Stable,"Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.",,Medium,Medium,::NATURE:ChildOf:CAPEC ID:169::,,"::The adversary must have internal, logical access to the target network and system.::","::SKILL:The adversary must be able to obtain or develop, as well as place malicious software inside the target network/system.:LEVEL:Medium::",::The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.::,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::,,,,
Malicious Hardware Update,Standard,Stable,"An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.",,Low,High,::NATURE:ChildOf:CAPEC ID:440::,,,::SKILL:Able to develop and manufacture malicious hardware components that perform the same functions and processes as their non-malicious counterparts.:LEVEL:High::,,,,,"::An adversary develops a malicious networking card that allows for normal function plus the addition of malicious functionality that is of benefit to the adversary. The adversary sends the victim an email stating that the existing networking card is faulty, and that the victim can order a replacement card free of charge. The victim orders the card, and the adversary sends the malicious networking card. The malicious networking card replaces the perfectly-functioning original networking card, and the adversary is able to take advantage of the additional malicious functionality to further compromise the victim's network.::",,,
Data Injected During Configuration,Standard,Stable,"An attacker with access to data files and processes on a victim's system injects malicious data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the adversary.",,Low,High,::NATURE:ChildOf:CAPEC ID:176::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine configuration process] The adversary, through a previously compromised system, either remotely or physically, determines what the configuration process is. They look at configuration files, data files, and running processes on the system to identify areas where they could inject malicious data.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine when configuration occurs] The adversary needs to then determine when configuration or recalibration of a system occurs so they know when to inject malicious data.:TECHNIQUE:Look for a weekly update cycle or repeated update schedule.:TECHNIQUE:Insert a malicious process into the target system that notifies the adversary when configuration is occurring.::STEP:3:PHASE:Experiment:DESCRIPTION:[Determine malicious data to inject] By looking at the configuration process, the adversary needs to determine what malicious data they want to insert and where to insert it.:TECHNIQUE:Add false log data:TECHNIQUE:Change configuration files:TECHNIQUE:Change data files::STEP:4:PHASE:Exploit:DESCRIPTION:[Inject malicious data] Right before, or during system configuration, the adversary injects the malicious data. This leads to the system behaving in a way that is beneficial to the adversary and is often followed by other attacks.::",::The attacker must have previously compromised the victim's systems or have physical access to the victim's systems.::Advanced knowledge of software and hardware capabilities of a manufacturer's product.::,::SKILL:Ability to generate and inject false data into operational data into a system with the intent of causing the victim to alter the configuration of the system.:LEVEL:High::,,,,::Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.::,"::An adversary wishes to bypass a security system to access an additional network segment where critical data is kept. The adversary knows that some configurations of the security system will allow for remote bypass under certain conditions, such as switching a specific parameter to a different value. The adversary knows the bypass will work but also will be detected within the logging data of the security system. The adversary waits until an upgrade is performed to the security system by the victim's system administrators, and the adversary has access to an external logging system. The adversary injects false log entries that cause the administrators to think there are two different error states within the security system - one involving the specific parameter and the other involving the logging entries. The specific parameter is adjusted to a different value, and the logging level is reduced to a lower level that will not cause an adversary bypass to be detected. The adversary stops injecting false log data, and the administrators of the security system believe the issues were caused by the upgrade and are now resolved. The adversary is then able to bypass the security system.::",::284::,,
Query System for Information,Standard,Draft,"An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.",,High,Low,::NATURE:ChildOf:CAPEC ID:116::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine parameters] Determine all user-controllable parameters of the application either by probing or by finding documentation::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause error condition] Inject each parameter with content that causes an error condition to manifest::STEP:3:PHASE:Experiment:DESCRIPTION:[Modify parameters] Modify the content of each parameter according to observed error conditions::STEP:4:PHASE:Exploit:DESCRIPTION:[Follow up attack] Once the above steps have been repeated with enough parameters, the application will be sufficiently mapped out. The adversary can then launch a desired attack (for example, Blind SQL Injection)::","::This class of attacks does not strictly require authorized access to the application. As Attackers use this attack process to classify, map, and identify vulnerable aspects of an application, it simply requires hypotheses to be verified, interaction with the application, and time to conduct trial-and-error activities.::","::SKILL:Although fuzzing parameters is not difficult, and often possible with automated fuzzers, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.:LEVEL:Medium::","::The Attacker needs the ability to probe application functionality and provide it erroneous directives or data without triggering intrusion detection schemes or making enough of an impact on application logging that steps are taken against the adversary. The Attack does not need special hardware, software, skills, or access.::","::Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any.::",::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,"::Application designers can construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.::Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.::","::Blind SQL injection is an example of this technique, applied to successful exploit. See also: CVE-2006-4705::Attacker sends bad data at various servlets in a J2EE system, records returned exception stack traces, and maps application functionality. In addition, this technique allows attackers to correlate those servlets used with the underlying open source packages (and potentially version numbers) that provide them.::",::209::,,
Overread Buffers,Standard,Draft,"An adversary attacks a target by providing input that causes an application to read beyond the boundary of a defined buffer. This typically occurs when a value influencing where to start or stop reading is set to reflect positions outside of the valid memory location of the buffer. This type of attack may result in exposure of sensitive information, a system crash, or arbitrary code execution.",,Low,High,::NATURE:ChildOf:CAPEC ID:123::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overread on. Adversaries often look for applications that accept user input and that perform manual memory management.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find attack vector] The adversary identifies an attack vector by looking for areas in the application where they can specify to read more data than is required.::STEP:3:PHASE:Exploit:DESCRIPTION:[Overread the buffer] The adversary provides input to the application that gets it to read past the bounds of a buffer, possibly revealing sensitive information that was not intended to be given to the adversary.::","::For this type of attack to be successful, a few prerequisites must be met. First, the targeted software must be written in a language that enables fine grained buffer control. (e.g., c, c++) Second, the targeted software must actually perform buffer operations and inadequately perform bounds-checking on those buffer operations. Finally, the adversary must have the capability to influence the input that guides these buffer operations.::",,,,"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:By reading outside the boundary of the intended buffer, the adversary is potentially able to see any data that is stored on the disk. This could include secret keys, personal information, and sensitive files.::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:Depending on the use of the target buffer, an application or system crash can be achieved.::",,,::125::,,
Application Fingerprinting,Standard,Draft,An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.,,,Low,::NATURE:ChildOf:CAPEC ID:224::,,::None::,,,,,,,::204::205::208::,TAXONOMY NAME:ATTACK:ENTRY ID:1592.002:ENTRY NAME:Gather Victim Host Information: Software::,
Targeted Malware,Standard,Draft,An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.,,,,::NATURE:ChildOf:CAPEC ID:549::NATURE:CanPrecede:CAPEC ID:662::,,,,,::Software being run on a system matches a file signature found in a malware database::A suspicious module is loaded that is not regularly loaded by a system::Software on a system is making calls to GetProcAddress() which is a commonly used function to implement dynamic API resolution::,,,,,TAXONOMY NAME:ATTACK:ENTRY ID:1587.001:ENTRY NAME:Develop Capabilities: Malware::::TAXONOMY NAME:ATTACK:ENTRY ID:1027:ENTRY NAME:Obfuscated Files or Information::,"TYPE:Other:NOTE:Adversaries often utilize obfuscation techniques when developing malware with the purpose of either avoiding detection or prevent the target from reverse engineering and understanding a captured malware sample. Some of these techniques include, but are not limited to, binary padding, software packing, stripping symbols and strings from a payload, and utilizing dynamic API resolution.::"
Pull Data from System Resources,Standard,Draft,"An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.",,,,::NATURE:ChildOf:CAPEC ID:116::,,,,,,,,,::1239::1243::1258::1266::1272::1278::1323::1258::1330::,TAXONOMY NAME:ATTACK:ENTRY ID:1005:ENTRY NAME:Data from Local System::::TAXONOMY NAME:ATTACK:ENTRY ID:1555.001:ENTRY NAME:Credentials from Password Stores:Keychain::,
Physical Destruction of Device or Component,Standard,Draft,"An adversary conducts a physical attack a device or component, destroying it such that it no longer functions as intended.",,,,::NATURE:ChildOf:CAPEC ID:607::,,,,,,,,,,,
Remote Services with Stolen Credentials,Standard,Stable,"This pattern of attack involves an adversary that uses stolen credentials to leverage remote services such as RDP, telnet, SSH, and VNC to log into a system. Once access is gained, any number of malicious activities could be performed.",,,Very High,::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::,,,,,,,"::Disable RDP, telnet, SSH and enable firewall rules to block such traffic. Limit users and accounts that have remote interactive login access. Remove the Local Administrators group from the list of groups allowed to login through RDP. Limit remote user permissions. Use remote desktop gateways and multifactor authentication for remote logins.::","::Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). There are other implementations and third-party tools that provide graphical access Remote Services similar to RDS. Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials.::Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell.::",::522::308::309::294::263::262::521::,TAXONOMY NAME:ATTACK:ENTRY ID:1021:ENTRY NAME:Remote Services::::TAXONOMY NAME:ATTACK:ENTRY ID:1114.002:ENTRY NAME:Email Collection:Remote Email Collection::::TAXONOMY NAME:ATTACK:ENTRY ID:1133:ENTRY NAME:External Remote Services::,
DEPRECATED: Removing/short-circuiting 'guard logic',Standard,Deprecated,This attack pattern has been deprecated as it is a duplicate of CAPEC-207 : Removing Important Client Functionality. Please refer to this other pattern going forward.,,,,,,,,,,,,,,,
DEPRECATED: Obtain Data via Utilities,Standard,Deprecated,"This CAPEC has been deprecated because it is not directly related to a weakness, social engineering, supply chains, or a physical-based attack.",,,,,,,,,,,,,,,
Collect Data as Provided by Users,Standard,Draft,"An attacker leverages a tool, device, or program to obtain specific information as provided by a user of the target system. This information is often needed by the attacker to launch a follow-on attack. This attack is different than Social Engineering as the adversary is not tricking or deceiving the user. Instead the adversary is putting a mechanism in place that captures the information that a user legitimately enters into a system. Deploying a keylogger, performing a UAC prompt, or wrapping the Windows default credential provider are all examples of such interactions.",,,,::NATURE:ChildOf:CAPEC ID:116::,,,,,,,,,,TAXONOMY NAME:ATTACK:ENTRY ID:1056:ENTRY NAME:Input Capture::,
Block Logging to Central Repository,Standard,Draft,An adversary prevents host-generated logs being delivered to a central location in an attempt to hide indicators of compromise.,,,Low,::NATURE:ChildOf:CAPEC ID:161::,,,,,,,,,,TAXONOMY NAME:ATTACK:ENTRY ID:1562.002:ENTRY NAME:Impair Defenses: Disable Windows Event Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.002:ENTRY NAME:Impair Defenses: Impair Command History Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.006:ENTRY NAME:Impair Defenses: Indicator Blocking::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.008:ENTRY NAME:Impair Defenses: Disable Cloud Logs::,
Artificially Inflate File Sizes,Standard,Draft,An adversary modifies file contents by adding data to files for several reasons. Many different attacks could “follow” this pattern resulting in numerous outcomes. Adding data to a file could also result in a Denial of Service condition for devices with limited storage capacity.,,High,Medium,::NATURE:ChildOf:CAPEC ID:165::,,,,,,::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::,,"::An adversary could potentially increase file sizes on devices containing limited storage resources, such as SCADA or IOT devices, resulting in denial of service conditions.::",,TAXONOMY NAME:ATTACK:ENTRY ID:1027.001:ENTRY NAME:Obfuscated Files or Information:Binary Padding::,
Process Footprinting,Standard,Stable,"An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.",,Low,Low,::NATURE:ChildOf:CAPEC ID:169::,,::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::,,,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::,"::On a Windows system, the command, tasklist, displays information about processes. The same function on a Mac OS system is done with the command, ps.::In addition to manual discovery of running processes, an adversary can develop malware that carries out this attack pattern before subsequent malicious action.::",::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1057:ENTRY NAME:Process Discovery::,
Services Footprinting,Standard,Stable,"An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include sc and tasklist/svc using Tasklist, and net start using Net.",,Low,Low,::NATURE:ChildOf:CAPEC ID:169::,,::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::,,,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,::Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.::,,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1007:ENTRY NAME:System Service Discovery::,
Account Footprinting,Standard,Stable,"An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: net user and dsquery.",,Low,Low,::NATURE:ChildOf:CAPEC ID:169::,,::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::,,,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,::Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.::,,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1087:ENTRY NAME:Account Discovery::,
Group Permission Footprinting,Standard,Stable,"An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is net localgroup.",,Low,Low,::NATURE:ChildOf:CAPEC ID:169::,,::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::,,,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,::Identify programs (such as net) that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.::,,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1069:ENTRY NAME:Permission Groups Discovery::::TAXONOMY NAME:ATTACK:ENTRY ID:1615:ENTRY NAME:Group Policy Discovery::,
Owner Footprinting,Standard,Draft,"An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is dir /A ntuser.dat. Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.",,Low,Low,::NATURE:ChildOf:CAPEC ID:169::,,::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::Administrator permissions are required to view the home folder of other users.::,,,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,::Ensure that proper permissions on files and folders are enacted to limit accessibility.::,,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1033:ENTRY NAME:System Owner/User Discovery::,
Disable Security Software,Standard,Usable,"An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.",,Medium,Medium,::NATURE:ChildOf:CAPEC ID:176::,,::The adversary must have the capability to interact with the configuration of the targeted system.::,,::None: No specialized resources are required to execute this type of attack.::,,"::SCOPE:Availability:TECHNICAL IMPACT:Hide Activities:NOTE:By disabling certain security tools, the adversary can hide malicious activity and avoid detection.::",::Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.::,,::284::,TAXONOMY NAME:ATTACK:ENTRY ID:1556.006:ENTRY NAME:Modify Authentication Process: Multi-Factor Authentication::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.001:ENTRY NAME:Impair Defenses: Disable or Modify Tools::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.002:ENTRY NAME:Impair Defenses: Disable Windows Event Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.004:ENTRY NAME:Impair Defenses: Disable or Modify System Firewall::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.007:ENTRY NAME:Impair Defenses: Disable or Modify Cloud Firewall::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.008:ENTRY NAME:Impair Defenses: Disable Cloud Logs::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.009:ENTRY NAME:Impair Defenses: Safe Mode Boot::,
System Footprinting,Standard,Stable,An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.,,Low,Low,::NATURE:ChildOf:CAPEC ID:169::,,::The adversary must have logical access to the target network and system.::,::SKILL:The adversary needs to know basic linux commands.:LEVEL:Low::,,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::,,::204::205::208::,TAXONOMY NAME:ATTACK:ENTRY ID:1082:ENTRY NAME:System Information Discovery::,
Route Disabling,Standard,Draft,"An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an Internet kill switch by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.",,Low,High,::NATURE:ChildOf:CAPEC ID:607::,,::The adversary requires knowledge of and access to network route.::,,,,::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Disabling a network route denies the availability of a service.::,,,,,
Session Hijacking,Standard,Stable,This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.,,High,Very High,::NATURE:ChildOf:CAPEC ID:21::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Discover Existing Session Token] Through varrying means, an adversary will discover and store an existing session token for some other authenticated user session.::STEP:2:PHASE:Experiment:DESCRIPTION:[Insert Found Session Token] The attacker attempts to insert a found session token into communication with the targeted application to confirm viability for exploitation.::STEP:3:PHASE:Exploit:DESCRIPTION:[Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.::",::An application that leverages sessions to perform authentication.::,::SKILL:Exploiting a poorly protected identity token is a well understood attack with many helpful resources available.:LEVEL:Low::,::The adversary must have the ability to communicate with the application over the network.::,,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful attack can enable an adversary to gain unauthorized access to an application.::,"::Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.::",,::287::,TAXONOMY NAME:ATTACK:ENTRY ID:1185:ENTRY NAME:Browser Session Hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1550.001:ENTRY NAME:Use Alternate Authentication Material:Application Access Token::::TAXONOMY NAME:ATTACK:ENTRY ID:1563:ENTRY NAME:Remote Service Session Hijacking::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Session hijacking attack::,
Connection Reset,Standard,Draft,"In this attack pattern, an adversary injects a connection reset packet to one or both ends of a target's connection. The attacker is therefore able to have the target and/or the destination server sever the connection without having to directly filter the traffic between them.",,,,::NATURE:ChildOf:CAPEC ID:594::,,::This attack requires the ability to monitor the target's network connection.::,,,,,,,::940::,,
Argument Injection,Standard,Draft,An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.,,High,High,::NATURE:ChildOf:CAPEC ID:137::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Discovery of potential injection vectors] Using an automated tool or manual discovery, the attacker identifies services or methods with arguments that could potentially be used as injection vectors (OS, API, SQL procedures, etc.).:TECHNIQUE:Manually cover the application and record the possible places where arguments could be passed into external systems.:TECHNIQUE:Use a spider, for web applications, to create a list of URLs and associated inputs.::STEP:2:PHASE:Experiment:DESCRIPTION:[1. Attempt variations on argument content] Possibly using an automated tool, the attacker will perform injection variations of the arguments.:TECHNIQUE:Use a very large list of probe strings in order to detect if there is a positive result, and, what type of system has been targeted (if obscure).:TECHNIQUE:Use a proxy tool to record results, error messages and/or log if accessible.::STEP:3:PHASE:Exploit:DESCRIPTION:[Abuse of the application] The attacker injects specific syntax into a particular argument in order to generate a specific malicious effect in the targeted application.:TECHNIQUE:Manually inject specific payload into targeted argument.::","::Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.::Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client.::","::SKILL:The attacker has to identify injection vector, identify the operating system-specific commands, and optionally collect the output.:LEVEL:Medium::","::Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::",,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,"::Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.::Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.::Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise.::","::A recent example instance of argument injection occurred against Java Web Start technology, which eases the client side deployment for Java programs. The JNLP files that are used to describe the properties for the program. The client side Java runtime used the arguments in the property setting to define execution parameters, but if the attacker appends commands to an otherwise legitimate property file, then these commands are sent to the client command shell. [REF-482]::",::74::146::184::78::185::697::,,
Credential Stuffing,Standard,Stable,"An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.",,High,High,::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:653::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.:TECHNIQUE:An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.:TECHNIQUE:An adversary conducts a sniffing attack to steal credentials as they are transmitted.:TECHNIQUE:An adversary gains access to a database and exfiltrates password hashes.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.:TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account).::STEP:3:PHASE:Experiment:DESCRIPTION:[Attempt authentication] Try each username/password combination until the target grants access.:TECHNIQUE:Manually or automatically enter each username/password combination through the target's interface.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.::","::The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.::The system/application does not have a sound password policy that is being enforced.::The system/application does not implement an effective password throttling mechanism.::The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.::",::SKILL:A Credential Stuffing attack is very straightforward.:LEVEL:Low::,"::A machine with sufficient resources for the job (e.g. CPU, RAM, HD).::A known list of username/password combinations.::A custom script that leverages the credential list to launch the attack.::",::Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.::The login attempts use passwords that have been used previously by the user account in question.::Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::,"::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.::Create a strong password policy and ensure that your system enforces this policy.::Ensure users are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse local administrator account credentials across systems.::Deny remote use of local admin credentials to log into domain systems.::Do not allow accounts to be a local administrator on more than one system.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Monitor system and domain logs for abnormal credential access.::","::A user leverages the password Password123 for a handful of application logins. An adversary obtains a victim's username/password combination from a breach of a social media application and executes a Credential Stuffing attack against multiple banking and credit card applications. Since the user leverages the same credentials for their bank account login, the adversary successfully authenticates to the user's bank account and transfer money to an offshore account.::In October 2014 J.P. Morgan's Corporate Challenge website was breached, resulting in adversaries obtaining multiple username/password pairs. A Credential Stuffing attack was then executed against J.P. Morgan Chase, which resulted in over 76 million households having their accounts compromised.::",::522::307::308::309::262::263::654::,TAXONOMY NAME:ATTACK:ENTRY ID:1110.004:ENTRY NAME:Brute Force:Credential Stuffing::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Credential stuffing::,
Jamming,Standard,Draft,"An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.",,Medium,High,::NATURE:ChildOf:CAPEC ID:607::,,,,,,::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:The jamming of equipment denies the availability of functioning communications services.::,,,,,
Blockage,Standard,Draft,An adversary blocks the delivery of an important system resource causing the system to fail or stop working.,,Medium,High,::NATURE:ChildOf:CAPEC ID:607::,,::This attack pattern requires knowledge of where important system resources are logically located as well as how they operate.::,,,,::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Blocking a resource from functional operation denies its availability to authorized users.::,,,,,
Cellular Data Injection,Standard,Stable,Adversaries inject data into mobile technology traffic (data flows or signaling data) to disrupt communications or conduct additional surveillance operations.,,,High,::NATURE:ChildOf:CAPEC ID:240::,,::None::,::SKILL:Often achieved by nation states in conjunction with commercial cellular providers to conduct cellular traffic intercept and possible traffic injection.:LEVEL:High::,,,"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Attackers can disrupt or deny mobile technology communications and operations.::SCOPE:Availability:TECHNICAL IMPACT:Modify Data:NOTE:Attackers can inject false data into data or signaling system data flows of communications and operations, or re-route data flows or signaling data for the purpose of further data intercept and capture.::",::Commercial defensive technology to detect and alert to any attempts to modify mobile technology data flows or to inject new data into existing data flows and signaling data.::,,,,
Establish Rogue Location,Standard,Stable,"An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.",,Medium,Medium,::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:691::,,::A resource is expected to available to the user.::,::SKILL:Adversaries can often purchase low-cost technology to implement rogue access points.:LEVEL:Low::,,,::SCOPE:Confidentiality:SCOPE:Integrity:TECHNICAL IMPACT:Other:NOTE:Successful attacks of this nature can result in a wide variety of consequences and negatively impact confidentiality and integrity based on the adversary's subsequent actions.::,,,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1036.005:ENTRY NAME:Masquerading: Match Legitimate Name or Location::,
Cross Site Request Forgery,Standard,Draft,"An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level. This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply riding the existing session cookie.",::TERM:Session Riding:DESCRIPTION:::,High,Very High,::NATURE:ChildOf:CAPEC ID:21::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Explore target website] The attacker first explores the target website to determine pieces of functionality that are of interest to them (e.g. money transfers). The attacker will need a legitimate user account on the target website. It would help to have two accounts.:TECHNIQUE:Use web application debugging tool such as WebScarab, Tamper Data or TamperIE to analyze the information exchanged between the client and the server:TECHNIQUE:Use network sniffing tool such as Wireshark to analyze the information exchanged between the client and the server:TECHNIQUE:View HTML source of web pages that contain links or buttons that perform actions of interest.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create a link that when clicked on, will execute the interesting functionality.] The attacker needs to create a link that will execute some interesting functionality such as transfer money, change a password, etc.:TECHNIQUE:Create a GET request containing all required parameters (e.g. https://www.somebank.com/members/transfer.asp?to=012345678901&amt=10000):TECHNIQUE:Create a form that will submit a POST request (e.g. <form method=POST action=https://www.somebank.com/members/transfer.asp><input type=hidden Name=to value=012345678901/><input type=hidden Name=amt value=10000/><input type=submit src=clickhere.jpg/></form>::STEP:3:PHASE:Exploit:DESCRIPTION:[Convince user to click on link] Finally, the attacker needs to convince a user that is logged into the target website to click on a link to execute the CSRF attack.:TECHNIQUE:Execute a phishing attack and send the user an e-mail convincing them to click on a link.:TECHNIQUE:Execute a stored XSS attack on a website to permanently embed the malicious link into the website.:TECHNIQUE:Execute a stored XSS attack on a website where an XMLHTTPRequest object will automatically execute the attack as soon as a user visits the page. This removes the step of convincing a user to click on a link.:TECHNIQUE:Include the malicious link on the attackers' own website where the user may have to click on the link, or where an XMLHTTPRequest object may automatically execute the attack when a user visits the site.::",,::SKILL:The attacker needs to figure out the exact invocation of the targeted malicious action and then craft a link that performs the said action. Having the user click on such a link is often accomplished by sending an email or posting such a link to a bulletin board or the likes.:LEVEL:Medium::,::All the attacker needs is the exact representation of requests to be made to the application and to be able to get the malicious link across to a victim.::,,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::,"::Use cryptographic tokens to associate a request with a specific action. The token can be regenerated at every request so that if a request with an invalid token is encountered, it can be reliably discarded. The token is considered invalid if it arrived with a request other than the action it was supposed to be associated with.::Although less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context.::Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.::In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.::","::While a user is logged into their bank account, an attacker can send an email with some potentially interesting content and require the user to click on a link in the email. The link points to or contains an attacker setup script, probably even within an iFrame, that mimics an actual user form submission to perform a malicious activity, such as transferring funds from the victim's account. The attacker can have the script embedded in, or targeted by, the link perform any arbitrary action as the authenticated user. When this script is executed, the targeted application authenticates and accepts the actions based on the victims existing session cookie.See also: Cross-site request forgery (CSRF) vulnerability in util.pl in @Mail WebMail 4.51 allows remote attackers to modify arbitrary settings and perform unauthorized actions as an arbitrary user, as demonstrated using a settings action in the SRC attribute of an IMG element in an HTML e-mail.::",::352::306::664::732::1275::,TAXONOMY NAME:WASC:ENTRY ID:09:ENTRY NAME:Cross-Site Request Forgery::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cross Site Request Forgery (CSRF)::,
Drop Encryption Level,Standard,Draft,"An attacker forces the encryption level to be lowered, thus enabling a successful attack against the encrypted data.",,,High,::NATURE:ChildOf:CAPEC ID:212::,,,,,,::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::,,,::757::,TAXONOMY NAME:ATTACK:ENTRY ID:1600:ENTRY NAME:Weaken Encryption::,
Mobile Device Fault Injection,Standard,Draft,"Fault injection attacks against mobile devices use disruptive signals or events (e.g. electromagnetic pulses, laser pulses, clock glitches, etc.) to cause faulty behavior. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information. Although this attack usually requires physical control of the mobile device, it is non-destructive, and the device can be used after the attack without any indication that secret keys were compromised.",,,,::NATURE:ChildOf:CAPEC ID:624::,,,"::SKILL:Adversaries require non-trivial technical skills to create and implement fault injection attacks on mobile devices. Although this style of attack has become easier (commercial equipment and training classes are available to perform these attacks), they usual require significant setup and experimentation time during which physical access to the device is required. This prerequisite makes the attack challenging to perform (assuming that physical security countermeasures and monitoring are in place).:LEVEL:High::",,,::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:NOTE:Extract long-term secret keys (e.g. keys used for VPN or WiFi authentication and encryption) to enable decryption of intercepted VOIP traffic.::,::Strong physical security of all devices that contain secret key information. (even when devices are not in use)::Frequent changes to secret keys and certificates.::,,::1247::1248::1256::1319::1332::1334::1338::1351::,,
Counterfeit GPS Signals,Standard,Draft,"An adversary attempts to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These spoofed signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.",,Low,High,::NATURE:ChildOf:CAPEC ID:148::,,::The target must be relying on valid GPS signal to perform critical operations.::,::SKILL:The ability to spoof GPS signals is not trival.:LEVEL:High::,::Ability to create spoofed GPS signals.::,,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::,,,,,
DEPRECATED: Unauthorized Use of Device Resources,Standard,Deprecated,This attack pattern has been deprecated.,,,,,,,,,,,,,,,
Cross-Site Scripting (XSS),Standard,Draft,"An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.",,High,Very High,::NATURE:ChildOf:CAPEC ID:242::NATURE:CanPrecede:CAPEC ID:107::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS vulnerability] The attacker uses the entry points gathered in the Explore phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.:TECHNIQUE:Use a list of XSS probe strings to inject script into UI entry fields. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a list of XSS probe strings to inject script into resources accessed by the application. If possible, the probe strings contain a unique identifier.::STEP:3:PHASE:Exploit:DESCRIPTION:[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.:TECHNIQUE:Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.::STEP:4:PHASE:Exploit:DESCRIPTION:[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site:TECHNIQUE:Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).::STEP:5:PHASE:Exploit:DESCRIPTION:[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.::","::Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.::","::SKILL:To achieve a redirection and use of less trusted source, an attacker can simply place a script in bulletin board, blog, wiki, or other user-generated content site that are echoed back to other client machines.:LEVEL:Low::SKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High::",::Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine.::,,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,"::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Session tokens for specific host::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::","::Classic phishing attacks lure users to click on content that appears trustworthy, such as logos, and links that seem to go to their trusted financial institutions and online auction sites. But instead the attacker appends malicious scripts into the otherwise innocent appearing resources. The HTML source for a standard phishing attack looks like this: <a href=www.exampletrustedsite.com?Name=<script>maliciousscript</script>>Trusted Site</a> When the user clicks the link, the appended script also executes on the local user's machine.::",::79::20::,TAXONOMY NAME:WASC:ENTRY ID:08:ENTRY NAME:Cross-Site Scripting::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cross Site Scripting (XSS)::,
Alternative Execution Due to Deceptive Filenames,Standard,Draft,"The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.",,,High,::NATURE:ChildOf:CAPEC ID:165::,,::The use of the file must be controlled by the file extension.::,,,,,"::Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.::",,::162::,TAXONOMY NAME:ATTACK:ENTRY ID:1036.007:ENTRY NAME:Masquerading: Double File Extension::,
Hiding Malicious Data or Code within Files,Standard,Draft,"Files on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.",,,High,::NATURE:ChildOf:CAPEC ID:165::,,::The operating system must support a file system that allows for alternate data storage for a file.::,,,,,::Many tools are available to search for the hidden data. Scan regularly for such data using one of these tools.::,,::506::,TAXONOMY NAME:ATTACK:ENTRY ID:1001.002:ENTRY NAME:Data Obfuscation: Steganography::::TAXONOMY NAME:ATTACK:ENTRY ID:1027.003:ENTRY NAME:Obfuscated Files or Information: Steganography::::TAXONOMY NAME:ATTACK:ENTRY ID:1027.004:ENTRY NAME:Obfuscated Files or Information: Compile After Delivery::::TAXONOMY NAME:ATTACK:ENTRY ID:1218.001:ENTRY NAME:Signed Binary Proxy Execution: Compiled HTML File::::TAXONOMY NAME:ATTACK:ENTRY ID:1221:ENTRY NAME:Template Injection::,
Peripheral Footprinting,Standard,Stable,"Adversaries may attempt to obtain information about attached peripheral devices and components connected to a computer system. Examples may include discovering the presence of iOS devices by searching for backups, analyzing the Windows registry to determine what USB devices have been connected, or infecting a victim system with malware to report when a USB device has been connected. This may allow the adversary to gain additional insight about the system or network environment, which may be useful in constructing further attacks.",,Low,Medium,::NATURE:ChildOf:CAPEC ID:169::,,::The adversary needs either physical or remote access to the victim system.::,"::SKILL:The adversary needs to be able to infect the victim system in a manner that gives them remote access.:LEVEL:Medium::SKILL:If analyzing the Windows registry, the adversary must understand the registry structure to know where to look for devices.:LEVEL:Medium::",,,,::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::,,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1120:ENTRY NAME:Peripheral Device Discovery::,
Eavesdropping,Standard,Draft,"An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.",,,Medium,::NATURE:ChildOf:CAPEC ID:117::,,"::The adversary typically requires physical proximity to the target's environment, whether for physical eavesdropping or for placing recording equipment. This is not always the case for software-based eavesdropping, if the adversary has the capability to install malware on the target system that can activate a microphone and record audio digitally.::",,"::For logical eavesdropping, some equipment may be necessary (e.g., microphone, tape recorder, etc.). For physical eavesdropping, only proximity is required.::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:The adversary gains unauthorized access to information.::,"::Be mindful of your surroundings when discussing sensitive information in public areas.::Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.::If possible, physically disable the microphone on your machine if it is not needed.::",,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1111:ENTRY NAME:Multi-Factor Authentication Interception::,
Use of Known Kerberos Credentials,Standard,Draft,"An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.",,Medium,High,::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known Kerberos credentials] The adversary must obtain known Kerberos credentials in order to access the target system, application, or service within the domain.:TECHNIQUE:An adversary purchases breached Kerberos service account username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary guesses the credentials to a weak Kerberos service account.:TECHNIQUE:An adversary conducts a sniffing attack to steal Kerberos tickets as they are transmitted.:TECHNIQUE:An adversary conducts a Kerberoasting attack.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt Kerberos authentication] Try each Kerberos credential against various resources within the domain until the target grants access.:TECHNIQUE:Manually or automatically enter each Kerberos service account credential through the target's interface.:TECHNIQUE:Attempt a Pass the Ticket attack.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications.::","::The system/application leverages Kerberos authentication.::The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication for Kerberos service accounts.::The system/application does not have a sound password policy that is being enforced for Kerberos service accounts.::The system/application does not implement an effective password throttling mechanism for authenticating to Kerberos service accounts.::The targeted network allows for network sniffing attacks to succeed.::","::SKILL:Once an adversary obtains a known Kerberos credential, leveraging it is trivial.:LEVEL:Low::",::A valid Kerberos ticket or a known Kerberos service account credential.::,::Authentication attempts use expired or invalid credentials.::Authentication attempts are originating from IP addresses or locations that are inconsistent with an account's normal IP addresses or locations.::Data is being transferred and/or removed from systems/applications within the network.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::,"::Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.::Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse Kerberos service account credentials across systems.::Deny remote use of Kerberos service account credentials to log into domain systems.::Do not allow Kerberos service accounts to be a local administrator on more than one system.::Enable at least AES Kerberos encryption for tickets.::Monitor system and domain logs for abnormal credential access.::","::Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]::PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]::",::522::307::308::309::262::263::654::294::836::,TAXONOMY NAME:ATTACK:ENTRY ID:1558:ENTRY NAME:Steal or Forge Kerberos Tickets::,"TYPE:Other:NOTE:Kerberos centers around a ticketing system that is used to request/grant access to resources and to then access the requested resources. If one of these tickets is acquired, an adversary could gain access to a specific resource; access any resource a user has privileges to access; gain access to services that use Kerberos as an authentication mechanism and generate tickets to access a particular resource and the system that hosts the resource; or generate Ticket Granting Tickets (TGTs) for any domain account within Active Directory.::"
Use of Known Operating System Credentials,Standard,Draft,"An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.",,High,High,::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known operating system credentials] The adversary must obtain known operating system credentials in order to access the target system, application, or service within the domain.:TECHNIQUE:An adversary purchases breached operating system username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.:TECHNIQUE:An adversary conducts a sniffing attack to steal operating system credentials as they are transmitted.:TECHNIQUE:An adversary gains access to a system/files and exfiltrates password hashes.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt authentication] Try each operating system credential against various systems, applications, and services within the domain until the target grants access.:TECHNIQUE:Manually or automatically enter each credential through the target's interface.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the network::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into other systems on the network. The adversary can also pose as a legitimate user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within system files or application configuration.::","::The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication.::The system/application does not have a sound password policy that is being enforced.::The system/application does not implement an effective password throttling mechanism.::The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.::","::SKILL:Once an adversary obtains a known credential, leveraging it is trivial.:LEVEL:Low::",::A list of known credentials for the targeted domain.::A custom script that leverages a credential list to launch an attack.::,::Authentication attempts use credentials that have been used previously by the account in question.::Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.::Data is being transferred and/or removed from systems/applications within the network.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::,"::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the network.::Create a strong password policy and ensure that your system enforces this policy.::Ensure users are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse local administrator account credentials across systems.::Deny remote use of local admin credentials to log into domain systems.::Do not allow accounts to be a local administrator on more than one system.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Monitor system and domain logs for abnormal credential access.::","::Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credentials from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]::Mimikatz, a post-exploitation Windows credential harvester, can be used to gather and exploit Windows credentials. This malware has been used in several known cyberattacks, such as the Petya Ransomeware attacks. [REF-576]::",::522::307::308::309::262::263::654::,,
SQL Injection,Standard,Draft,"This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.",,High,High,::NATURE:ChildOf:CAPEC ID:248::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey application] The attacker first takes an inventory of the functionality exposed by the application.:TECHNIQUE:Spider web sites for all available links:TECHNIQUE:Sniff network communications with application using a utility such as WireShark.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to SQL injection, attempt to inject characters that have special meaning in SQL (such as a single quote character, a double quote character, two hyphens, a parenthesis, etc.). The goal is to create a SQL query with an invalid syntax.:TECHNIQUE:Use web browser to inject input through text fields or through HTTP GET parameters.:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.:TECHNIQUE:Use network-level packet injection tools such as netcat to inject input:TECHNIQUE:Use modified client (modified by reverse engineering) to inject input.::STEP:3:PHASE:Experiment:DESCRIPTION:[Experiment with SQL Injection vulnerabilities] After determining that a given input is vulnerable to SQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, or to modify or delete information in the database.:TECHNIQUE:Use public resources such as SQL Injection Cheat Sheet at http://ferruh.mavituna.com/makale/sql-injection-cheatsheet/, and try different approaches for adding logic to SQL queries.:TECHNIQUE:Add logic to query, and use detailed error messages from the server to debug the query. For example, if adding a single quote to a query causes an error message, try : ' OR 1=1; --, or something else that would syntactically complete a hypothesized query. Iteratively refine the query.:TECHNIQUE:Use Blind SQL Injection techniques to extract information about the database schema.:TECHNIQUE:If a denial of service attack is the goal, try stacking queries. This does not work on all platforms (most notably, it does not work on Oracle or MySQL). Examples of inputs to try include: '; DROP TABLE SYSOBJECTS; -- and '); DROP TABLE SYSOBJECTS; --. These particular queries will likely not work because the SYSOBJECTS table is generally protected.::STEP:4:PHASE:Exploit:DESCRIPTION:[Exploit SQL Injection vulnerability] After refining and adding various logic to SQL queries, craft and execute the underlying SQL query that will be used to attack the target system. The goal is to reveal, modify, and/or delete database data, using the knowledge obtained in the previous step. This could entail crafting and executing multiple SQL queries if a denial of service attack is the intent.:TECHNIQUE:Craft and Execute underlying SQL query::","::SQL queries used by the application to store, retrieve or modify data.::User-controllable input that is not properly validated by the application as part of SQL queries.::","::SKILL:It is fairly simple for someone with basic SQL knowledge to perform SQL injection, in general. In certain instances, however, specific knowledge of the database employed may be required.:LEVEL:Low::",::None: No specialized resources are required to execute this type of attack.::,"::Too many false or invalid queries to the database, especially those caused by malformed input.::",::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.::Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::","::With PHP-Nuke versions 7.9 and earlier, an attacker can successfully access and modify data, including sensitive contents such as usernames and password hashes, and compromise the application through SQL Injection. The protection mechanism against SQL Injection employs a denylist approach to input validation. However, because of an improper denylist, it is possible to inject content such as foo'/**/UNION or foo UNION/**/ to bypass validation and glean sensitive information from the database. See also: CVE-2006-5525::",::89::1286::,TAXONOMY NAME:WASC:ENTRY ID:19:ENTRY NAME:SQL Injection::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:SQL Injection::,
Adversary in the Browser (AiTB),Standard,Stable,"An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints.",::TERM:Man in the Browser:DESCRIPTION:::TERM:Boy in the Browser:DESCRIPTION:::TERM:Man in the Mobile:DESCRIPTION:::,High,Very High,::NATURE:ChildOf:CAPEC ID:94::,"::STEP:1:PHASE:Experiment:DESCRIPTION:The adversary tricks the victim into installing the Trojan Horse malware onto their system.:TECHNIQUE:Conduct phishing attacks, drive-by malware installations, or masquerade malicious browser extensions as being legitimate.::STEP:2:PHASE:Experiment:DESCRIPTION:The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.::STEP:3:PHASE:Exploit:DESCRIPTION:The adversary observes, filters, or alters passed data of their choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.::","::The adversary must install or convince a user to install a Trojan.::There are two components communicating with each other.::An attacker is able to identify the nature and mechanism of communication between the two target components.::Strong mutual authentication is not used between the two target components yielding opportunity for adversarial interposition.::For browser pivoting, the SeDebugPrivilege and a high-integrity process must both exist to execute this attack.::","::SKILL:Tricking the victim into installing the Trojan is often the most difficult aspect of this attack. Afterwards, the remainder of this attack is fairly trivial.:LEVEL:Medium::",,,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,"::Ensure software and applications are only downloaded from legitimate and reputable sources, in addition to conducting integrity checks on the downloaded component.::Leverage anti-malware tools, which can detect Trojan Horse malware.::Use strong, out-of-band mutual authentication to always fully authenticate both ends of any communications channel.::Limit user permissions to prevent browser pivoting.::Ensure browser sessions are regularly terminated and when their effective lifetime ends.::","::An adversary conducts a phishing attack and tricks a victim into installing a malicious browser plugin. The adversary then positions themself between the victim and their banking institution. The victim begins by initiating a funds transfer from their personal savings to their personal checking account. Using injected JavaScript, the adversary captures this request and modifies it to transfer an increased amount of funds to an account that they controls, before sending it to the bank. The bank processes the transfer and sends the confirmation notice back to the victim, which is instead intercepted by the adversary. The adversary modifies the confirmation to reflect the original transaction details and sends this modified message back to the victim. Upon receiving the confirmation, the victim assumes the transfer was successful and is unaware that their money has just been transferred to the adversary.::In 2020, the Agent Tesla malware was leveraged to conduct AiTB attacks against organizations within the gas, oil, and other energy sectors. The malware was delivered via a spearphishing campaign and has the capability to form-grab, keylog, copy clipboard data, extract credentials, and capture screenshots. [REF-630]::Boy in the browser attacks are a subset of AiTB attacks. Similar to AiTB attacks, the adversary must first trick the victim into installing a Trojan, either via social engineering or drive-by-download attacks. The malware then modifies the victim's hosts file in order to reroute web traffic from an intended website to an adversary-controlled website that mimics the legitimate website. The adversary is now able to observe, intercept, and/or modify all traffic, as in a traditional Adversary in the Middle attack (CAPEC-94). BiTB attacks are low-cost, easy to execute, and more difficult to detect since the malware often removes itself once the attack has concluded. [REF-631]::Man in the Mobile attacks are a subset of AiTB attacks that target mobile device users. Like AiTB attacks, an adversary convinces a victim to install a Trojan mobile application on their mobile device, often under the guise of security. Once the victim has installed the application, the adversary can capture all SMS traffic to bypass SMS-based out-of-band authentication systems. [REF-632]::",::300::494::,TAXONOMY NAME:ATTACK:ENTRY ID:1185:ENTRY NAME:Man in the Browser::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Man-in-the-browser attack::,
Exploitation of Transient Instruction Execution,Standard,Stable,"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.",,Low,Very High,::NATURE:ChildOf:CAPEC ID:74::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:141::NATURE:PeerOf:CAPEC ID:212::NATURE:PeerOf:CAPEC ID:124::NATURE:PeerOf:CAPEC ID:180::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey target application and relevant OS shared code libraries] Adversary identifies vulnerable transient instruction sets and the code/function calls to trigger them as well as instruction sets or code fragments (gadgets) to perform attack.:TECHNIQUE:Utilize Disassembler and Debugger tools to examine and trace instruction set execution of source code and shared code libraries on a system.::STEP:2:PHASE:Explore:DESCRIPTION:[Explore cache and identify impacts] Utilize tools to understand the impact of transient instruction execution upon address spaces and CPU operations.:TECHNIQUE:Run OS or application specific tools that examine the contents of cache.::STEP:1:PHASE:Experiment:DESCRIPTION:[Cause conditions for identified transient instruction set execution] Adversary ensures that specific code/instructions of the target process are executed by CPU, so desired transient instructions are executed.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause specific secret data to be cached from restricted address space] Executed instruction sets (gadgets) in target address space, initially executed via adversary-chosen transient instructions sets, establish covert channel and transfer secret data across this channel to cache.:TECHNIQUE:Prediction-based - adversary trains CPU to incorrectly predict/speculate conditions for instruction execution to be true, hence executing adversary-chosen transient instructions. These prediction-based methods include: Pattern History Table (PHT)/Input Validation Bypass, Branch Target Buffer (BTB)/Branch Target Injection, Return Stack Buffer (RSB)/Return Address Injection, and Store To Load (STL)/Speculative Store Bypass.:TECHNIQUE:Exception/Fault-based - adversary has CPU execute transient instructions that raise an exception allowing inaccessible memory space to be accessed via out-of-order execution. These exception/fault-based methods include: Supervisor-only Bypass, Virtual Translation Bypass, System Register Bypass, FPU Register Bypass, Read-only Bypass, Protection Key Bypass, and Bounds Check Bypass.::STEP:1:PHASE:Exploit:DESCRIPTION:[Perform covert channel attack to obtain/access secret data] Adversary process code removes instructions/data from shared cache set, waits for target process to reinsert them back into cache, to identify location of secret data via a timing method. Adversary continuously repeat this process to identify and access entirety of targeted secret data.:TECHNIQUE:Flush+Reload - adversary frequently flushes targeted memory cache line using a dedicated machine flush instruction, and uses another process to measure time taken for CPU to load victim secret data.:TECHNIQUE:Evict+Time - adversary causes victim to load target set into cache and measures time for victim process to load this data, setting a baseline. Adversary evicts a specified cache line and causes victim process to execute again, and measures any change in execution time, to determine if cache line was accessed.:TECHNIQUE:Prime+Probe - adversary primes cache by filling cache line(s) or set(s) with data, after some time victim process evicts this adversary data to replace it with secret data. The adversary then probes/accesses all the previously accessed cache lines detecting cache misses, which determine that their attacker data has been evicted and replaced with secret data from victim process.::",::The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU.::,"::SKILL:Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations.:LEVEL:High::SKILL:Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage.:LEVEL:High::","::C2C mechanism or direct access to victim system, capable of dropping malicious program and collecting covert channel attack data.::Malicious program capable of triggering execution of transient instructions or vulnerable instruction sequences of victim program and performing a covert channel attack to gather data from victim process memory space. Ultimately, the speed with which an attacker discovers a secret is directly proportional to the computational resources of the victim machine.::",::File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution::,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::,::Implementation: DAWG (Dynamically Allocated Way Guard) - processor cache properly divided between different programs/processes that don't share resources::Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables::Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution::Configuration: Disable SharedArrayBuffer for Web Browsers::Configuration: Disable Copy-on-Write between Cloud VMs::Configuration: Privilege Checks on Cache Flush Instructions::Implementation: Non-inclusive Cache Memories to prevent Flush+Reload Attacks::,"::A web browser with user-privileges executes JavaScript code imbedded within a malicious website. The system does not disable shared buffers for the web browser and there is no restriction or check upon user-process execution of flush or evict instructions. The Javascript code executes vulnerable transient instructions upon system to cause microarchitectural changes that establish covert channel and transfer sensitive/secret data into shared cache from address space of either kernel, web browser or another executing process on the system.::",::1037::1303::1264::,,
Server Side Request Forgery,Standard,Stable,"An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server’s internal network, or to external third parties. If successful, the adversary’s request will be made with the server’s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server’s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.",,High,High,::NATURE:ChildOf:CAPEC ID:115::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find target application] Find target web application that accepts a user input and retrieves data from the server::STEP:2:PHASE:Experiment:DESCRIPTION:[Examine existing application requests] Examine HTTP/GET requests to view the URL query format. Adversaries test to see if this type of attack is possible through weaknesses in an application's protection to Server Side Request Forgery:TECHNIQUE:Attempt manipulating the URL to retrieve an error response/code from the server to determine if URL/request validation is done.:TECHNIQUE:Use a list of XSS probe strings to specify as parameters to known URLs. If possible, use probe strings with unique identifiers.:TECHNIQUE:Create a GET request with a common server file path such as /etc/passwd as a parameter and examine output.::STEP:3:PHASE:Exploit:DESCRIPTION:[Malicious request] Adversary crafts a malicious URL request that assumes the privilege level of the server to query internal or external network services and sends the request to the application::",::Server must be running a web application that processes HTTP requests.::,"::SKILL:The adversary will have to detect the vulnerability through an intermediary service or specify maliciously crafted URLs and analyze the server response.:LEVEL:Medium::SKILL:The adversary will be required to access internal resources, extract information, or leverage the services running on the server to perform unauthorized actions such as traversing the local network or routing a reflected TCP DDoS through them.:LEVEL:High::",::[None] No specialized resources are required to execute this type of attack.::,,::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::,"::Handling incoming requests securely is the first line of action to mitigate this vulnerability. This can be done through URL validation.::Further down the process flow, examining the response and verifying that it is as expected before sending would be another way to secure the server.::Allowlist the DNS name or IP address of every service the web application is required to access is another effective security measure. This ensures the server cannot make external requests to arbitrary services.::Requiring authentication for local services adds another layer of security between the adversary and internal services running on the server. By enforcing local authentication, an adversary will not gain access to all internal services only with access to the server.::Enforce the usage of relevant URL schemas. By limiting requests be made only through HTTP or HTTPS, for example, attacks made through insecure schemas such as file://, ftp://, etc. can be prevented.::","::An e-commerce website allows a customer to filter results by specific categories. When the customer selects the category of choice, the web shop queries a back-end service to retrieve the requested products. The request may look something like: POST /product/category HTTP/1.0 Content-Type: application/x-www-form-urlencoded Content-Length: 200 vulnerableService=http://vulnerableshop.net:8080/product/category/check%3FcategoryName%3DsomeCategory A malicious user can modify the request URL to look like this instead: POST /product/category HTTP/1.0 Content-Type: application/x-www-form-urlencoded Content-Length: 200 vulnerableService=http://localhost/server-status or vulnerableService = file:///etc/passwd or vulnerableService=dict://localhost:12345/info If the exploit is successful, the server may return the data requested by the adversary root:!:0:0::/:/usr/bin/ksh daemon:!:1:1::/etc: bin:!:2:2::/bin: sys:!:3:3::/usr/sys: adm:!:4:4::/var/adm: uucp:!:5:5::/usr/lib/uucp: guest:!:100:100::/home/guest: nobody:!:4294967294:4294967294::/: lpd:!:9:4294967294::/: lp:*:11:11::/var/spool/lp:/bin/false invscout:*:200:1::/var/adm/invscout:/usr/bin/ksh nuucp:*:6:5:uucp login user:/var/spool/uucppublic:/usr/sbin/uucp/uucico paul:!:201:1::/home/paul:/usr/bin/ksh jdoe:*:202:1:My name:/home/myname:/usr/bin/ksh::The CallStranger attack is an observed example of SSRF. It specifically targets the UPnP (Universal Plug and Play) protocol used by various network devices and gaming consoles. To execute the attack, an adversary performs a scan of the LAN to discover UPnP enabled devices, and subsequently a list of UPnP services they use. Once the UPnP service endpoints are listed, a vulnerability in the UPnP protocol is used to send these endpoints as encrypted to a verification server via the UPnP Callback method. Because the encryption is done on the client side, the server returns an encrypted list of services which is decrypted on the client side. The adversary then has a list of services running the vulnerable UPnP protocol, which the adversary can leverage to make spoofed requests. [REF-646]::",::918::20::,,
BlueSmacking,Standard,Draft,An adversary uses Bluetooth flooding to transfer large packets to Bluetooth enabled devices over the L2CAP protocol with the goal of creating a DoS. This attack must be carried out within close proximity to a Bluetooth enabled device.,,Medium,Medium,::NATURE:ChildOf:CAPEC ID:125::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Scan for Bluetooth Enabled Devices] Using BlueZ along with an antenna, an adversary searches for devices with Bluetooth on.:TECHNIQUE:Note the MAC address of the device you want to attack.::STEP:2:PHASE:Experiment:DESCRIPTION:[Change L2CAP Packet Length] The adversary must change the L2CAP packet length to create packets that will overwhelm a Bluetooth enabled device.:TECHNIQUE:An adversary downloads and installs BlueZ, the standard Bluetooth utility package for Linux.::STEP:3:PHASE:Exploit:DESCRIPTION:[Flood] An adversary sends the packets to the target device, and floods it until performance is degraded.::",::The system/application has Bluetooth enabled.::,"::SKILL:An adversary only needs a Linux machine along with a Bluetooth adapter, which is extremely common.:LEVEL:Low::",,::Performance is degraded or halted by incoming L2CAP packets.::,::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption::,"::Disable Bluetooth when not being used.::When using Bluetooth, set it to hidden or non-discoverable mode.::",,::404::,TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service: Direct Network Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1499.001:ENTRY NAME:Endpoint Denial of Service: OS Exhaustion Flood::,
Key Negotiation of Bluetooth Attack (KNOB),Standard,Draft,"An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",,Low,High,::NATURE:ChildOf:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:148::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Discovery] Using an established Person in the Middle setup, search for Bluetooth devices beginning the authentication process.:TECHNIQUE:Use packet capture tools.::STEP:2:PHASE:Experiment:DESCRIPTION:[Change the entropy bits] Upon recieving the initial key negotiation packet from the master, the adversary modifies the entropy bits requested to 1 to allow for easy decryption before it is forwarded.::STEP:3:PHASE:Exploit:DESCRIPTION:[Capture and decrypt data] Once the entropy of encryption is known, the adversary can capture data and then decrypt on their device.::",::Person in the Middle network setup.::,::SKILL:Ability to modify packets.:LEVEL:Medium::,"::Bluetooth adapter, packet capturing capabilities.::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::,::Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.::,"::Given users Alice, Bob and Charlie (Charlie being the attacker), Alice and Bob begin to agree on an encryption key when connecting. While Alice sends a message to Bob that an encryption key with 16 bytes of entropy should be used, Charlie changes this to 1 and forwards the request to Bob and continues forwarding these packets until authentication is successful.::",::425::285::693::,TAXONOMY NAME:ATTACK:ENTRY ID:1565.002:ENTRY NAME:Data Manipulation: Transmitted Data Manipulation::,
Alteration of a Software Update,Standard,Draft,"An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",,Medium,High,::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:673::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify software with frequent updates] The adversary must first identify a target software that has updates at least with some frequency, enough that there is am update infrastructure.::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain access to udpate infrastructure] The adversary must then gain access to the organization's software update infrastructure. This can either be done by gaining remote access from outside the organization, or by having a malicious actor inside the organization gain access. It is often easier if someone within the organization gains access.::STEP:3:PHASE:Exploit:DESCRIPTION:[Alter the software update] Through access to the software update infrastructure, an adversary will alter the software update by injecting malware into the content of an outgoing update.::",::An adversary would need to have penetrated an organization’s software update infrastructure including gaining access to components supporting the configuration management of software versions and updates related to the software maintenance of customer systems.::,"::SKILL:Skills required include the ability to infiltrate the organization’s software update infrastructure either from the Internet or from within the organization, including subcontractors, and be able to change software being delivered to customer/user systems in an undetected manner.:LEVEL:High::",,,::SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,"::Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.::Require elevated privileges for distribution of software and software updates.::",::A subcontractor to a software developer injects maliciously altered software updates into an automated update process that distributes to government and commercial customers software containing a hidden backdoor.::,,TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::,
Retrieve Data from Decommissioned Devices,Standard,Stable,"An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",,Medium,Medium,::NATURE:ChildOf:CAPEC ID:116::NATURE:CanPrecede:CAPEC ID:37::,,"::An adversary needs to have access to electronic data processing equipment being recycled or disposed of (e.g., laptops, servers) at a collection location and the ability to take control of it for the purpose of exploiting its content.::","::SKILL:An adversary may need the ability to mount printed circuit boards and target individual chips for exploitation.:LEVEL:High::SKILL:An adversary needs the technical skills required to extract solid state drives, hard disk drives, and other storage media to host on a compatible system or harness to gain access to digital content.:LEVEL:Medium::",,,::SCOPE:Accountability:TECHNICAL IMPACT:Bypass Protection Mechanism::,"::Backup device data before erasure to retain intellectual property and inside knowledge.::Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.::Use a secure erase software.::Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.::Physically destroy memory and SIM cards for mobile devices not intended to be reused.::Ensure that the user account has been terminated or switched to a new device before destroying.::","::A company is contracted by an organization to provide data destruction services for solid state and hard disk drives being discarded. Prior to destruction, an adversary within the contracted company copies data from select devices, violating the data confidentiality requirements of the submitting organization.::",::1266::,TAXONOMY NAME:ATTACK:ENTRY ID:1052:ENTRY NAME:Exfiltration Over Physical Medium::,
NoSQL Injection,Standard,Stable,"An adversary targets software that constructs NoSQL statements based on user input or with parameters vulnerable to operator replacement in order to achieve a variety of technical impacts such as escalating privileges, bypassing authentication, and/or executing code.",,High,High,::NATURE:ChildOf:CAPEC ID:248::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey target application] Due to the number of NoSQL databases available and the numerous language/API combinations of each, the adversary must first survey the target application to learn what technologies are being leveraged and how they interact with user-driven data.:TECHNIQUE:Determine the technology stack leveraged by the target application, such as the application server, drivers, frameworks, APIs, and databases being utilized.:TECHNIQUE:Identify areas of the application that interact with user input and may be involved with NoSQL queries.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify user-controllable input susceptible to injection] After identifying the technology stack being used and where user-driven input is leveraged, determine the user-controllable input susceptible to injection such as authentication or search forms. For each user-controllable input that the adversary suspects is vulnerable to NoSQL injection, attempt to inject characters or keywords that have special meaning in the given NoSQL database or language (e.g., $ne for MongoDB or $exists for PHP/MongoDB), or JavaScript that can be executed within the application. The goal is to create a NoSQL query with an invalid syntax.:TECHNIQUE:Use web browser to inject input through text fields or through HTTP GET parameters.:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.:TECHNIQUE:Use network-level packet injection tools such as netcat to inject input:TECHNIQUE:Use modified client (modified by reverse engineering) to inject input.::STEP:3:PHASE:Experiment:DESCRIPTION:[Experiment with NoSQL Injection vulnerabilities] After determining that a given input is vulnerable to NoSQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, modify/delete information in the database, or execute commands on the server.:TECHNIQUE:Use public resources such as OWASP's Testing for NoSQL Injection [REF-668] or Null Sweep's NoSQL Injection Cheatsheet [REF-669] and try different approaches for adding logic to NoSQL queries.:TECHNIQUE:Iteratively add logic to the NoSQL query and use detailed error messages from the server to debug the query.:TECHNIQUE:Attempt an HTTP Parameter Pollution attack to replace language-specific keywords, such as where within PHP [CAPEC-460].::STEP:4:PHASE:Exploit:DESCRIPTION:[Exploit NoSQL Injection vulnerability] After refining and adding various logic to NoSQL queries, craft and execute the underlying NoSQL query that will be used to attack the target system.:TECHNIQUE:Craft and Execute underlying NoSQL query::","::Awareness of the technology stack being leveraged by the target application.::NoSQL queries used by the application to store, retrieve, or modify data.::User-controllable input that is not properly validated by the application as part of NoSQL queries.::Target potentially susceptible to operator replacement attacks.::","::SKILL:For keyword and JavaScript injection attacks, it is fairly simple for someone with basic NoSQL knowledge to perform NoSQL injection, once the target's technology stack has been determined.:LEVEL:Low::SKILL:For operator replacement attacks, the adversary must also have knowledge of HTTP Parameter Pollution attacks and how to conduct them.:LEVEL:Medium::",::None: No specialized resources are required to execute this type of attack.::,"::Too many false or invalid queries to the database, especially those caused by malformed input.::Executed queries or commands that appear to malicious in nature or originating from an untrustworthy source.::",::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as relevant NoSQL and JavaScript content. NoSQL-specific keywords, such as $ne, $eq or $gt for MongoDB, must be filtered in addition to characters such as a single-quote(') or semicolons (;) based on the context in which they appear. Validation should also extend to expected types.::If possible, leverage safe APIs (e.g., PyMongo and Flask-PyMongo for Python and MongoDB) for queries as opposed to building queries from strings.::Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.::Use of custom error pages - Adversaries can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::Exercise the principle of Least Privilege with regards to application accounts to minimize damage if a NoSQL injection attack is successful.::If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as mongo-sanitize.::If using PHP with MongoDB, ensure all special query operators (starting with $) use single quotes to prevent operator replacement attacks.::Additional mitigations will depend on the NoSQL database, API, and programming language leveraged by the application.::","::The following examples primarily cite MongoDB, PHP, and NodeJS attacks due to their prominence and popularity. However, please note that these attacks are not exclusive to this NoSQL instance, programming language, or runtime framework. Within NodeJS, Login Bypass attacks are possible via MongoDB if user-input is not properly validated and sanitized [REF-670]. //NodeJS with Express.jsdb.collection('users').find({user: req.query.user,password: req.query.password}); The above code works fine if the user were to submit a query like the following: https://example.org/login?user=patrick&password=1234 But an adversary could submit a malicious query such as the below, which would be interpreted by the code as follows: https://example.org/login?user=patrick&password[$ne]= //NodeJS with Express.jsdb.collection('users').find({user: bob,password: {&ne: }}); This will result in a Login Bypass attack, as the query will succeed for all values where Bob's password is not an empty string.::MongoDB instances are also vulnerable to JavaScript Injection Attacks when user input is not properly validated and sanitized. //PHP with MongoDBdb.collection.find({$where: function() {return (this.username == $username) } } ); If the user properly specifies a username, then this code will execute as intended. However, an adversary can inject JavaScript into the $username variable to achieve a NoSQL Injection attack as follows: //PHP with MongoDBdb.collection.find({$where: function() {return (this.username == 'foo'; sleep(5000) ) } } ); This will result in the server sleeping for 5 seconds if the attack was successful. An adversary could supply a larger value to deny service to the application.::If leveraging PHP with MongoDB, operator replacement attacks are possible if special query operators are not properly addressed. The below example from OWASP's Test for NoSQL Injection displays a simple case of how this could occur.[REF-668] db.myCollection.find({$where: function() {return obj.credits - obj.debits < 0; } } ); Even though the above query does not depend on any user input, it is vulnerable to a NoSQL injection attack via operator replacement on the $where keyword. In this case, the adversary could exploit MongoDB in the following manner: $where: function() { //arbitrary JavaScript here }::",::943::1286::,,
Subvert Code-signing Facilities,Standard,Draft,Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.,,Low,Very High,::NATURE:ChildOf:CAPEC ID:233::,,"::A framework-based language that supports code signing (such as, and most commonly, Java or .NET)::Deployed code that has been signed by its authoring vendor, or a partner.::The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated.::","::SKILL:Subverting code signing is not a trivial activity. Most code signing and verification schemes are based on use of cryptography and the attacker needs to have an understanding of these cryptographic operations in good detail. Additionally the attacker also needs to be aware of the way memory is assigned and accessed by the container since, often, the only way to subvert code signing would be to patch the code in memory. Finally, a knowledge of the platform specific mechanisms of signing and verifying code is a must.:LEVEL:High::",::The Attacker needs no special resources beyond the listed prerequisites in order to conduct this style of attack.::,,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.::If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.::","::In old versions (prior to 3.0b4) of the Netscape web browser Attackers able to foist a malicious Applet into a client's browser could execute the Magic Coat attack. In this attack, the offending Applet would implement its own getSigners() method. This implementation would use the containing VM's APIs to acquire other Applet's signatures (by calling _their_ getSigners() method) and if any running Applet had privileged-enough signature, the malicious Applet would have inherited that privilege just be (metaphorically) donning the others' coats.::Some (older) web browsers allowed scripting languages, such as JavaScript, to call signed Java code. In these circumstances, the browser's VM implementation would choose not to conduct stack inspection across language boundaries (from called signed Java to calling JavaScript) and would short-circuit true at the language boundary. Doing so meant that the VM would allow any (unprivileged) script to call privileged functions within signed code with impunity, causing them to fall prey to luring attacks.::The ability to load unsigned code into the kernel of earlier versions of Vista and bypass integrity checking is an example of such subversion. In the proof-of-concept, it is possible to bypass the signature-checking mechanism Vista uses to load device drivers.::",::325::328::1326::,TAXONOMY NAME:ATTACK:ENTRY ID:1553.002:ENTRY NAME:Subvert Trust Controls: Code Signing::,
Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities,Standard,Draft,"An adversary may exploit vulnerable code (i.e., firmware or ROM) that is unpatchable. Unpatchable devices exist due to manufacturers intentionally or inadvertently designing devices incapable of updating their software. Additionally, with updatable devices, the manufacturer may decide not to support the device and stop making updates to their software.",,Medium,High,::NATURE:ChildOf:CAPEC ID:212::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine vulnerable firmware or ROM code] An adversary will attempt to find device models that are known to have unpatchable firmware or ROM code, or are deemed “end-of-support” where a patch will not be made. The adversary looks for vulnerabilities in firmware or ROM code for the identified devices, or looks for devices which have known vulnerabilities:TECHNIQUE:Many botnets use wireless scanning to discover nearby devices that might have default credentials or commonly used passwords. Once these devices are infected, they can search for other nearby devices and so on.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine plan of attack] An adversary identifies a specific device/model that they wish to attack. They will also investigate similar devices to determine if the vulnerable firmware or ROM code is also present.::STEP:3:PHASE:Exploit:DESCRIPTION:[Carry out attack] An adversary exploits the vulnerable firmware or ROM code on the identified device(s) to achieve their desired goal.:TECHNIQUE:Install malware on a device to recruit it for a botnet.:TECHNIQUE:Install malware on the device and use it for a ransomware attack.:TECHNIQUE:Gain root access and steal information stored on the device.:TECHNIQUE:Manipulate the device to behave in unexpected ways which would benefit the adversary.::","::Awareness of the hardware being leveraged.::Access to the hardware being leveraged, either physically or remotely.::",::SKILL:Knowledge of various wireless protocols to enable remote access to vulnerable devices:LEVEL:Medium::SKILL:Ability to identify physical entry points such as debug interfaces if the device is not being accessed remotely:LEVEL:High::,,,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,::Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.::Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means::,"::An IoT company comes out with a line of smart products for home use such as home cameras, vacuums, and smart bulbs. The products become popular, and millions of consumers install these devices in their homes. All the devices use a custom module for encryption that is stored on a ROM chip, which is immutable memory and can't be changed. An adversary discovers that there is a vulnerability in the encryption module code that allows authentication bypass, gaining access to any device. The adversary then develops botnet code that is remotely downloaded onto the infected devices. This code scans the internet for nearby devices from the same product line and exploits the vulnerability, loading the botnet code onto these new devices. Over time, the adversary now has a botnet of devices that can carry out malicious activity such as a DDoS attacks. Once the vulnerability is found, it is impossible to remediate because the vulnerable code is unable to be updated.::Older smartphones can become out of date and manufacturers may stop putting out security updates as they focus on newer models. If an adversary discovers a vulnerability in an old smartphone there is a chance that a security update will not be made to mitigate it. This leaves anyone using the old smartphone vulnerable.::",::1277::1310::,,
Target Programs with Elevated Privileges,Standard,Draft,This attack targets programs running with elevated privileges. The adversary tries to leverage a vulnerability in the running program and get arbitrary code to execute with elevated privileges.,,High,Very High,::NATURE:ChildOf:CAPEC ID:233::NATURE:CanPrecede:CAPEC ID:8::NATURE:CanPrecede:CAPEC ID:9::NATURE:CanPrecede:CAPEC ID:10::NATURE:CanPrecede:CAPEC ID:67::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find programs with elevated priveleges] The adversary probes for programs running with elevated privileges.:TECHNIQUE:Look for programs that write to the system directories or registry keys (such as HKLM, which stores a number of critical Windows environment variables). These programs are typically running with elevated privileges and have usually not been designed with security in mind. Such programs are excellent exploit targets because they yield lots of power when they break.::STEP:2:PHASE:Explore:DESCRIPTION:[Find vulnerability in running program] The adversary looks for a vulnerability in the running program that would allow for arbitrary code execution with the privilege of the running program.:TECHNIQUE:Look for improper input validation:TECHNIQUE:Look for improper failure safety. For instance when a program fails it may authorize restricted access to anyone.:TECHNIQUE:Look for a buffer overflow which may be exploited if an adversary can inject unvalidated data.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute arbitrary code] The adversary exploits the vulnerability that they have found. For instance, they can try to inject and execute arbitrary code or write to OS resources.::","::The targeted program runs with elevated OS privileges.::The targeted program accepts input data from the user or from another program.::The targeted program is giving away information about itself. Before performing such attack, an eventual attacker may need to gather information about the services running on the host target. The more the host target is verbose about the services that are running (version number of application, etc.) the more information can be gather by an attacker.::This attack often requires communicating with the host target services directly. For instance Telnet may be enough to communicate with the host target.::","::SKILL:An attacker can use a tool to scan and automatically launch an attack against known issues. A tool can also repeat a sequence of instructions and try to brute force the service on the host target, an example of that would be the flooding technique.:LEVEL:Low::SKILL:More advanced attack may require knowledge of the protocol spoken by the host service.:LEVEL:Medium::",,::The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.::,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::,"::Apply the principle of least privilege.::Validate all untrusted data.::Apply the latest patches.::Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them.::Avoid revealing information about your system (e.g., version of the program) to anonymous users.::Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs.::If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage.::Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.::Monitor traffic and resource usage and pay attention if resource exhaustion occurs.::Protect your log file from unauthorized modification and log forging.::",,::250::15::,,
Spoof Open-Source Software Metadata,Standard,Stable,"An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.",,Medium,High,::NATURE:ChildOf:CAPEC ID:690::NATURE:CanPrecede:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:444::NATURE:PeerOf:CAPEC ID:630::,,::Identification of a popular open-source component whose metadata is to be spoofed.::,::SKILL:Ability to spoof a variety of software metadata to convince victims the source is trusted.:LEVEL:Medium::,,,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Accountability:TECHNICAL IMPACT:Hide Activities::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges::,"::Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.::Within package managers, look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.::Reference vulnerability databases to determine if the software contains known vulnerabilities.::Only download open-source software from reputable hosting sites or package managers.::Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.::After downloading open-source software, ensure integrity values have not changed.::Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.::","::An adversary provides a malicious open-source library, claiming to provide extended logging features and functionality, and spoofs the metadata with that of a widely used legitimate library. The adversary then tricks victims into including this library in their underlying application. Once the malicious software is incorporated into the application, the adversary is able to manipulate and exfiltrate log data.::",::494::,TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Compromise Software Dependencies and Development Tools::::TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::,
System Location Discovery,Standard,Stable,"An adversary collects information about the target system in an attempt to identify the system's geographical location. Information gathered could include keyboard layout, system language, and timezone. This information may benefit an adversary in confirming the desired target and/or tailoring further attacks.",,High,Very Low,::NATURE:ChildOf:CAPEC ID:169::,"::STEP:1:PHASE:Explore:DESCRIPTION:[System Locale Information Discovery] The adversary examines system information from various sources such as registry and native API functions and correlates the gathered information to infer the geographical location of the target system:TECHNIQUE:Registry Query: Query the registry key HKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlContentIndexLanguageLanguage_Dialect on Windows to obtain system language, ComputerHKEY_CURRENT_USERKeyboard LayoutPreload to obtain the hexadecimal language IDs of the current user's preloaded keyboard layouts, and ComputerHKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlTimeZoneInformation to obtain the system timezone configuration:TECHNIQUE:Native API Requests: Parse the outputs of Windows API functions GetTimeZoneInformation, GetUserDefaultUILanguage, GetSystemDefaultUILanguage, GetKeyboardLayoutList and GetUserDefaultLangID to obtain information about languages, keyboard layouts, and timezones installed on the system or on macOS or Linux systems, query locale to obtain the $LANG environment variable and view keyboard layout information or use timeanddatectl status to show the system clock settings.:TECHNIQUE:Read Configuration Files: For macOS and Linux-based systems, view the /etc/vconsole.conf file to get information about the keyboard mapping and console font.::",::The adversary must have some level of access to the system and have a basic understanding of the operating system in order to query the appropriate sources for relevant information.::,::SKILL:The adversary must know how to query various system sources of information respective of the system's operating system to obtain the relevant information.:LEVEL:Low::,"::The adversary requires access to the target's operating system tools to query relevant system information. On windows, registry queries can be conducted with powershell, wmi, or regedit. On Linux or macOS, queries can be performed with through a shell.::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,"::To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation.::",,::497::,TAXONOMY NAME:ATTACK:ENTRY ID:1614:ENTRY NAME:System Language Discovery::,
DHCP Spoofing,Standard,Stable,"An adversary masquerades as a legitimate Dynamic Host Configuration Protocol (DHCP) server by spoofing DHCP traffic, with the goal of redirecting network traffic or denying service to DHCP.",,Low,High,::NATURE:ChildOf:CAPEC ID:194::NATURE:CanPrecede:CAPEC ID:158::NATURE:CanPrecede:CAPEC ID:94::,::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Exsisting DHCP lease] An adversary observes network traffic and waits for an existing DHCP lease to expire on a target machine in the LAN.:TECHNIQUE:Adversary observes LAN traffic for DHCP solicitations::STEP:2:PHASE:Experiment:DESCRIPTION:[Capture the DHCP DISCOVER message] The adversary captures DISCOVER messages and crafts OFFER responses for the identified target MAC address. The success of this attack centers on the capturing of and responding to these DISCOVER messages.:TECHNIQUE:Adversary captures and responds to DHCP DISCOVER messages tailored to the target subnet.::STEP:3:PHASE:Exploit:DESCRIPTION:[Compromise Network Access and Collect Network Activity] An adversary successfully acts as a rogue DHCP server by redirecting legitimate DHCP requests to itself.:TECHNIQUE:Adversary sends repeated DHCP REQUEST messages to quickly lease all the addresses within network's DHCP pool and forcing new DHCP requests to be handled by the rogue DHCP server.::,::The adversary must have access to a machine within the target LAN which can send DHCP offers to the target.::,::SKILL:The adversary must identify potential targets for DHCP Spoofing and craft network configurations to obtain the desired results.:LEVEL:Medium::,"::The adversary requires access to a machine within the target LAN on a network which does not secure its DHCP traffic through MAC-Forced Forwarding, port security, etc.::",,::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:SCOPE:Access Control:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::,::Design: MAC-Forced Forwarding::Implementation: Port Security and DHCP snooping::Implementation: Network-based Intrusion Detection Systems::,"::In early 2019, Microsoft patched a critical vulnerability (CVE-2019-0547) in the Windows DHCP client which allowed remote code execution via crafted DHCP OFFER packets. [REF-739]::",::923::,TAXONOMY NAME:ATTACK:ENTRY ID:1557.003:ENTRY NAME:Adversary-in-the-Middle: DHCP Spoofing::,
Network Boundary Bridging,Standard,Draft,"An adversary which has gained elevated access to network boundary devices may use these devices to create a channel to bridge trusted and untrusted networks. Boundary devices do not necessarily have to be on the network’s edge, but rather must serve to segment portions of the target network the adversary wishes to cross into.",,Medium,High,::NATURE:ChildOf:CAPEC ID:161::NATURE:CanFollow:CAPEC ID:70::NATURE:CanFollow:CAPEC ID:560::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify potential targets] An adversary identifies network boundary devices that can be compromised.:TECHNIQUE:The adversary traces network traffic to identify which devices the traffic flows through. Additionally, the adversary can identify devices using fingerprinting methods or locating the management page to determine identifying information about the device.::STEP:2:PHASE:Experiment:DESCRIPTION:[Compromise targets] The adversary must compromise the identified targets in the previous step.:TECHNIQUE:Once the device is identified, the adversary can attempt to input known default credentials for the device to gain access to the management console.:TECHNIQUE:Adversaries with sufficient identifying knowledge about the target device can exploit known vulnerabilities in network devices to obtain administrative access.::STEP:3:PHASE:Exploit:DESCRIPTION:[Bridge Networks] The adversary changes the configuration of the compromised network device to connect the networks the device was segmenting. Depending on the type of network boundary device and its capabilities, bridging can be implemented using various methods.:TECHNIQUE:The adversary can abuse Network Address Translation (NAT) in firewalls and routers to manipulate traffic flow to their own design. With control of the network device, the adversary can manipulate NAT by either using existing configurations or creating their own to allow two previously unconnected networks to communicate.:TECHNIQUE:Some network devices can be configured to become a proxy server. Adversaries can set up or exploit an existing proxy server on compromised network devices to create a bridge between separate networks.::",::The adversary must have control of a network boundary device.::,::SKILL:The adversary must understand how to manage the target network device to create or edit policies which will bridge networks.:LEVEL:Medium::,::The adversary requires either high privileges or full control of a boundary device on a target network.::,,::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Hide Activities::,"::Design: Ensure network devices are storing credentials in encrypted stores::Design: Follow the principle of least privilege and restrict administrative duties to as few accounts as possible. Ensure these privileged accounts are secured with strong credentials which do not overlap with other network devices.::Configuration: When possible, configure network boundary devices to use MFA.::Configuration: Change the default configuration for network devices to harden their security profiles. Default configurations are often enabled with insecure features to allow ease of installation and management. However, these configurations can be easily discovered and exploited by adversaries.::Implementation: Perform integrity checks on audit logs for network device management and review them to identify abnormalities in configurations.::Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.::","::In November 2016, a Smart Install Exploitation Tool was released online which takes advantage of Cisco’s unauthenticated SMI management protocol to download a target’s current configuration files. Adversaries can use this tool to overwrite files to modify the device configurations, or upload maliciously modified OS or firmware to enable persistence. Once the adversary has access to the device’s configurations, they could modify it to redirect network traffic through other network infrastructure.::",,TAXONOMY NAME:ATTACK:ENTRY ID:1599:ENTRY NAME:Network Boundary Bridging::,
Browser in the Middle (BiTM),Standard,Draft,"An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.",,Medium,High,::NATURE:ChildOf:CAPEC ID:94::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanFollow:CAPEC ID:98::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify potential targets] The adversary identifies an application or service that the target is likely to use.:TECHNIQUE:The adversary stands up a server to host the transparent browser and entices victims to use it by using a domain name similar to the legitimate application. In addition to the transparent browser, the adversary could also install a web proxy, sniffer, keylogger, and other tools to assist in their goals.::STEP:2:PHASE:Experiment:DESCRIPTION:[Lure victims] The adversary crafts a phishing campaign to lure unsuspecting victims into using the transparent browser.:TECHNIQUE:An adversary can create a convincing email with a link to download the web client and interact with the transparent browser.::STEP:3:PHASE:Exploit:DESCRIPTION:[Monitor and Manipulate Data] When the victim establishes the connection to the transparent browser, the adversary can view victim activity and make alterations to what the victim sees when browsing the web.:TECHNIQUE:Once a victim has established a connection to the transparent browser, the adversary can use installed tools such as a web proxy, keylogger, or additional malicious browser extensions to gather and manipulate data or impersonate the victim.::","::The adversary must create a convincing web client to establish the connection. The victim then needs to be lured onto the adversary's webpage. In addition, the victim's machine must not use local authentication APIs, a hardware token, or a Trusted Platform Module (TPM) to authenticate.::",::SKILL::LEVEL:Medium::,::A web application with a client is needed to enable the victim's browser to establish a remote desktop connection to the system of the adversary.::,,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges:LIKELIHOOD:High::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data:LIKELIHOOD:High::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:LIKELIHOOD:Medium::,"::Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel::",,::294::345::,,
User-Controlled Filename,Standard,Draft,"An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",,High,High,::NATURE:ChildOf:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:592::,,::The victim must trust the name and locale of user controlled filenames.::,"::SKILL:To achieve a redirection and use of less trusted source, an attacker can simply edit data that the host uses to build the filename:LEVEL:Low::SKILL:Deploying a malicious look-a-like site (such as a site masquerading as a bank or online auction site) that the user enters their authentication data into.:LEVEL:Medium::SKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High::",,,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Availability:TECHNICAL IMPACT:Alter Execution Logic::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,::Design: Use browser technologies that do not allow client side scripting.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Scan dynamically generated content against validation specification::,"::Phishing attacks rely on a user clicking on links on that are supplied to them by attackers masquerading as a trusted resource such as a bank or online auction site. The end user's email client hosts the supplied resource name in this case via email. The resource name, however may either 1) direct the client browser to a malicious site to steal credentials and/or 2) execute code on the client machine to probe the victim's host system and network environment.::",::20::184::96::348::116::350::86::697::,,
Manipulating Writeable Configuration Files,Standard,Draft,"Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.",,High,Very High,::NATURE:ChildOf:CAPEC ID:176::,,::Configuration files must be modifiable by the attacker::,"::SKILL:To identify vulnerable configuration files, and understand how to manipulate servers and erase forensic evidence:LEVEL:Medium::",,,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::Design: Enforce principle of least privilege::Design: Backup copies of all configuration files::Implementation: Integrity monitoring for configuration files::Implementation: Enforce audit logging on code and configuration promotion procedures.::Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD::","::The BEA Weblogic server uses a config.xml file to store configuration data. If this file is not properly protected by the system access control, an attacker can write configuration information to redirect server output through system logs, database connections, malicious URLs and so on. Access to the Weblogic server may be from a so-called Custom realm which manages authentication and authorization privileges on behalf of user principals. Given write access, the attacker can insert a pointer to a custom realm jar file in the config.xml < CustomRealmConfigurationData=java.util.PropertiesName=CustomRealmRealmClassName=Maliciousrealm.jar/> The main issue with configuration files is that the attacker can leverage all the same functionality the server has, but for malicious means. Given the complexity of server configuration, these changes may be very hard for administrators to detect.::",::349::99::77::346::353::354::,,
Manipulating User-Controlled Variables,Standard,Draft,"This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",,High,Very High,::NATURE:ChildOf:CAPEC ID:22::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Probe target application] The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find user-controlled variables] Using the information found by probing the application, the adversary attempts to manipulate many user-controlled variables and observes the effects on the application. If the adversary notices any significant changes to the application, they will know that a certain variable is useful to the application.:TECHNIQUE:Adversaries will try to alter many common variable names such as count, tempFile, i, etc. The hope is that they can alter the flow of the application without knowing the inner-workings.:TECHNIQUE:Adversaries will try to alter known environment variables.::STEP:3:PHASE:Exploit:DESCRIPTION:[Manipulate user-controlled variables] Once the adversary has found a user-controller variable(s) that is important to the application, they will manipulate it to change the normal behavior in a way that benefits the adversary.::",::A variable consumed by the application server is exposed to the client.::A variable consumed by the application server can be overwritten by the user.::The application server trusts user supplied data to compute business logic.::The application server does not perform proper input validation.::,::SKILL:The malicious user can easily try some well-known global variables and find one which matches.:LEVEL:Low::SKILL:The adversary can use automated tools to probe for variables that they can control.:LEVEL:Medium::,,::A web penetration tool probing a web server may generate abnormal activities recorded on log files. Abnormal traffic such as a high number of request coming from the same client may also rise the warnings from a monitoring system or an intrusion detection tool.::,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.::A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.::Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.::Use encapsulation when declaring your variables. This is to lower the exposure of your variables.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program.::","::PHP is a study in bad security. The main idea pervading PHP is ease of use, and the mantra don't make the developer go to any extra work to get stuff done applies in all cases. This is accomplished in PHP by removing formalism from the language, allowing declaration of variables on first use, initializing everything with preset values, and taking every meaningful variable from a transaction and making it available. In cases of collision with something more technical, the simple almost always dominates in PHP. One consequence of all this is that PHP allows users of a Web application to override environment variables with user-supplied, untrusted query variables. Thus, critical values such as the CWD and the search path can be overwritten and directly controlled by a remote anonymous user. Another similar consequence is that variables can be directly controlled and assigned from the user-controlled values supplied in GET and POST request fields. So seemingly normal code like this, does bizarre things: while($count < 10){// Do something$count++;} Normally, this loop will execute its body ten times. The first iteration will be an undefined zero, and further trips though the loop will result in an increment of the variable $count. The problem is that the coder does not initialize the variable to zero before entering the loop. This is fine because PHP initializes the variable on declaration. The result is code that seems to function, regardless of badness. The problem is that a user of the Web application can supply a request such as GET /login.php?count=9 and cause $count to start out at the value 9, resulting in only one trip through the loop. Yerg. Depending on the configuration, PHP may accept user-supplied variables in place of environment variables. PHP initializes global variables for all process environment variables, such as $PATH and $HOSTNAME. These variables are of critical importance because they may be used in file or network operations. If an adversary can supply a new $PATH variable (such as PATH='/var'), the program may be exploitable. PHP may also take field tags supplied in GET/POST requests and transform them into global variables. This is the case with the $count variable we explored in our previous example. Consider another example of this problem in which a program defines a variable called $tempfile. An adversary can supply a new temp file such as $tempfile = /etc/passwd. Then the temp file may get erased later via a call to unlink($tempfile);. Now the passwd file has been erased--a bad thing indeed on most OSs. Also consider that the use of include() and require() first search $PATH, and that using calls to the shell may execute crucial programs such as ls. In this way, ls may be Trojaned (the adversary can modify $PATH to cause a Trojan copy of ls to be loaded). This type of attack could also apply to loadable libraries if $LD_LIBRARY_PATH is modified. Finally, some versions of PHP may pass user data to syslog as a format string, thus exposing the application to a format string buffer overflow.See also: File upload allows arbitrary file read by setting hidden form variables to match internal variable names (CVE-2000-0860)::",::15::94::96::285::302::473::1321::,,
DEPRECATED: Violating Implicit Assumptions Regarding XML Content (aka XML Denial of Service (XDoS)),Standard,Deprecated,"This attack pattern has been deprecated as it a generalization of CAPEC-230: XML Nested Payloads, CAPEC-231: XML Oversized Payloads, and CAPEC-147: XML Ping of Death. Please refer to these CAPECs going forward.",,,,,,,,,,,,,,,
Forceful Browsing,Standard,Draft,"An attacker employs forceful browsing (direct URL entry) to access portions of a website that are otherwise unreachable. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.",,High,High,::NATURE:ChildOf:CAPEC ID:115::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Spider] Using an automated tool, an attacker follows all public links on a web site. They record all the links they find.:TECHNIQUE:Use a spidering tool to follow and record all links.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt well-known or guessable resource locations] Using an automated tool, an attacker requests a variety of well-known URLs that correspond to administrative, debugging, or other useful internal actions. They record all the positive responses from the server.:TECHNIQUE:Use a spidering tool to follow and record attempts on well-known URLs.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of attempts on well-known URLs.::STEP:3:PHASE:Exploit:DESCRIPTION:[Use unauthorized resources] By visiting the unprotected resource, the attacker makes use of unauthorized functionality.:TECHNIQUE:Access unprotected functions and execute them.::STEP:4:PHASE:Exploit:DESCRIPTION:[View unauthorized data] The attacker discovers and views unprotected sensitive data.:TECHNIQUE:Direct request of protected pages that directly access database back-ends. (e.g., list.jsp, accounts.jsp, status.jsp, etc.)::",::The forcibly browseable pages or accessible resources must be discoverable and improperly protected.::,::SKILL:Forcibly browseable pages can be discovered by using a number of automated tools. Doing the same manually is tedious but by no means difficult.:LEVEL:Low::,"::None: No specialized resources are required to execute this type of attack. A directory listing is helpful, but not a requirement.::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::,"::Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.::Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context.::",::A bulletin board application provides an administrative interface at admin.aspx when the user logging in belongs to the administrators group. An attacker can access the admin.aspx interface by making a direct request to the page. Not having access to the interface appropriately protected allows the attacker to perform administrative functions without having to authenticate themself in that role.::,::425::285::693::,TAXONOMY NAME:WASC:ENTRY ID:34:ENTRY NAME:Predictable Resource Location::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Forced browsing::,
OS Command Injection,Standard,Draft,"In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",,High,High,::NATURE:ChildOf:CAPEC ID:248::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify inputs for OS commands] The attacker determines user controllable input that gets passed as part of a command to the underlying operating system.:TECHNIQUE:Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.:TECHNIQUE:TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.:TECHNIQUE:Induce errors to find informative error messages::STEP:2:PHASE:Explore:DESCRIPTION:[Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated user:TECHNIQUE:Spidering web sites for all available links:TECHNIQUE:Inventory all application inputs::STEP:3:PHASE:Experiment:DESCRIPTION:[Vary inputs, looking for malicious results.] Depending on whether the application being exploited is a remote or local one the attacker crafts the appropriate malicious input, containing OS commands, to be passed to the application:TECHNIQUE:Inject command delimiters using network packet injection tools (netcat, nemesis, etc.):TECHNIQUE:Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)::STEP:4:PHASE:Exploit:DESCRIPTION:[Execute malicious commands] The attacker may steal information, install a back door access mechanism, elevate privileges or compromise the system in some other way.:TECHNIQUE:The attacker executes a command that stores sensitive information into a location where they can retrieve it later (perhaps using a different command injection).::",::User controllable input used as part of commands to the underlying operating system.::,"::SKILL:The attacker needs to have knowledge of not only the application to exploit but also the exact nature of commands that pertain to the target operating system. This may involve, though not always, knowledge of specific assembly commands for the platform.:LEVEL:High::",,,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,"::Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.::Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands::All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.::","::A transaction processing system relies on code written in a number of languages. To access this functionality, the system passes transaction information on the system command line. An attacker can gain access to the system command line and execute malicious commands by injecting these commands in the transaction data. If successful, the attacker can steal information, install backdoors and perform other nefarious activities that can compromise the system and its data.See also: A vulnerability in Mozilla Firefox 1.x browser allows an attacker to execute arbitrary commands on the UNIX/Linux operating system. The vulnerability is caused due to the shell script used to launch Firefox parsing shell commands that are enclosed within back-ticks in the URL provided via the command line. This can be exploited to execute arbitrary shell commands by tricking a user into following a malicious link in an external application which uses Firefox as the default browser (e.g. the mail client Evolution on Red Hat Enterprise Linux 4).::",::78::88::20::697::,TAXONOMY NAME:WASC:ENTRY ID:31:ENTRY NAME:OS Commanding::,
Pharming,Standard,Draft,"A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",,High,Very High,::NATURE:ChildOf:CAPEC ID:151::,"::STEP:1:PHASE:Exploit:DESCRIPTION:Attacker sets up a system mocking the one trusted by the users. This is usually a website that requires or handles sensitive information.::STEP:2:PHASE:Exploit:DESCRIPTION:The attacker then poisons the resolver for the targeted site. This is achieved by poisoning the DNS server, or the local hosts file, that directs the user to the original website::STEP:3:PHASE:Exploit:DESCRIPTION:When the victim requests the URL for the site, the poisoned records direct the victim to the attackers' system rather than the original one.::STEP:4:PHASE:Exploit:DESCRIPTION:Because of the identical nature of the original site and the attacker controlled one, and the fact that the URL is still the original one, the victim trusts the website reached and the attacker can now farm sensitive information such as credentials or account numbers.::",::Vulnerable DNS software or improperly protected hosts file or router that can be poisoned::A website that handles sensitive information but does not use a secure connection and a certificate that is valid is also prone to pharming::,"::SKILL:The attacker needs to be able to poison the resolver - DNS entries or local hosts file or router entry pointing to a trusted DNS server - in order to successfully carry out a pharming attack. Setting up a fake website, identical to the targeted one, does not require special skills.:LEVEL:Medium::","::None: No specialized resources are required to execute this type of attack. Having knowledge of the way the target site has been structured, in order to create a fake version, is required. Poisoning the resolver requires knowledge of a vulnerability that can be exploited.::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,"::All sensitive information must be handled over a secure connection.::Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.::End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.::","::An online bank website requires users to provide their customer ID and password to log on, but does not use a secure connection. An attacker can setup a similar fake site and leverage pharming to collect this information from unknowing victims.::",::346::350::,,
Reflection Attack in Authentication Protocol,Standard,Draft,"An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",,High,High,::NATURE:ChildOf:CAPEC ID:272::NATURE:ChildOf:CAPEC ID:114::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify service with vulnerable handshake authentication] The adversary must first identify a vulnerable authentication protocol. The most common indication of an authentication protocol vulnerable to reflection attack is when the client initiates the handshake, rather than the server. This allows the client to get the server to encrypt targeted data using the server's pre-shared key.::STEP:2:PHASE:Experiment:DESCRIPTION:[Send challenge to target server] The adversary opens a connection to the target server and sends it a challenge. This challenge is arbitrary and is simply used as a placeholder for the protocol in order to get the server to respond.::STEP:3:PHASE:Experiment:DESCRIPTION:[Receive server challenge] The server responds by returning the challenge sent encrypted with the server's pre-shared key, as well as its own challenge to the attacker sent in plaintext. We will call this challenge sent by the server C. C is very important and is stored off by the adversary for the next step.::STEP:4:PHASE:Experiment:DESCRIPTION:[Initiate second handshake] Since the adversary does not possess the pre-shared key, they cannot encrypt C from the previous step in order for the server to authenticate them. To get around this, the adversary initiates a second connection to the server while still keeping the first connection alive. In the second connection, the adversary sends C as the initial client challenge, which rather than being arbitary like the first connection, is very intentional.::STEP:5:PHASE:Experiment:DESCRIPTION:[Receive encrypted challenge] The server treats the intial client challenge in connection two as an arbitrary client challenge and responds by encrypting C with the pre-shared key. The server also sends a new challenge. The adversary ignores the server challenge and stores the encrypted version of C. The second connection is either terminated or left to expire by the adversary as it is no longer needed.::STEP:6:PHASE:Exploit:DESCRIPTION:The adversary now posseses the encrypted version of C that is obtained through connection two. The adversary continues the handshake in connection one by responding to the server with the encrypted version of C, verifying that they have access to the pre-shared key (when they actually do not). Because the server uses the same pre-shared key for all authentication it will decrypt C and authenticate the adversary for the first connection, giving the adversary illegitimate access to the target system.::","::The attacker must have direct access to the target server in order to successfully mount a reflection attack. An intermediate entity, such as a router or proxy, that handles these exchanges on behalf of the attacker inhibits the attackers' ability to attack the authentication protocol.::",::SKILL:The attacker needs to have knowledge of observing the protocol exchange and managing the required connections in order to issue and respond to challenges:LEVEL:Medium::,::All that the attacker requires is a means to observe and understand the protocol exchanges in order to reflect the challenges appropriately.::,,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,"::The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further::The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.::Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol::",::A single sign-on solution for a network uses a fixed pre-shared key with its clients to initiate the sign-on process in order to avoid eavesdropping on the initial exchanges. An attacker can use a reflection attack to mimic a trusted client on the network to participate in the sign-on exchange.::,::301::303::,,
Cryptanalysis,Standard,Draft,"Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).",,Low,Very High,::NATURE:ChildOf:CAPEC ID:192::NATURE:CanPrecede:CAPEC ID:20::,"::STEP:1:PHASE:Explore:DESCRIPTION:An attacker discovers a weakness in the cryptographic algorithm or a weakness in how it was applied to a particular chunk of plaintext.::STEP:2:PHASE:Exploit:DESCRIPTION:An attacker leverages the discovered weakness to decrypt, partially decrypt or infer some information about the contents of the encrypted message. All of that is done without knowing the secret key.::",::The target software utilizes some sort of cryptographic algorithm.::An underlying weaknesses exists either in the cryptographic algorithm used or in the way that it was applied to a particular chunk of plaintext.::The encryption algorithm is known to the attacker.::An attacker has access to the ciphertext.::,::SKILL:Cryptanalysis generally requires a very significant level of understanding of mathematics and computation.:LEVEL:High::,::Computing resource requirements will vary based on the complexity of a given cryptanalysis technique. Access to the encryption/decryption routines of the algorithm is also required.::,,"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:In most cases, if cryptanalysis is successful at all, an adversary will not be able to decrypt the entire message, but instead will only be able to deduce some information about the plaintext. However, that may be sufficient for an adversary, depending on the context of the attack.::",::Use proven cryptographic algorithms with recommended key sizes.::Ensure that the algorithms are used properly. That means: 1. Not rolling out your own crypto; Use proven algorithms and implementations. 2. Choosing initialization vectors with sufficiently random numbers 3. Generating key material using good sources of randomness and avoiding known weak keys 4. Using proven protocols and their implementations. 5. Picking the most appropriate cryptographic algorithm for your usage context and data::,"::A very easy to understand example is a cryptanalysis technique called frequency analysis that can be successfully applied to the very basic classic encryption algorithms that performed mono-alphabetic substitution replacing each letter in the plaintext with its predetermined mapping letter from the same alphabet. This was considered an improvement over a more basic technique that would simply shift all of the letters of the plaintext by some constant number of positions and replace the original letters with the new letter with the resultant alphabet position. While mono-alphabetic substitution ciphers are resilient to blind brute force, they can be broken easily with nothing more than a pen and paper. Frequency analysis uses the fact that natural language is not random and mono-alphabetic substitution does not hide the statistical properties of the natural language. So if the letter E in an English language occurs with a certain known frequency (about 12.7%), whatever E was substituted with to get to the ciphertext, will occur with the similar frequency. Having this frequency information allows the cryptanalyst to quickly determine the substitutions and decipher the ciphertext. Frequency analysis techniques are not applicable to modern ciphers as they are all resilient to it (unless this is a very bad case of a homegrown encryption algorithm). This example is inapplicable to modern cryptographic ciphers but is here to illustrate a rudimentary example of cryptanalysis.::",::327::1204::1240::1241::1279::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cryptanalysis::,
Phishing,Standard,Draft,Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.,,High,Very High,::NATURE:ChildOf:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::NATURE:CanPrecede:CAPEC ID:611::NATURE:CanPrecede:CAPEC ID:630::NATURE:CanPrecede:CAPEC ID:631::NATURE:CanPrecede:CAPEC ID:632::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the attacker impersonate the legitimate site more convincingly. The attacker can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.:TECHNIQUE:Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L):TECHNIQUE:Optionally obtain a legitimate SSL certificate for the new domain name.::STEP:2:PHASE:Explore:DESCRIPTION:[Explore legitimate website and create duplicate] An attacker creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.:TECHNIQUE:Use spidering software to get copy of web pages on legitimate site.:TECHNIQUE:Manually save copies of required web pages from legitimate site.:TECHNIQUE:Create new web pages that have the legitimate site's look and feel, but contain completely new content.::STEP:3:PHASE:Exploit:DESCRIPTION:[Convince user to enter sensitive information on attacker's site.] An attacker sends an e-mail to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to attacker's website) and log in. The key is to get the victim to believe that the e-mail is coming from a legitimate entity with which the victim does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.:TECHNIQUE:Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.:TECHNIQUE:Place phishing link in post to online forum.::STEP:4:PHASE:Exploit:DESCRIPTION:[Use stolen credentials to log into legitimate site] Once the attacker captures some sensitive information through phishing (login credentials, credit card information, etc.) the attacker can leverage this information. For instance, the attacker can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.:TECHNIQUE:Log in to the legitimate site using another user's supplied credentials::",::An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.::An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.::An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.::The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.::,"::SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium::",::Some web development tools to put up a fake website.::,::You receive an e-mail from an entity that you are not even a customer of prompting you to log into your account.::You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::,"::Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.::","::The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An attacker has just collected the target's online banking information which can now be used by the attacker to log into the target's bank account and transfer money to a bank account of the attackers' choice.::An adversary may use BlueJacking, or Bluetooth Phishing to send unsolicited contact cards, messages, or pictures to nearby devices that are listening via Bluetooth. These messages may contain phishing content.::",::451::,TAXONOMY NAME:ATTACK:ENTRY ID:1566:ENTRY NAME:Phishing::::TAXONOMY NAME:ATTACK:ENTRY ID:1598:ENTRY NAME:Phishing for Information::,
DEPRECATED: XML Parser Attack,Standard,Deprecated,This attack pattern has been deprecated as it a generalization of CAPEC-230: XML Nested Payloads and CAPEC-231: XML Oversized Payloads. Please refer to these CAPECs going forward.,,,,,,,,,,,,,,,
