Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
Accessing Functionality Not Properly Constrained by ACLs,Standard,Draft,"In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",,High,High,::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey] The attacker surveys the target application, possibly as a valid and authenticated user:TECHNIQUE:Spidering web sites for all available links:TECHNIQUE:Brute force guessing of resource names:TECHNIQUE:Brute force guessing of user names / credentials:TECHNIQUE:Brute force guessing of function names / actions::STEP:2:PHASE:Explore:DESCRIPTION:[Identify Functionality] At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actions:TECHNIQUE:Use the web inventory of all forms and inputs and apply attack data to those inputs.:TECHNIQUE:Use a packet sniffer to capture and record network traffic:TECHNIQUE:Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment.::STEP:3:PHASE:Experiment:DESCRIPTION:[Iterate over access capabilities] Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.:TECHNIQUE:Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters)::","::The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.::The various resources, or individual URLs, must be somehow discoverable by the attacker::The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.::","::SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low::",::None: No specialized resources are required to execute this type of attack.::,,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::","::Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a Single front controller pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets. If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted.::",::276::285::434::693::732::1191::1193::1220::1297::1311::1314::1315::1318::1320::1321::1327::,TAXONOMY NAME:ATTACK:ENTRY ID:1574.010:ENTRY NAME:Hijack Execution Flow: ServicesFile Permissions Weakness::,
Flooding,Meta,Stable,"An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.",,High,Medium,,,::Any target that services requests is vulnerable to this attack on some level of scale.::,,"::A script or program capable of generating more requests than the target can handle, or a network or cluster of objects all capable of making simultaneous requests.::",,::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful flooding attack compromises the availability of the target system's service by exhausting its available resources.::,::Ensure that protocols have specific limits of scale configured.::Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.::Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::,,::404::770::,TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service: Direct Network Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1499:ENTRY NAME:Endpoint Denial of Service::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Traffic flood::,
Excessive Allocation,Meta,Stable,"An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.",,Medium,Medium,,,::The target must accept service requests from the attacker and the adversary must be able to control the resource allocation associated with this request to be in excess of the normal allocation. The latter is usually accomplished through the presence of a bug on the target that allows the adversary to manipulate variables used in the allocation.::,,::None: No specialized resources are required to execute this type of attack.::,,"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful excessive allocation attack forces the target system to exhaust its resources, thereby compromising the availability of its service.::","::Limit the amount of resources that are accessible to unprivileged users.::Assume all input is malicious. Consider all potentially relevant properties when validating input.::Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::Use resource-limiting settings, if possible.::","::In an Integer Attack, the adversary could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target.::",::404::770::1325::,TAXONOMY NAME:ATTACK:ENTRY ID:1499.003:ENTRY NAME:Endpoint Denial of Service:Application Exhaustion Flood::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::,
Resource Leak Exposure,Meta,Stable,An adversary utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests.,,Medium,Medium,,,::The target must have a resource leak that the adversary can repeatedly trigger.::,,::None: No specialized resources are required to execute this type of attack.::,,::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful resource leak exposure attack compromises the availability of the target system's services.::,"::If possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated).::Memory should always be allocated/freed using matching functions (e.g., malloc/free, new/delete, etc.)::Implement best practices with respect to memory management, including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function.::",,::404::,TAXONOMY NAME:ATTACK:ENTRY ID:1499:ENTRY NAME:Endpoint Denial of Service::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::,
Cache Poisoning,Standard,Draft,"An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.",,High,High,::NATURE:ChildOf:CAPEC ID:161::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify and explore caches] Use tools to sniff traffic and scan a network in order to locate application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache) that may have vulnerabilities. Look for poisoning point in cache table entries.:TECHNIQUE:Run tools that check available entries in the cache.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause specific data to be cached] An attacker sends bogus request to the target, and then floods responses that trick a cache to remember malicious responses, which are wrong answers of queries.:TECHNIQUE:Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect users to malicious website] As the attacker succeeds in exploiting the vulnerability, they are able to manipulate and interpose malicious response data to targeted victim queries.:TECHNIQUE:Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).:TECHNIQUE:Adversary-in-the-Middle attacks (CAPEC-94) intercept secure communication between two parties.::",::The attacker must be able to modify the value stored in a cache to match a desired value.::The targeted application must not be able to detect the illicit modification of the cache and must trust the cache value in its calculations.::,::SKILL:To overwrite/modify targeted cache:LEVEL:Medium::,,,,"::Configuration: Disable client side caching.::Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.::","::In this example, an attacker sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7. Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the attacker floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.::",::348::345::349::346::,TAXONOMY NAME:ATTACK:ENTRY ID:1557.002:ENTRY NAME:Adversary-in-the-Middle: ARP Cache Poisoning::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cache Poisoning::,
Content Spoofing,Meta,Stable,"An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.",,Medium,Medium,,,"::The target must provide content but fail to adequately protect it against modification.The adversary must have the means to alter data to which they are not authorized. If the content is to be modified in transit, the adversary must be able to intercept the targeted messages.::",,"::If the content is to be modified in transit, the adversary requires a tool capable of intercepting the target's communication and generating/creating custom packets to impact the communications. In some variants, the targeted content is altered so that all or some of it is redirected towards content published by the attacker (for example, images and frames in the target's web site might be modified to be loaded from a source controlled by the attacker). In these cases, the attacker requires the necessary resources to host the replacement content.::",,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful content spoofing attack compromises the integrity of the application data.::,,,::345::,TAXONOMY NAME:ATTACK:ENTRY ID:1491:ENTRY NAME:Defacement::::TAXONOMY NAME:WASC:ENTRY ID:12:ENTRY NAME:Content Spoofing::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Content Spoofing::,
Sniffing Network Traffic,Detailed,Draft,"In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information.",,,Medium,::NATURE:ChildOf:CAPEC ID:157::,,"::The target must be communicating on a network protocol visible by a network sniffing application.::The adversary must obtain a logical position on the network from intercepting target network traffic is possible. Depending on the network topology, traffic sniffing may be simple or challenging. If both the target sender and target recipient are members of a single subnet, the adversary must also be on that subnet in order to see their traffic communication.::",::SKILL:Adversaries can obtain and set up open-source network sniffing tools easily.:LEVEL:Low::,"::A tool with the capability of presenting network communication traffic (e.g., Wireshark, tcpdump, Cain and Abel, etc.).::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,::Obfuscate network traffic through encryption to prevent its readability by network sniffers.::Employ appropriate levels of segmentation to your network in accordance with best practices.::,,::311::,TAXONOMY NAME:ATTACK:ENTRY ID:1040:ENTRY NAME:Network Sniffing::::TAXONOMY NAME:ATTACK:ENTRY ID:1111:ENTRY NAME:Multi-Factor Authentication Interception::,
Spear Phishing,Detailed,Draft,"An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.",,High,High,::NATURE:ChildOf:CAPEC ID:98::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Obtain useful contextual detailed information about the targeted user or organization] An adversary collects useful contextual detailed information about the targeted user or organization in order to craft a more deceptive and enticing message to lure the target into responding.:TECHNIQUE:Conduct web searching research of target. See also: CAPEC-118.:TECHNIQUE:Identify trusted associates, colleagues and friends of target. See also: CAPEC-118.:TECHNIQUE:Utilize social engineering attack patterns such as Pretexting. See also: CAPEC-407.:TECHNIQUE:Collect social information via dumpster diving. See also: CAPEC-406.:TECHNIQUE:Collect social information via traditional sources. See also: CAPEC-118.:TECHNIQUE:Collect social information via Non-traditional sources. See also: CAPEC-118.::STEP:2:PHASE:Experiment:DESCRIPTION:[Optional: Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.:TECHNIQUE:Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L).:TECHNIQUE:Optionally obtain a legitimate SSL certificate for the new domain name.::STEP:3:PHASE:Experiment:DESCRIPTION:[Optional: Explore legitimate website and create duplicate] An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.:TECHNIQUE:Use spidering software to get copy of web pages on legitimate site.:TECHNIQUE:Manually save copies of required web pages from legitimate site.:TECHNIQUE:Create new web pages that have the legitimate site's look at feel, but contain completely new content.::STEP:4:PHASE:Experiment:DESCRIPTION:[Optional: Build variants of the website with very specific user information e.g., living area, etc.] Once the adversary has their website which duplicates a legitimate website, they need to build very custom user related information in it. For example, they could create multiple variants of the website which would target different living area users by providing information such as local news, local weather, etc. so that the user believes this is a new feature from the website.:TECHNIQUE:Integrate localized information in the web pages created to duplicate the original website. Those localized information could be dynamically generated based on unique key or IP address of the future victim.::STEP:5:PHASE:Exploit:DESCRIPTION:[Convince user to enter sensitive information on adversary's site.] An adversary sends a message (typically an e-mail) to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to adversary's website) and log in. The key is to get the victim to believe that the message is coming from a legitimate entity trusted by the victim or with which the victim or does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.:TECHNIQUE:Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.:TECHNIQUE:Place phishing link in post to online forum.::STEP:6:PHASE:Exploit:DESCRIPTION:[Use stolen credentials to log into legitimate site] Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.:TECHNIQUE:Log in to the legitimate site using another user's supplied credentials.::",::None. Any user can be targeted by a Spear Phishing attack.::,"::SKILL:Spear phishing attacks require specific knowledge of the victims being targeted, such as which bank is being used by the victims, or websites they commonly log into (Google, Facebook, etc).:LEVEL:Medium::","::An adversay must have the ability communicate their phishing scheme to the victims (via email, instance message, etc.), as well as a website or other platform for victims to enter personal information into.::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information Leakage::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges:NOTE:Privilege Escalation::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:Data Modification::,"::Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.::","::The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity that happened in a different area from where they live (details might be provided by the spear phishers) and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An adversary has just collected the target's online banking information which can now be used by them to log into the target's bank account and transfer money to a bank account of the adversary's choice.::An adversary can leverage a weakness in the SMB protocol by sending the target, an official looking e-mail from their employer's IT Department stating that their system has vulnerable software, which they need to manually patch by accessing an updated version of the software by clicking on a provided link to a network share. Once the link is clicked, the target is directed to an external server controlled by the adversary or to a malicious file on a public access share. The SMB protocol will then attempt to authenticate the target to the adversary controlled server, which allows the adversary to capture the hashed credentials over SMB. These credentials can then be used to execute offline brute force attacks or a Pass The Hash attack.::",::451::,TAXONOMY NAME:ATTACK:ENTRY ID:1534:ENTRY NAME:Internal Spearfishing::::TAXONOMY NAME:ATTACK:ENTRY ID:1566.001:ENTRY NAME:Phishing: Spearfishing Attachment::::TAXONOMY NAME:ATTACK:ENTRY ID:1566.002:ENTRY NAME:Phishing: Spearfishing Link::::TAXONOMY NAME:ATTACK:ENTRY ID:1566.003:ENTRY NAME:Phishing: Spearfishing via Service::::TAXONOMY NAME:ATTACK:ENTRY ID:1598.001:ENTRY NAME:Phishing for Information: Spearfishing Service::::TAXONOMY NAME:ATTACK:ENTRY ID:1598.002:ENTRY NAME:Phishing for Information: Spearfishing Attachment::::TAXONOMY NAME:ATTACK:ENTRY ID:1598.003:ENTRY NAME:Phishing for Information: Spearfishing Link::,
File Manipulation,Meta,Draft,"An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.",,,Medium,,,::The target must use the affected file without verifying its integrity.::,,"::None: No specialized resources are required to execute this type of attack. In some cases, tools can be used to better control the response of the targeted application to the modified file.::",,,,,,TAXONOMY NAME:ATTACK:ENTRY ID:1036.003:ENTRY NAME:Masquerading: Rename System Utilities::,
Footprinting,Meta,Stable,An adversary engages in probing and exploration activities to identify constituents and properties of the target.,,High,Very Low,,"::STEP:1:PHASE:Explore:DESCRIPTION:[Request Footprinting] The attacker examines the website information and source code of the website and uses automated tools to get as much information as possible about the system and organization.:TECHNIQUE:Open Source Footprinting: Examine the website about the organization and skim through the webpage's HTML source to look for comments.:TECHNIQUE:Network Enumeration: Perform various queries (Registrar Query, Organizational Query, Domain Query, Network Query, POC Query) on the many whois databases found on the internet to identify domain names and associated networks.:TECHNIQUE:DNS Interrogation: Once basic information is gathered the attack could begin to query DNS.:TECHNIQUE:Other Techniques: Use ping sweep, TCP scan, UDP scan, OS Identification various techniques to gain more information about the system and network.::","::An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack.::","::SKILL:The adversary knows how to send HTTP request, run the scan tool.:LEVEL:Low::",::The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.::,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,"::Keep patches up to date by installing weekly or daily if possible.::Shut down unnecessary services/ports.::Change default passwords by choosing strong passwords.::Curtail unexpected input.::Encrypt and password-protect sensitive data.::Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents.::","::In this example let us look at the website http://www.example.com to get much information we can about Alice. From the website, we find that Alice also runs foobar.org. We type in www example.com into the prompt of the Name Lookup window in a tool, and our result is this IP address: 192.173.28.130 We type the domain into the Name Lookup prompt and we are given the same IP. We can safely say that example and foobar.org are hosted on the same box. But if we were to do a reverse name lookup on the IP, which domain will come up? www.example.com or foobar.org? Neither, the result is nijasvspirates.org. So nijasvspirates.org is the name of the box hosting 31337squirrel.org and foobar.org. So now that we have the IP, let's check to see if nijasvspirates is awake. We type the IP into the prompt in the Ping window. We'll set the interval between packets to 1 millisecond. We'll set the number of seconds to wait until a ping times out to 5. We'll set the ping size to 500 bytes and we'll send ten pings. Ten packets sent and ten packets received. nijasvspirates.org returned a message to my computer within an average of 0.35 seconds for every packet sent. nijasvspirates is alive. We open the Whois window and type nijasvspirates.org into the Query prompt, and whois.networksolutions.com into the Server prompt. This means we'll be asking Network Solutions to tell us everything they know about nijasvspirates.org. The result is this laundry list of info: Registrant: FooBar (nijasvspirates -DOM) p.o.box 11111 SLC, UT 84151 US Domain Name: nijasvspirates.ORG Administrative Contact, Billing Contact: Smith, John jsmith@anonymous.net FooBar p.o.box 11111 SLC, UT 84151 555-555-6103 Technical Contact: Johnson, Ken kj@fierymonkey.org fierymonkey p.o.box 11111 SLC, UT 84151 555-555-3849 Record last updated on 17-Aug-2001. Record expires on 11-Aug-2002. Record created on 11-Aug-2000. Database last updated on 12-Dec-2001 04:06:00 EST. Domain servers in listed order: NS1. fierymonkey.ORG 192.173.28.130 NS2. fierymonkey.ORG 64.192.168.80 A corner stone of footprinting is Port Scanning. Let's port scan nijasvspirates.org and see what kind of services are running on that box. We type in the nijasvspirates IP into the Host prompt of the Port Scan window. We'll start searching from port number 1, and we'll stop at the default Sub7 port, 27374. Our results are: 21 TCP ftp 22 TCP ssh SSH-1.99-OpenSSH_2.30 25 TCP smtp 53 TCP domain 80 TCP www 110 TCP pop3 111 TCP sunrpc 113 TCP ident Just by this we know that Alice is running a website and email, using POP3, SUNRPC (SUN Remote Procedure Call), and ident.::",::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1217:ENTRY NAME:Browser Bookmark Discovery::::TAXONOMY NAME:ATTACK:ENTRY ID:1592:ENTRY NAME:Gather Victim Host Information::::TAXONOMY NAME:ATTACK:ENTRY ID:1595:ENTRY NAME:Active Scanning::,
Create files with the same name as files protected with a higher classification,Detailed,Draft,"An attacker exploits file location algorithms in an operating system or application by creating a file with the same name as a protected or privileged file. The attacker could manipulate the system if the attacker-created file is trusted by the operating system or an application component that attempts to load the original file. Applications often load or include external files, such as libraries or configuration files. These files should be protected against malicious manipulation. However, if the application only uses the name of the file when locating it, an attacker may be able to create a file with the same name and place it in a directory that the application will search before the directory with the legitimate file is searched. Because the attackers' file is discovered first, it would be used by the target application. This attack can be extremely destructive if the referenced file is executable and/or is granted special privileges based solely on having a particular name.",,,Very High,::NATURE:ChildOf:CAPEC ID:17::,,"::The target application must include external files. Most non-trivial applications meet this criterion.::The target application does not verify that a located file is the one it was looking for through means other than the name. Many applications fail to perform checks of this type.::The directories the target application searches to find the included file include directories writable by the attacker which are searched before the protected directory containing the actual files. It is much less common for applications to meet this criterion, but if an attacker can manipulate the application's search path (possibly by controlling environmental variables) then they can force this criterion to be met.::",,::The attacker must have sufficient access to place an arbitrarily named file somewhere early in the application's search path.::,,,,,::706::,TAXONOMY NAME:ATTACK:ENTRY ID:1036:ENTRY NAME:Masquerading::,
Exploiting Incorrectly Configured Access Control Security Levels,Standard,Draft,"An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",,High,Medium,::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey] The attacker surveys the target application, possibly as a valid and authenticated user.:TECHNIQUE:Spider the web site for all available links.:TECHNIQUE:Brute force to guess all function names/action with different privileges.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify weak points in access control configurations] The attacker probes the access control for functions and data identified in the Explore phase to identify potential weaknesses in how the access controls are configured.:TECHNIQUE:The attacker attempts authenticated access to targeted functions and data.:TECHNIQUE:The attacker attempts unauthenticated access to targeted functions and data.:TECHNIQUE:The attacker attempts indirect and side channel access to targeted functions and data.::STEP:3:PHASE:Exploit:DESCRIPTION:[Access the function or data bypassing the access control] The attacker executes the function or accesses the data identified in the Explore phase bypassing the access control.:TECHNIQUE:The attacker executes the function or accesses the data not authorized to them.::","::The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity..::","::SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low::",::None: No specialized resources are required to execute this type of attack.::,,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::,::Design: Configure the access control correctly.::,"::For example, an incorrectly configured Web server, may allow unauthorized access to it, thus threaten the security of the Web application.::",::732::1190::1191::1193::1220::1268::1280::1297::1311::1315::1318::1320::1321::,TAXONOMY NAME:ATTACK:ENTRY ID:1574.010:ENTRY NAME:Hijack Execution Flow: Services File Permissions Weaknesses::,
Software Integrity Attack,Meta,Draft,"An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.",,,Low,,,,::SKILL:Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the attacker to host a payload and then trigger the installation of the payload code.:LEVEL:Medium::,"::Software Integrity Attacks are usually a late stage focus of attack activity which depends upon the success of a chain of prior events. The resources required to perform the attack vary with respect to the overall attack strategy, existing countermeasures which must be bypassed, and the success of early phase attack vectors.::",,,,,::494::,,
Read Sensitive Constants Within an Executable,Detailed,Draft,"An adversary engages in activities to discover any sensitive constants present within the compiled code of an executable. These constants may include literal ASCII strings within the file itself, or possibly strings hard-coded into particular routines that can be revealed by code refactoring methods including static and dynamic analysis.",,,Low,::NATURE:ChildOf:CAPEC ID:167::,,::Access to a binary or executable such that it can be analyzed by various utilities.::,,"::Binary analysis programs such as 'strings' or 'grep', or hex editors.::",,,,,::798::,TAXONOMY NAME:ATTACK:ENTRY ID:1552.001:ENTRY NAME:Unsecured Credentials:Credentials in files::,"TYPE:Other:NOTE:More sophisticated methods of searching for sensitive strings within a file involve disassembly or decompiling of the file. One could, for example, utilize disassembly methods on an ISAPI executable or dll to discover a hard-coded password within the code as it executes. This type of analysis usually involves four stages in which first a debugger is attached to the running process, anti-debugging countermeasures are circumvented or bypassed, the program is analyzed step-by-step, and breakpoints are established so that discrete functions and data structures can be analyzed. Debugging tools such as SoftICE, Ollydbg, or vendor supplied debugging tools are often used. Disassembly tools such as IDA pro, or similar tools, can also be employed. A third strategy for accessing sensitive strings within a binary involves the decompilation of the file itself into source code that reveals the strings. An example of this type of analysis involves extracting source code from a java JAR file and then using functionality within a java IDE to search the source code for sensitive, hard-coded information. In performing this analysis native java tools, such as jar are used to extract the compiled class files. Next, a java decompiler such as DJ is used to extract java source code from the compiled classes, revealing source code. Finally, the source code is audited to reveal sensitive information, a step that is usually assisted by source code analysis programs.::"
Sustained Client Engagement,Meta,Draft,"An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource.",,,,,,::This pattern of attack requires a temporal aspect to the servicing of a given request. Success can be achieved if the adversary can make requests that collectively take more time to complete than legitimate user requests within the same time frame.::,,"::To successfully execute this pattern of attack, a script or program is often required that is capable of continually engaging the target and maintaining sustained usage of a specific resource. Depending on the configuration of the target, it may or may not be necessary to involve a network or cluster of objects all capable of making parallel requests.::",,,"::Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.::",,::400::,TAXONOMY NAME:ATTACK:ENTRY ID:1499:ENTRY NAME:Endpoint Denial of Service::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::,
Audit Log Manipulation,Standard,Draft,"The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.",,,,::NATURE:ChildOf:CAPEC ID:161::,,::The target host is logging the action and data of the user.::The target host insufficiently protects access to the logs or logging mechanisms.::,,"::The attacker must understand how the logging mechanism works. Optionally, the attacker must know the location and the format of individual entries of the log files.::",,,,,::117::,TAXONOMY NAME:ATTACK:ENTRY ID:1070:ENTRY NAME:Indicator Removal on Host::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.002:ENTRY NAME:Impair Defenses: Disable Windows Event Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.003:ENTRY NAME:Impair Defenses: Impair Command History Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.008:ENTRY NAME:Impair Defenses: Disable Cloud Logs::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Log Injection::,
Host Discovery,Standard,Stable,"An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.",,,Low,::NATURE:ChildOf:CAPEC ID:169::,,::The adversary requires logical access to the target network in order to carry out host discovery.::,,::The resources required will differ based upon the type of host discovery being performed. Usually a network scanning tool or scanning script is required due to the volume of requests that must be generated.::,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,,,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1018:ENTRY NAME:Remote System Discovery::,
Network Topology Mapping,Standard,Draft,"An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.",,,Low,::NATURE:ChildOf:CAPEC ID:169::NATURE:CanPrecede:CAPEC ID:664::,,::None::,,"::Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::,,,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1016:ENTRY NAME:System Network Configuration Discovery::::TAXONOMY NAME:ATTACK:ENTRY ID:1049:ENTRY NAME:System Network Connections Discovery::::TAXONOMY NAME:ATTACK:ENTRY ID:1590:ENTRY NAME:Gather Victim Network Information::,
Active OS Fingerprinting,Standard,Stable,"An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.",,Medium,Low,::NATURE:ChildOf:CAPEC ID:224::,,"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::",,"::Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges. A tool capable of sending and receiving packets from a remote system.::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Hide Activities::,,,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1082:ENTRY NAME:System Information Discovery::,
Passive OS Fingerprinting,Standard,Stable,"An adversary engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods, it is generally better able to evade detection.",,High,Low,::NATURE:ChildOf:CAPEC ID:224::,,"::The ability to monitor network communications.Access to at least one host, and the privileges to interface with the network interface card.::",,"::Any tool capable of monitoring network communications, like a packet sniffer (e.g., Wireshark)::",,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Hide Activities::,,,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1082:ENTRY NAME:System Information Discovery::,
Modification During Manufacture,Meta,Draft,"An attacker modifies a technology, product, or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition, hardware design and assembly, firmware, or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.",,,,,,,,,,,,,,TAXONOMY NAME:ATTACK:ENTRY ID:1195:ENTRY NAME:Supply Chain Compromise::,
Manipulation During Distribution,Meta,Draft,"An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.",,,,,,,,,,,,"::A malicious OEM provider, or OEM provider employee or contractor, may install software, or modify existing code, during distribution.::External contractors involved in the packaging or testing of products or components may install software, or modify existing code, during distribution.::",::1269::,TAXONOMY NAME:ATTACK:ENTRY ID:1195:ENTRY NAME:Supply Chain Compromise::,
Malicious Logic Insertion,Meta,Stable,"An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain.",,Medium,High,,,::Access to the component currently deployed at a victim location.::,,,,::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::,,,::284::,,
USB Memory Attacks,Detailed,Draft,"An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.",,Low,High,::NATURE:ChildOf:CAPEC ID:456::NATURE:CanPrecede:CAPEC ID:529::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Target System] In certain cases, the adversary will explore an organization's network to determine a specific target machine to exploit based on the information it contains or privileges the main user may possess.:TECHNIQUE:If needed, the adversary explores an organization's network to determine if any specific systems of interest exist.::STEP:2:PHASE:Experiment:DESCRIPTION:[Develop or Obtain malware and install on a USB device] The adversary develops or obtains the malicious software necessary to exploit the target system, which they then install on an external USB device such as a USB flash drive.:TECHNIQUE:The adversary can develop or obtain malware for to perform a variety of tasks such as sniffing network traffic or monitoring keystrokes.::STEP:3:PHASE:Exploit:DESCRIPTION:[Connect or deceive a user into connecting the infected USB device] Once the malware has been placed on an external USB device, the adversary connects the device to the target system or deceives a user into connecting the device to the target system such as in a USB Drop Attack.:TECHNIQUE:The adversary connects the USB device to a specified target system or performs a USB Drop Attack, hoping a user will find and connect the USB device on their own. Once the device is connected, the malware executes giving the adversary access to network traffic, credentials, etc.::",::Some level of physical access to the device being attacked.::Information pertaining to the target organization on how to best execute a USB Drop Attack.::,,,,,"::Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.::Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.::Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.::",,::1299::,TAXONOMY NAME:ATTACK:ENTRY ID:1091:ENTRY NAME:Replication Through Removable Media::::TAXONOMY NAME:ATTACK:ENTRY ID:1092:ENTRY NAME:Communication Through Removable Media::,
Signature Spoof,Standard,Draft,"An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.",,,,::NATURE:ChildOf:CAPEC ID:151::,,::The victim or victim system is dependent upon a cryptographic signature-based verification system for validation of one or more security events or actions.::The validation can be bypassed via an attacker-provided signature that makes it appear that the legitimate authoritative or reputable source provided the signature.::,::SKILL:Technical understanding of how signature verification algorithms work with data and applications:LEVEL:High::,,,::SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::,,"::An attacker provides a victim with a malicious executable disguised as a legitimate executable from an established software by signing the executable with a forged cryptographic key. The victim's operating system attempts to verify the executable by checking the signature, the signature is considered valid, and the attackers' malicious executable runs.::An attacker exploits weaknesses in a cryptographic algorithm to that allow a private key for a legitimate software vendor to be reconstructed, attacker-created malicious software is cryptographically signed with the reconstructed key, and is installed by the victim operating system disguised as a legitimate software update from the software vendor.::",::20::327::290::,TAXONOMY NAME:ATTACK:ENTRY ID:1036.001:ENTRY NAME:Masquerading: Invalid Code Signature::::TAXONOMY NAME:ATTACK:ENTRY ID:1553.002:ENTRY NAME:Subvert Trust Controls: Code Signing::,
Task Impersonation,Standard,Stable,"An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.",,Medium,High,::NATURE:ChildOf:CAPEC ID:173::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing sensitive information.:TECHNIQUE:Determine what tasks prompt a user for their credentials.:TECHNIQUE:Determine what tasks may prompt a user to authorize a process to execute with elevated privileges.::STEP:2:PHASE:Exploit:DESCRIPTION:[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials or to ride the user's privileges.:TECHNIQUE:Prompt a user for their credentials, while making the user believe the credential request is legitimate.:TECHNIQUE:Prompt a user to authorize a task to run with elevated privileges, while making the user believe the request is legitimate.::",::The adversary must already have access to the target system via some means.::A legitimate task must exist that an adversary can impersonate to glean credentials.::The user's privileges allow them to execute certain tasks with elevated privileges.::,"::SKILL:Once an adversary has gained access to the target system, impersonating a task is trivial.:LEVEL:Low::",::Malware or some other means to initially comprise the target system.::Additional malware to impersonate a legitimate task.::,::Credential or permission elevation prompts that appear illegitimate or unexpected.::,::SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::,"::The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.::","::An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.::An adversary prompts a user to authorize an elevation of privileges, implying that a background task needs additional permissions to execute. The user accepts the privilege elevation, allowing the adversary to execute additional malware or tasks with the user's privileges.::",::1021::,TAXONOMY NAME:ATTACK:ENTRY ID:1036.004:ENTRY NAME:Masquerading: Masquerade Task or Service::,
Overread Buffers,Standard,Draft,"An adversary attacks a target by providing input that causes an application to read beyond the boundary of a defined buffer. This typically occurs when a value influencing where to start or stop reading is set to reflect positions outside of the valid memory location of the buffer. This type of attack may result in exposure of sensitive information, a system crash, or arbitrary code execution.",,Low,High,::NATURE:ChildOf:CAPEC ID:123::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overread on. Adversaries often look for applications that accept user input and that perform manual memory management.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find attack vector] The adversary identifies an attack vector by looking for areas in the application where they can specify to read more data than is required.::STEP:3:PHASE:Exploit:DESCRIPTION:[Overread the buffer] The adversary provides input to the application that gets it to read past the bounds of a buffer, possibly revealing sensitive information that was not intended to be given to the adversary.::","::For this type of attack to be successful, a few prerequisites must be met. First, the targeted software must be written in a language that enables fine grained buffer control. (e.g., c, c++) Second, the targeted software must actually perform buffer operations and inadequately perform bounds-checking on those buffer operations. Finally, the adversary must have the capability to influence the input that guides these buffer operations.::",,,,"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:By reading outside the boundary of the intended buffer, the adversary is potentially able to see any data that is stored on the disk. This could include secret keys, personal information, and sensitive files.::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:Depending on the use of the target buffer, an application or system crash can be achieved.::",,,::125::,,
Physical Destruction of Device or Component,Standard,Draft,"An adversary conducts a physical attack a device or component, destroying it such that it no longer functions as intended.",,,,::NATURE:ChildOf:CAPEC ID:607::,,,,,,,,,,,
Install Rootkit ,Detailed,Draft,"An adversary exploits a weakness in authentication to install malware that alters the functionality and information provide by targeted operating system API calls. Often referred to as rootkits, it is often used to hide the presence of programs, files, network connections, services, drivers, and other system components.",,Medium,High,::NATURE:ChildOf:CAPEC ID:542::,,,,,,,::Prevent adversary access to privileged accounts necessary to install rootkits.::,"::A rootkit may take the form of a hypervisor. A hypervisor is a software layer that sits between the operating system and the processor. It presents a virtual running environment to the operating system. An example of a common hypervisor is Xen. Because a hypervisor operates at a level below the operating system it can hide its existence from the operating system.::Similar to a rootkit, a bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). Adversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.::",::284::,TAXONOMY NAME:ATTACK:ENTRY ID:1014:ENTRY NAME:Rootkit::::TAXONOMY NAME:ATTACK:ENTRY ID:1542.003:ENTRY NAME:Pre-OS Boot:Bootkit::::TAXONOMY NAME:ATTACK:ENTRY ID:1547.006:ENTRY NAME:Boot or Logon Autostart Execution:Kernel Modules and Extensions::,
Remote Services with Stolen Credentials,Standard,Stable,"This pattern of attack involves an adversary that uses stolen credentials to leverage remote services such as RDP, telnet, SSH, and VNC to log into a system. Once access is gained, any number of malicious activities could be performed.",,,Very High,::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::,,,,,,,"::Disable RDP, telnet, SSH and enable firewall rules to block such traffic. Limit users and accounts that have remote interactive login access. Remove the Local Administrators group from the list of groups allowed to login through RDP. Limit remote user permissions. Use remote desktop gateways and multifactor authentication for remote logins.::","::Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). There are other implementations and third-party tools that provide graphical access Remote Services similar to RDS. Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials.::Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell.::",::522::308::309::294::263::262::521::,TAXONOMY NAME:ATTACK:ENTRY ID:1021:ENTRY NAME:Remote Services::::TAXONOMY NAME:ATTACK:ENTRY ID:1114.002:ENTRY NAME:Email Collection:Remote Email Collection::::TAXONOMY NAME:ATTACK:ENTRY ID:1133:ENTRY NAME:External Remote Services::,
Use of Known Domain Credentials,Meta,Stable,An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.,,High,High,::NATURE:CanPrecede:CAPEC ID:151::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.:TECHNIQUE:An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.:TECHNIQUE:An adversary conducts a sniffing attack to steal credentials as they are transmitted.:TECHNIQUE:An adversary gains access to a database and exfiltrates password hashes.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.:TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account).::STEP:3:PHASE:Experiment:DESCRIPTION:[Attempt authentication] Try each credential until the target grants access.:TECHNIQUE:Manually or automatically enter each credential through the target's interface.::STEP:4:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within a system or application::STEP:5:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.::STEP:6:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.::","::The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.::The system/application does not have a sound password policy that is being enforced.::The system/application does not implement an effective password throttling mechanism.::The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.::","::SKILL:Once an adversary obtains a known credential, leveraging it is trivial.:LEVEL:Low::",::A list of known credentials.::A custom script that leverages the credential list to launch an attack.::,::Authentication attempts use credentials that have been used previously by the account in question.::Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.::Data is being transferred and/or removed from systems/applications within the network.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::,"::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.::Create a strong password policy and ensure that your system enforces this policy.::Ensure users are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse local administrator account credentials across systems.::Deny remote use of local admin credentials to log into domain systems.::Do not allow accounts to be a local administrator on more than one system.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Monitor system and domain logs for abnormal credential access.::","::Throughout 2015 and 2016, APT28 — also known as Pawn Storm, Sednit, Fancy Bear, Sofacy, and STRONTIUM — leveraged stolen credentials to infiltrate the Democratic National Committee (DNC), the United States Army, the World Anti-Doping Agency (WADA), the Court of Arbitration for Sport (TAS-CAS), and more. In most cases, the legitimate credentials were obtained via calculated spearphishing, tabnabbing, and DNS attacks targeted at corporate webmail systems. APT28 also executed several watering hole attacks, in addition to exploiting several zero-day vulnerabilities within Flash and Windows. The stolen credentials were then utilized to maintain authenticated access, laterally move within the local network, and exfiltrate sensitive information including DNC emails and personal medical records of numerous athletes. [REF-571]::In early 2019, FIN6 exploited stolen credentials from an organization within the engineering industry to laterally move within an environment via the Windows’ Remote Desktop Protocol (RDP). Multiple servers were subsequently infected with malware to create malware distribution servers, which were used to distribute the LockerGoga ransomware. [REF-573]::",::522::307::308::309::262::263::654::1273::,TAXONOMY NAME:ATTACK:ENTRY ID:1078:ENTRY NAME:Valid Accounts::,
Utilizing REST's Trust in the System Resource to Obtain Sensitive Data,Detailed,Draft,This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.,,Medium,Very High,::NATURE:ChildOf:CAPEC ID:157::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find a REST-style application that uses SSL] The adversary must first find a REST-style application that uses SSL to target. Because this attack is easier to carry out from inside of a server network, it is likely that an adversary could have inside knowledge of how services operate.::STEP:2:PHASE:Experiment:DESCRIPTION:[Insert a listener to sniff client-server communication] The adversary inserts a listener that must exist beyond the point where SSL is terminated. This can be placed on the client side if it is believed that sensitive information is being sent to the client as a response, although most often the listener will be placed on the server side to listen for client authentication information.:TECHNIQUE:Run wireshark or tcpdump on a device that is on the inside of a firewall, load balancer, or router of a network and capture traffic after SSL has been terminated::STEP:3:PHASE:Exploit:DESCRIPTION:[Gather information passed in the clear] If developers have not hashed or encrypted data sent in the sniffed request, the adversary will be able to read this data in the clear. Most commonly, they will now have a username or password that they can use to submit requests to the web service just as an authorized user::",::Opportunity to intercept must exist beyond the point where SSL is terminated.::The adversary must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.::,::SKILL:To insert a network sniffer or other listener into the communication stream:LEVEL:Low::,,,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::Implementation: Implement message level security such as HMAC in the HTTP communication::Design: Utilize defense in depth, do not rely on a single security mechanism like SSL::Design: Enforce principle of least privilege::","::The Rest service provider uses SSL to protect the communications between the service requester (client) to the service provider. In the instance where SSL is terminated before the communications reach the web server, it is very common in enterprise data centers to terminate SSL at a router, firewall, load balancer, proxy or other device, then the adversary can insert a sniffer into the communication stream and gather all the authentication tokens (such as session credentials, username/passwords combinations, and so on). The Rest service requester and service provider do not have any way to detect this attack.::",::300::287::693::,TAXONOMY NAME:ATTACK:ENTRY ID:1040:ENTRY NAME:Network Sniffing::,
Process Footprinting,Standard,Stable,"An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.",,Low,Low,::NATURE:ChildOf:CAPEC ID:169::,,::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::,,,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::,"::On a Windows system, the command, tasklist, displays information about processes. The same function on a Mac OS system is done with the command, ps.::In addition to manual discovery of running processes, an adversary can develop malware that carries out this attack pattern before subsequent malicious action.::",::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1057:ENTRY NAME:Process Discovery::,
System Footprinting,Standard,Stable,An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.,,Low,Low,::NATURE:ChildOf:CAPEC ID:169::,,::The adversary must have logical access to the target network and system.::,::SKILL:The adversary needs to know basic linux commands.:LEVEL:Low::,,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::,,::204::205::208::,TAXONOMY NAME:ATTACK:ENTRY ID:1082:ENTRY NAME:System Information Discovery::,
Blockage,Standard,Draft,An adversary blocks the delivery of an important system resource causing the system to fail or stop working.,,Medium,High,::NATURE:ChildOf:CAPEC ID:607::,,::This attack pattern requires knowledge of where important system resources are logically located as well as how they operate.::,,,,::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Blocking a resource from functional operation denies its availability to authorized users.::,,,,,
Obstruction,Meta,Draft,"An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or cause the system to stop working as intended. This can cause the system components to be unavailable until the obstruction mitigated.",,,,,,,,,,::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::,,,,,
Alternative Execution Due to Deceptive Filenames,Standard,Draft,"The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.",,,High,::NATURE:ChildOf:CAPEC ID:165::,,::The use of the file must be controlled by the file extension.::,,,,,"::Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.::",,::162::,TAXONOMY NAME:ATTACK:ENTRY ID:1036.007:ENTRY NAME:Masquerading: Double File Extension::,
Collect Data from Screen Capture,Detailed,Draft,"An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",,Medium,Medium,::NATURE:ChildOf:CAPEC ID:150::,,"::The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).::","::SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only to leverage the relevant command for screen capture.:LEVEL:Low::",::None: No specialized resources are required to execute this type of attack.::,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to capture potentially sensitive information and processes as they appear on the screen.::,"::Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.::While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.::",,::267::,TAXONOMY NAME:ATTACK:ENTRY ID:1113:ENTRY NAME:Screen Capture::::TAXONOMY NAME:ATTACK:ENTRY ID:1513:ENTRY NAME:Screen Capture::,
Adding a Space to a File Extension,Detailed,Draft,"An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.",,Low,Medium,::NATURE:ChildOf:CAPEC ID:635::,,::The use of the file must be controlled by the file extension.::,,,,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::,::File extensions should be checked to see if non-visible characters are being included.::,,::46::,TAXONOMY NAME:ATTACK:ENTRY ID:1036.006:ENTRY NAME:Masquerading:Space after Filename::,
Sniff Application Code,Detailed,Draft,"An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",,Low,High,::NATURE:ChildOf:CAPEC ID:157::NATURE:CanPrecede:CAPEC ID:37::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Set up a sniffer] The adversary sets up a sniffer in the path between the server and the client and watches the traffic.:TECHNIQUE:The adversary sets up a sniffer in the path between the server and the client.::STEP:2:PHASE:Exploit:DESCRIPTION:[Capturing Application Code Bound During Patching]adversary knows that the computer/OS/application can request new applications to install, or it periodically checks for an available update. The adversary loads the sniffer set up during Explore phase, and extracts the application code from subsequent communication. The adversary then proceeds to reverse engineer the captured code.:TECHNIQUE:adversary loads the sniffer to capture the application code bound during a dynamic update.:TECHNIQUE:The adversary proceeds to reverse engineer the captured code.::","::The attacker must have the ability to place themself in the communication path between the client and server.::The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.::The attacker must be able to employ a sniffer on the network without being detected.::","::SKILL:The attacker needs to setup a sniffer for a sufficient period of time so as to capture meaningful quantities of code. The presence of the sniffer should not be detected on the network. Also if the attacker plans to employ an adversary-in-the-middle attack (CAPEC-94), the client or server must not realize this. Finally, the attacker needs to regenerate source code from binary code if the need be.:LEVEL:Medium::",::The Attacker needs the ability to capture communications between the client being updated and the server providing the update. In the case that encryption obscures client/server communication the attacker will either need to lift key material from the client.::,,::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::Design: Encrypt all communication between the client and server.::Implementation: Use SSL, SSH, SCP.::Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network.::","::Attacker receives notification that the computer/OS/application has an available update, loads a network sniffing tool, and extracts update data from subsequent communication. The attacker then proceeds to reverse engineer the captured stream to gain sensitive information, such as encryption keys, validation algorithms, applications patches, etc..::Plain code, such as applets or JavaScript, is also part of the executing application. If such code is transmitted unprotected, the attacker can capture the code and possibly reverse engineer it to gain sensitive information, such as encryption keys, validation algorithms and such.::",::319::311::318::693::,TAXONOMY NAME:ATTACK:ENTRY ID:1040:ENTRY NAME:Network Sniffing::,
Metadata Spoofing,Meta,Stable,"An adversary alters the metadata of a resource (e.g., file, directory, repository, etc.) to present a malicious resource as legitimate/credible.",,Medium,High,,,::Identification of a resource whose metadata is to be spoofed::,::SKILL:Ability to spoof a variety of metadata to convince victims the source is trusted:LEVEL:Medium::,,,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Accountability:TECHNICAL IMPACT:Hide Activities::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::,"::Validate metadata of resources such as authors, timestamps, and statistics.::Confirm the pedigree of open source packages and ensure the code being downloaded does not originate from another source.::Even if the metadata is properly checked and a user believes it to be legitimate, there may still be a chance that they've been duped. Therefore, leverage automated testing techniques to determine where malicious areas of the code may exist.::",,,,
Spoof Open-Source Software Metadata,Standard,Stable,"An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.",,Medium,High,::NATURE:ChildOf:CAPEC ID:690::NATURE:CanPrecede:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:444::NATURE:PeerOf:CAPEC ID:630::,,::Identification of a popular open-source component whose metadata is to be spoofed.::,::SKILL:Ability to spoof a variety of software metadata to convince victims the source is trusted.:LEVEL:Medium::,,,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Accountability:TECHNICAL IMPACT:Hide Activities::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges::,"::Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.::Within package managers, look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.::Reference vulnerability databases to determine if the software contains known vulnerabilities.::Only download open-source software from reputable hosting sites or package managers.::Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.::After downloading open-source software, ensure integrity values have not changed.::Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.::","::An adversary provides a malicious open-source library, claiming to provide extended logging features and functionality, and spoofs the metadata with that of a widely used legitimate library. The adversary then tricks victims into including this library in their underlying application. Once the malicious software is incorporated into the application, the adversary is able to manipulate and exfiltrate log data.::",::494::,TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Compromise Software Dependencies and Development Tools::::TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::,
Spoof Version Control System Commit Metadata,Detailed,Stable,"An adversary spoofs metadata pertaining to a Version Control System (VCS) (e.g., Git) repository's commits to deceive users into believing that the maliciously provided software is frequently maintained and originates from a trusted source.",,Medium,High,::NATURE:ChildOf:CAPEC ID:691::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target] The adversary must first identify a target repository for them to spoof. Typically, this will be a popular and widely used repository, as to increase the amount of victims a successful attack will exploit.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create malicious repository] The adversary must create a malicious repository that imitates the legitimate repository being spoofed. This may include creating a username that closely matches the legitimate repository owner; creating a repository name that closely matches the legitimate repository name; uploading the legitimate source code; and more.::STEP:3:PHASE:Experiment:DESCRIPTION:[Spoof commit metadata] Once the malicious repository has been created, the adversary must then spoof the commit metadata to make the repository appear to be frequently maintained and originating from trusted sources.:TECHNIQUE:Git Commit Timestamps: The adversary generates numerous fake commits while setting the GIT_AUTHOR_DATE and GIT_COMMITTER_DATE environment variables to a date which is to be spoofed.:TECHNIQUE:Git Commit Contributors: The adversary obtains a legitimate and trusted user's email address and then sets this information via the git config command. The adversary can then commit changes leveraging this username.::STEP:4:PHASE:Exploit:DESCRIPTION:[Exploit victims] The adversary infiltrates software and/or system environments with the goal of conducting additional attacks.:TECHNIQUE:Active: The adversary attempts to trick victims into downloading the malicious software by means such as phishing and social engineering.:TECHNIQUE:Passive: The adversary waits for victims to download and leverage malicious software.::",::Identification of a popular open-source repository whose metadata is to be spoofed.::,::SKILL:Ability to spoof a variety of repository metadata to convince victims the source is trusted.:LEVEL:Medium::,,,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Accountability:TECHNICAL IMPACT:Hide Activities::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges::,"::Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.::Reference vulnerability databases to determine if the software contains known vulnerabilities.::Only download open-source software from reputable hosting sites or package managers.::Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.::After downloading open-source software, ensure integrity values have not changed.::Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.::","::In July 2022, Checkmarx reported that GitHub commit metadata could be spoofed if unsigned commits were leveraged by the repository. Adversaries were able to spoof commit contributors, as well as the date/time of the commit. This resulted in commits appearing to originate from trusted developers and a GitHub activity graph that duped users into believing that the repository had been maintained for a significant period of time. The lack of commit metadata validation ultimately allowed adversaries to propagate malware to unsuspecting victims [REF-719] [REF-720].::",::494::,,
Try Common or Default Usernames and Passwords,Detailed,Draft,"An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. secret or password) that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.",,Medium,High,::NATURE:ChildOf:CAPEC ID:49::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::,,::The system uses one factor password based authentication.The adversary has the means to interact with the system.::,"::SKILL:An adversary just needs to gain access to common default usernames/passwords specific to the technologies used by the system. Additionally, a brute force attack leveraging common passwords can be easily realized if the user name is known.:LEVEL:Low::",::Technology or vendor specific list of default usernames and passwords.::,::Many incorrect login attempts are detected by the system.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::,"::Delete all default account credentials that may be put in by the product vendor.::Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.::Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.::Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.::","::A user sets their password to 123 or intentionally leaves their password blank. If the system does not have password strength enforcement against a sound password policy, this password may be admitted. Passwords like these two examples are two simple and common passwords that are easily able to be guessed by the adversary.::Cisco 2700 Series Wireless Location Appliances (version 2.1.34.0 and earlier) have a default administrator username root with a password password. This allows remote attackers to easily obtain administrative privileges. See also: CVE-2006-5288::In April 2019, adversaries attacked several popular IoT devices (a VOIP phone, an office printer, and a video decoder) across multiple customer locations. An investigation conducted by the Microsoft Security Resposne Center (MSRC) discovered that these devices were used to gain initial access to corporate networks. In two of the cases, the passwords for the devices were deployed without changing the default manufacturer’s passwords and in the third instance the latest security update had not been applied to the device. [REF-572]::",::521::262::263::798::654::308::309::,TAXONOMY NAME:ATTACK:ENTRY ID:1078.001:ENTRY NAME:Valid Accounts:Default Accounts::,
Adversary in the Middle (AiTM),Meta,Stable,"An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.",::TERM:Man-in-the-Middle / MITM:DESCRIPTION:::TERM:Person-in-the-Middle / PiTM:DESCRIPTION:::TERM:Monkey-in-the-Middle:DESCRIPTION:::TERM:Monster-in-the-Middle:DESCRIPTION:::TERM:On-path Attacker:DESCRIPTION:::,High,Very High,::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:668::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Communication Mechanism] The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.:TECHNIQUE:Perform a sniffing attack and observe communication to determine a communication protocol.:TECHNIQUE:Look for application documentation that might describe a communication mechanism used by a target.::STEP:2:PHASE:Experiment:DESCRIPTION:[Position In Between Targets] The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.:TECHNIQUE:Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client.:TECHNIQUE:Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL.::STEP:3:PHASE:Exploit:DESCRIPTION:[Use Intercepted Data Maliciously] The adversary observes, filters, or alters passed data of its choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.:TECHNIQUE:Prevent some messages from reaching their destination, causing a denial of service.::",::There are two components communicating with each other.::An attacker is able to identify the nature and mechanism of communication between the two target components.::An attacker can eavesdrop on the communication between the target components.::Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.::The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption.::,::SKILL:This attack can get sophisticated since the attack may use cryptography.:LEVEL:Medium::,,,::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::,"::Ensure Public Keys are signed by a Certificate Authority::Encrypt communications using cryptography (e.g., SSL/TLS)::Use Strong mutual authentication to always fully authenticate both ends of any communications channel.::Exchange public keys using a secure channel::","::In 2017, security researcher Jerry Decime discovered that Equifax mobile applications were not leveraging HTTPS in all areas. Although authentication was properly utilizing HTTPS, in addition to validating the root of trust of the server certificate, other areas of the application were using HTTP to communicate. Adversaries could then conduct MITM attacks on rogue WiFi or cellular networks and hijack the UX. This further allowed the adversaries to prompt users for sensitive data, which could then be obtained in the plaintext response. [REF-636]::",::300::290::593::287::294::,TAXONOMY NAME:ATTACK:ENTRY ID:1557:ENTRY NAME:Adversary-in-the-Middle::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Man-in-the-middle attack::,
Phishing,Standard,Draft,Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.,,High,Very High,::NATURE:ChildOf:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::NATURE:CanPrecede:CAPEC ID:611::NATURE:CanPrecede:CAPEC ID:630::NATURE:CanPrecede:CAPEC ID:631::NATURE:CanPrecede:CAPEC ID:632::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the attacker impersonate the legitimate site more convincingly. The attacker can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.:TECHNIQUE:Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L):TECHNIQUE:Optionally obtain a legitimate SSL certificate for the new domain name.::STEP:2:PHASE:Explore:DESCRIPTION:[Explore legitimate website and create duplicate] An attacker creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.:TECHNIQUE:Use spidering software to get copy of web pages on legitimate site.:TECHNIQUE:Manually save copies of required web pages from legitimate site.:TECHNIQUE:Create new web pages that have the legitimate site's look and feel, but contain completely new content.::STEP:3:PHASE:Exploit:DESCRIPTION:[Convince user to enter sensitive information on attacker's site.] An attacker sends an e-mail to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to attacker's website) and log in. The key is to get the victim to believe that the e-mail is coming from a legitimate entity with which the victim does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.:TECHNIQUE:Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.:TECHNIQUE:Place phishing link in post to online forum.::STEP:4:PHASE:Exploit:DESCRIPTION:[Use stolen credentials to log into legitimate site] Once the attacker captures some sensitive information through phishing (login credentials, credit card information, etc.) the attacker can leverage this information. For instance, the attacker can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.:TECHNIQUE:Log in to the legitimate site using another user's supplied credentials::",::An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.::An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.::An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.::The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.::,"::SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium::",::Some web development tools to put up a fake website.::,::You receive an e-mail from an entity that you are not even a customer of prompting you to log into your account.::You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::,"::Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.::","::The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An attacker has just collected the target's online banking information which can now be used by the attacker to log into the target's bank account and transfer money to a bank account of the attackers' choice.::An adversary may use BlueJacking, or Bluetooth Phishing to send unsolicited contact cards, messages, or pictures to nearby devices that are listening via Bluetooth. These messages may contain phishing content.::",::451::,TAXONOMY NAME:ATTACK:ENTRY ID:1566:ENTRY NAME:Phishing::::TAXONOMY NAME:ATTACK:ENTRY ID:1598:ENTRY NAME:Phishing for Information::,
